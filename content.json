{"meta":{"title":"Coding Spirit","subtitle":"一位程序员，比较帅的那种","description":"毕业于OUC，现就职于Tymphany","author":"Coding Spirit","url":"http://lzqblog.top"},"pages":[{"title":"","date":"2019-05-26T06:08:09.472Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"404.html","permalink":"http://lzqblog.top/404.html","excerpt":"","text":""},{"title":"black hole","date":"2019-05-28T12:03:48.000Z","updated":"2019-05-29T11:55:36.624Z","comments":true,"path":"blackhole.html","permalink":"http://lzqblog.top/blackhole.html","excerpt":"","text":"\"use strict\"; var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } var PI = Math.PI, cos = Math.cos, sin = Math.sin, abs = Math.abs, sqrt = Math.sqrt, pow = Math.pow, floor = Math.floor, round = Math.round, random = Math.random, atan2 = Math.atan2; var HALF_PI = 0.5 * PI; var TAU = 2 * PI; var rand = function rand(n) { return n * random(); }; var randIn = function randIn(min, max) { return rand(max - min) + min; }; var fadeOut = function fadeOut(t, m) { return (m - t) / m; }; var fadeInOut = function fadeInOut(t, m) { var hm = 0.5 * m; return abs((t + hm) % m - hm) / hm; }; var dist = function dist(x1, y1, x2, y2) { return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); }; var angle = function angle(x1, y1, x2, y2) { return atan2(y2 - y1, x2 - x1); }; var lerp = function lerp(n1, n2, speed) { return (1 - speed) * n1 + speed * n2; }; var particleCount = 1000; var eventHorizon = 40; var canvas = void 0; var ctx = void 0; var center = void 0; var particles = void 0; var mouse = void 0; var hover = void 0; Array.prototype.lerp = function (target, speed) { var _this = this; this.forEach(function (n, i) { return _this[i] = lerp(n, target[i], speed); }); }; var Particle = function () { function Particle() { _classCallCheck(this, Particle); this.init(); } _createClass(Particle, [{ key: \"init\", value: function init() { this.life = 0; this.ttl = randIn(50, 200); this.speed = randIn(3, 5); this.size = randIn(0.5, 2); this.position = [rand(canvas.a.width), rand(canvas.a.height)]; this.lastPosition = [].concat(_toConsumableArray(this.position)); this.direction = angle.apply(undefined, _toConsumableArray(this.position).concat(_toConsumableArray(center))) - HALF_PI; this.velocity = [ cos(this.direction) * this.speed, sin(this.direction) * this.speed]; this.hue = rand(360); this.reset = false; } }, { key: \"die\", value: function die() { var _ctx$a; ctx.a.save(); ctx.a.globalAlpha = 0.1; ctx.a.filter = \"blur(4px)\"; ctx.a.globalCompositeOperation = 'multiply'; ctx.a.lineWidth = 2; ctx.a.strokeStyle = this.color; ctx.a.beginPath(); (_ctx$a = ctx.a).arc.apply(_ctx$a, _toConsumableArray(center).concat([eventHorizon, 0, TAU])); ctx.a.closePath(); ctx.a.stroke(); ctx.a.restore(); this.init(); } }, { key: \"checkBounds\", value: function checkBounds() { var _lastPosition = _slicedToArray( this.lastPosition, 2), x = _lastPosition[0], y = _lastPosition[1]; return x > canvas.a.width || x < 0 || y > canvas.a.height || y < 0; } }, { key: \"update\", value: function update() { this.lastPosition = [].concat(_toConsumableArray(this.position)); this.direction = lerp( angle.apply(undefined, _toConsumableArray(this.lastPosition).concat(_toConsumableArray(center))), angle.apply(undefined, _toConsumableArray(this.position).concat(_toConsumableArray(center))), 0.01); this.speed = fadeOut(dist.apply(undefined, _toConsumableArray(this.position).concat(_toConsumableArray(center))), canvas.a.width) * 50; this.velocity.lerp( [cos(this.direction) * this.speed, sin(this.direction) * this.speed], 0.01); this.position[0] += this.velocity[0]; this.position[1] += this.velocity[1]; (this.checkBounds() || this.life++ > this.ttl) && this.init(); dist.apply(undefined, _toConsumableArray(this.position).concat(_toConsumableArray(center)))"},{"title":"fire ball","date":"2019-05-29T12:03:48.000Z","updated":"2019-05-29T12:04:23.085Z","comments":true,"path":"fireball.html","permalink":"http://lzqblog.top/fireball.html","excerpt":"","text":"bgColor = '#111'; gravity = 0.03; particleColor = '#f73'; canvas = document.querySelector('canvas'); ctx = canvas.getContext('2d'); (onresize = function () { width = canvas.width = canvas.clientWidth; height = canvas.height = canvas.clientHeight; o = { x: Math.floor(width / 2), y: Math.floor(height / 2) }; edge = { top: -o.y, right: width - o.x, bottom: height - o.y, left: -o.x } })(); particles = {}; newParticle = (function () { var nextIndex = 0; return function (x, y, r, o, c, xv, yv, rv, ov) { particles[++nextIndex] = { index: nextIndex, x: x, y: y, r: r, o: o, c: c, xv: xv, yv: yv, rv: rv, ov: ov }; }; })(); fireballs = {}; newFireball = (function () { var nextIndex = 0; return function (x, y, xv, yv, life) { fireballs[++nextIndex] = { index: nextIndex, x: x, y: y, xv: xv, yv: yv, life: life }; }; })(); mouse = { x: 0, y: 0, d: 0 }; onmousemove = function (e) { mouse.x = e.clientX - o.x; mouse.y = e.clientY - o.y; var dx = mouse.x - pos1.x, dy = mouse.y - pos1.y; mouse.d = Math.sqrt(dx * dx + dy * dy); }; charging = false; pos1 = { x: 0, y: 0 }; showInstructions = true; onmousedown = function (e) { pos1.x = mouse.x; pos1.y = mouse.y; charging = true; showInstructions = false; }; onmouseup = function () { if (charging) { newFireball( mouse.x, mouse.y, (pos1.x - mouse.x) * 0.03, (pos1.y - mouse.y) * 0.03, 600 ); charging = false; } }; time = 0; requestAnimationFrame(loop = function () { ctx.setTransform(1, 0, 0, 1, 0, 0); ctx.globalCompositeOperation = 'source-over'; ctx.globalAlpha = 1; ctx.fillStyle = bgColor; ctx.fillRect(0, 0, width, height); ctx.translate(o.x, o.y); if (charging) { var c = Math.floor(30 + mouse.d / 2); ctx.strokeStyle = 'rgba(' + c + ',' + c + ',' + c + ',1)'; ctx.lineWidth = 4; ctx.beginPath(); ctx.moveTo(pos1.x, pos1.y); ctx.lineTo(mouse.x, mouse.y); ctx.lineCap = 'round'; ctx.stroke(); } if (showInstructions) { pos1.x = -70; pos1.y = -35; if (time < 10) { var x = -70, y = -35, r = 30 - time * 2, a = time / 10; } else if (time < 80) { var x = (time - 10) * 2 - 70, y = (time - 10) - 35, r = 10, a = 1; } else if (time < 90) { var x = 70, y = 35, r = 10 + (time - 80) * 2, a = 1 - (time - 80) / 10; } else if (time < 140) { var x = 70, y = 35, r = 30, a = 0; } var dx = pos1.x - x, dy = pos1.y - y, d = Math.sqrt(dx * dx + dy * dy); if (time < 80 && time > 10) { ctx.globalCompositeOperation = 'source-over'; ctx.globalAlpha = 1; var c = Math.floor(30 + d / 2); ctx.strokeStyle = 'rgba(' + c + ',' + c + ',' + c + ',1)'; ctx.lineWidth = 4; ctx.beginPath(); ctx.moveTo(pos1.x, pos1.y); ctx.lineTo(x, y); ctx.lineCap = 'round'; ctx.stroke(); } if (time < 140) { ctx.globalCompositeOperation = 'source-over'; ctx.globalAlpha = a; ctx.beginPath(); ctx.arc(x, y, r, 0, Math.PI * 2); ctx.lineWidth = 2; ctx.strokeStyle = '#aaa'; ctx.stroke(); } if (time == 80) { newFireball( x, y, dx * 0.03, dy * 0.03, 240 ); } time = (time + 1) % 180; } ctx.globalCompositeOperation = 'lighter'; for (var i in particles) { var p = particles[i]; ctx.beginPath(); ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2); ctx.globalAlpha = p.o; ctx.fillStyle = p.c; ctx.fill(); } for (var i in particles) { var p = particles[i]; p.x += p.xv; p.y += p.yv; p.r += p.rv; p.o += p.ov; if (p.r < 0) delete particles[p.index]; if (p.o < 0) delete particles[p.index]; } for (var i in fireballs) { f = fireballs[i]; var numParticles = Math.sqrt(f.xv * f.xv + f.yv * f.yv) / 5; if (numParticles < 1) numParticles = 1; var numParticlesInt = Math.ceil(numParticles), numParticlesDif = numParticles / numParticlesInt; for (var j = 0; j < numParticlesInt; j++) { newParticle( f.x - f.xv * j / numParticlesInt, f.y - f.yv * j / numParticlesInt, 7, numParticlesDif, particleColor, Math.random() * 0.6 - 0.3, Math.random() * 0.6 - 0.3, -0.3, -0.05 * numParticlesDif ); } f.x += f.xv; f.y += f.yv; f.yv += gravity; var boundary; if (f.y < (boundary = edge.top + 7)) { f.y = boundary; f.yv *= -1; } else if (f.y > (boundary = edge.bottom - 7)) { f.y = boundary; f.yv *= -1; } if (f.x > (boundary = edge.right - 7)) { f.x = boundary; f.xv *= -1; } else if (f.x < (boundary = edge.left + 7)) { f.x = boundary; f.xv *= -1; } if (--f.life < 0) delete fireballs[f.index]; } requestAnimationFrame(loop); });"},{"title":"分类","date":"2017-11-03T05:34:59.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"categories/index.html","permalink":"http://lzqblog.top/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-11-01T07:59:26.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"tags/index.html","permalink":"http://lzqblog.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Webserver bring up (I): Install lighttpd and fastcgi++","slug":"Webserver-bring-up-I-Install-lighttpd-and-fastcgi","date":"2019-06-20T10:55:08.000Z","updated":"2019-06-20T11:35:05.847Z","comments":true,"path":"2019-06-20/Webserver-bring-up-I-Install-lighttpd-and-fastcgi/","link":"","permalink":"http://lzqblog.top/2019-06-20/Webserver-bring-up-I-Install-lighttpd-and-fastcgi/","excerpt":"Webserver bring up(I): Install lighttpd and fastcgi++","text":"Webserver bring up(I): Install lighttpd and fastcgi++ Install LighttpdLighttpd is a popular high performance webserver. If you are using Debian based distributions, you can directly install it by apt install: 1sudo apt install lighttpd If you are using Yocto, you also can install it easily because poky already provided recipe for it. you can find it at poky/meta/recipes-extended/lighttpd/. The default installed version(no matter PC or Yocto) only provides basic functions, fastcgi is not included. To enable support for fastcgi you need to : Modify file lighttpd.conf(On PC path is /etc/lighttpd/lighttpd.conf) to add mod_fcgi into server.modules. If you are using Yocto, you also need to add lighttpd-module-fastcgi to IMAGE_INSTALL_append or declare dependencies of module fastcgi in your recipes:1IMAGE_INSTALL_append += &quot;lighttpd-module-fastcgi&quot; Install fastcgi++fastcgi++(fastcgipp) is a C++ FastCGI and Web development platform. I choose this library because it provides support for C++14 and the official site of fastcgi which provides C/C++ libraries before has been closed for several years. Seems there is no exist yocto recipe for fastcgi++ on internet, but it’s easy to write a recipe by myself because it support built by cmake. Here comes my recipe for fastcgi++: 12345678910111213141516171819202122SUMMARY = &quot;fastcgi++&quot;DESCRIPTION = &quot;C++ FastCGI and Web development platform&quot;SECTION = &quot;libs&quot;LICENSE = &quot;GPL-2.0&quot;AUTHOR = &quot;Alex.Don.Scofield(codingspirit)&quot;LIC_FILES_CHKSUM = &quot;file://$&#123;COMMON_LICENSE_DIR&#125;/GPL-2.0;md5=801f80980d171dd6425610833a22dbe6&quot;$&#123;PN&#125;_REPO = &quot;github.com/eddic/fastcgipp.git&quot;SRCREV_$&#123;PN&#125; = &quot;5a5c3a263595a1792b2867188770bcf4f4df8b83&quot;TARGET_CC_ARCH += &quot;$&#123;LDFLAGS&#125;&quot;SRC_URI = &quot; \\ git://$&#123;$&#123;PN&#125;_REPO&#125;;name=$&#123;PN&#125;;protocol=https;nobranch=1;destsuffix=git/$&#123;PN&#125; \\ &quot;S = &quot;$&#123;WORKDIR&#125;/git/$&#123;PN&#125;&quot;B = &quot;$&#123;WORKDIR&#125;/$&#123;BPN&#125;&quot;EXTRA_OECMAKE = &quot;-DCMAKE_BUILD_TYPE=RELEASE&quot;inherit cmake BTW to pass cmake runtime parameters in Yocto, we can use EXTRA_OECMAKE : 12EXTRA_OECMAKE += &quot;-DBUILD_SAMPLE=ON&quot;inherit cmake","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Web","slug":"Web","permalink":"http://lzqblog.top/tags/Web/"}]},{"title":"Yocto: systemd","slug":"Yocto-systemd","date":"2019-06-07T10:38:38.000Z","updated":"2019-06-07T12:07:57.320Z","comments":true,"path":"2019-06-07/Yocto-systemd/","link":"","permalink":"http://lzqblog.top/2019-06-07/Yocto-systemd/","excerpt":"As a replacement of System V init, systemd has been supported by Yocto long time ago. Let’s take a look at how to implement a Yocto recipe for systemd services.","text":"As a replacement of System V init, systemd has been supported by Yocto long time ago. Let’s take a look at how to implement a Yocto recipe for systemd services. Prepare .service fileAn example of service config file mydaemon.service: 123456789[Unit]Description=My Daemon[Service]User=rootGroup=rootType=simpleExecStart=/my_daemon/my_daemon_start.shStandardOutput=null Write a systemd recipeFirst of all, don’t forget add your service file into source files: 1234SRC_URI = &quot; \\ git://$&#123;$&#123;PN&#125;_REPO&#125;;name=$&#123;PN&#125;;protocol=http;nobranch=1;destsuffix=git/$&#123;PN&#125; \\ file://mydaemon.service \\ &quot; As you can see I put service file and application source code separately. You can put service file into your source code git repo as well. Then to add systemd into Yocto recipe, you need to inherit your recipe from systemd class: 1inherit systemd BTW Yocto support multiple inheritance, in my case I was trying to setup a cmake based application as a startup application when system booting up, so : 1inherit cmake systemd Notice: Here is a short introduction from Yocto reference manual The systemd class provides support for recipes that install systemd unit files.The functionality for this class is disabled unless you have “systemd” in DISTRO_FEATURES.Under this class, the recipe or Makefile (i.e. whatever the recipe is calling during the do_install task) installs unit files into ${D}${systemd_unitdir}/system. If the unit files being installed go into packages other than the main package, you need to set SYSTEMD_PACKAGES in your recipe to identify the packages in which the files will be installed.You should set SYSTEMD_SERVICE to the name of the service file. You should also use a package name override to indicate the package to which the value applies. If the value applies to the recipe’s main package, use ${PN}. Here is an example from the connman recipe: SYSTEMD_SERVICE_${PN} = &quot;connman.service&quot; Services are set up to start on boot automatically unless you have set SYSTEMD_AUTO_ENABLE to “disable”. For more information on systemd, see the “Selecting an Initialization Manager” section in the Yocto Project Development Manual. As you can see, we should set SYSTEMD_SERVICE to the name of the service file. 1SYSTEMD_SERVICE_$&#123;PN&#125; = &quot;mydaemon.service&quot; The last step is write a do_install task to install our services into target. The problem is in my scenario, cmake class already provided a do_install task, if we just override do_install task as below: 1234do_install() &#123; install -D -p -m0644 $&#123;WORKDIR&#125;/mydaemon.service \\ $&#123;D&#125;$&#123;systemd_unitdir&#125;/system/mydaemon.service&#125; cmake install task will not be executed. To fix this, we need to add cmake_do_install into overridden do_install task: 12345do_install() &#123; cmake_do_install install -D -p -m0644 $&#123;WORKDIR&#125;/mydaemon.service \\ $&#123;D&#125;$&#123;systemd_unitdir&#125;/system/mydaemon.service&#125; Then cmake install task will be executed, mydaemon.service will be installed and setup as well.","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"i.MX setup auto login","slug":"i-MX-setup-auto-login","date":"2019-06-06T12:00:22.000Z","updated":"2019-06-06T12:14:18.777Z","comments":true,"path":"2019-06-06/i-MX-setup-auto-login/","link":"","permalink":"http://lzqblog.top/2019-06-06/i-MX-setup-auto-login/","excerpt":"The default BSP provided by NXP requires login in UART after booting up, which seems “unfriendly” to some users.","text":"The default BSP provided by NXP requires login in UART after booting up, which seems “unfriendly” to some users. In i.MX Yocto BSP, Login is provided by a systemd service called systemd-serialgetty:sources/poky/meta/recipes-core/systemd/systemd-serialgetty/serial-getty@.serviceThis service will execute agetty when system booting up and require login. So there are two ways to disable login: Replace agetty with /bin/login1ExecStart=/bin/login -f root Provide username to agettyAdd option -a to provide username to agetty. 1234567[Service]Environment=&quot;TERM=xterm&quot;#ExecStart=-/sbin/agetty -8 -L %I @BAUDRATE@ $TERMExecStart=-/sbin/agetty -8 -a root -L %I @BAUDRATE@ $TERMType=idleRestart=alwaysRestartSec=0","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"Android: Error when execute sdkmanager","slug":"Android-Error-when-execute-sdkmanager","date":"2019-05-28T12:51:25.000Z","updated":"2019-05-28T12:54:51.548Z","comments":true,"path":"2019-05-28/Android-Error-when-execute-sdkmanager/","link":"","permalink":"http://lzqblog.top/2019-05-28/Android-Error-when-execute-sdkmanager/","excerpt":"Quick fix for error that sdkmanager throw exception when trying to call sdkmanager –license and sdkmanager –list.","text":"Quick fix for error that sdkmanager throw exception when trying to call sdkmanager –license and sdkmanager –list. Error messages1234567891011Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema at com.android.repository.api.SchemaModule$SchemaModuleVersion.&lt;init&gt;(SchemaModule.java:156) at com.android.repository.api.SchemaModule.&lt;init&gt;(SchemaModule.java:75) at com.android.sdklib.repository.AndroidSdkHandler.&lt;clinit&gt;(AndroidSdkHandler.java:81) at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:73) at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:48) Caused by: java.lang.ClassNotFoundException: javax.xml.bind.annotation.XmlSchema at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582) at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496) ... 5 more Quick fixIn Windows: Go to C:\\Users\\Alex.Li\\AppData\\Local\\Android\\Sdk\\tools\\bin Open sdkmanager.bat with editor Add -XX:+IgnoreUnrecognizedVMOptions –add-modules java.se.ee after set DEFAULT_JVM_OPTS=”-Dcom.android.sdklib.toolsdir=%~dp0..”:1set DEFAULT_JVM_OPTS=\"-Dcom.android.sdklib.toolsdir=%~dp0\\..\" -XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee In Linux: Go to &lt;android_sdk_path&gt;/tools/bin, &lt;android_sdk_path&gt; is the path where you unzip your Android SDK. Open sdkmanger with editor Add -XX:+IgnoreUnrecognizedVMOptions –add-modules java.se.ee after DEFAULT_JVM_OPTS=’”-Dcom.android.sdklib.toolsdir=$APP_HOME”‘“:1DEFAULT_JVM_OPTS='\"-Dcom.android.sdklib.toolsdir=$APP_HOME\" -XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'","categories":[{"name":"问题记录","slug":"问题记录","permalink":"http://lzqblog.top/categories/问题记录/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://lzqblog.top/tags/Android/"}]},{"title":"canvas demo page","slug":"canvas-demo-page","date":"2019-05-27T14:46:33.000Z","updated":"2019-06-06T12:15:13.631Z","comments":true,"path":"2019-05-27/canvas-demo-page/","link":"","permalink":"http://lzqblog.top/2019-05-27/canvas-demo-page/","excerpt":"","text":"This is a demo page for cool html5 canvas demos. Try to click them!Beware of performance issues if you trying to access those pages through mobile devices. :)Fire BallBlack Hole","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"html5","slug":"html5","permalink":"http://lzqblog.top/tags/html5/"}]},{"title":"Yocto recipe: Git","slug":"Yocto-recipe-Git","date":"2019-05-27T11:22:59.000Z","updated":"2019-05-27T11:55:41.468Z","comments":true,"path":"2019-05-27/Yocto-recipe-Git/","link":"","permalink":"http://lzqblog.top/2019-05-27/Yocto-recipe-Git/","excerpt":"This is a short post give a sample of Yocto recipe which fetches source codes from git server.","text":"This is a short post give a sample of Yocto recipe which fetches source codes from git server. 12345678910111213141516171819202122232425262728293031SUMMARY = &quot;Example&quot;DESCRIPTION = &quot;Recipes for Example&quot;LICENSE = &quot;GPL-2.0&quot;AUTHOR = &quot;Alex Li(Alex.Li@xxxx.com)&quot;#Path of your LICENSE file and checksumLIC_FILES_CHKSUM = &quot;file://$&#123;COMMON_LICENSE_DIR&#125;/GPL-2.0;md5=801f80980d171dd6425610833a22dbe6&quot;#Build dependenciesDEPENDS += &quot;boost ark-base ark-log&quot;#Run time dependenciesRDEPENDS_$&#123;PN&#125; = &quot;ark-base ark-log boost-program-options&quot;#Your git repo address, will be usedby $&#123;SRC_URI&#125;$&#123;PN&#125;_REPO = &quot;github.com/codingspirit/example.git&quot;#Set to $&#123;AUTOREV&#125; to automatically fetch the newest commit, you can set specific commit id as wellSRCREV_$&#123;PN&#125; = &quot;$&#123;AUTOREV&#125;&quot;#Files need to be installed into target need to declare in recipeFILES_$&#123;PN&#125; += &quot;/example/*&quot;#Set git source, name, protocol, branch, git clone destination. You can use &quot;branch=branchname&quot; to specify branch to require bitbake check after fetching#&quot;nobranch=1&quot; will skip branch checkSRC_URI = &quot; \\ git://$&#123;$&#123;PN&#125;_REPO&#125;;name=$&#123;PN&#125;;protocol=https;nobranch=1;destsuffix=git/$&#123;PN&#125; \\ &quot;# Path of source code. We set it to &quot;git/$&#123;PN&#125;&quot; in SRC_URIS = &quot;$&#123;WORKDIR&#125;/git/$&#123;PN&#125;&quot;# Build path, $&#123;BPN&#125; means &quot;The bare name of the recipe&quot;B = &quot;$&#123;WORKDIR&#125;/$&#123;BPN&#125;&quot;inherit cmake","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"i.MX setup TFTP and NFS","slug":"i-MX-setup-TFTP-and-NFS","date":"2019-05-26T08:03:24.000Z","updated":"2019-06-06T12:14:48.012Z","comments":true,"path":"2019-05-26/i-MX-setup-TFTP-and-NFS/","link":"","permalink":"http://lzqblog.top/2019-05-26/i-MX-setup-TFTP-and-NFS/","excerpt":"Using TFTP(Trivial File Transfer Protocol) and NFS(Network File System) to load kernel and rootfs can help to reduce operations of flash write efficiently, which can make you EVK board live longer… This summary is based on Alexey‘s version, with some modifications according to my experiment.","text":"Using TFTP(Trivial File Transfer Protocol) and NFS(Network File System) to load kernel and rootfs can help to reduce operations of flash write efficiently, which can make you EVK board live longer… This summary is based on Alexey‘s version, with some modifications according to my experiment. TFTPInstall necessary tools1sudo apt-get install xinetd tftpd tftp Setup TFTP12345678910111213mkdir -p /etc/xinetd.d/nano /etc/xinetd.d/tftpservice tftp&#123; protocol = udp port = 69 socket_type = dgram wait = yes user = nobody server = /usr/sbin/in.tftpd server_args = /srv/tftp disable = no&#125; create folder to store tftp files: 123sudo mkdir /srv/tftpsudo chmod -R 777 /srv/tftpsudo chown -R nobody /srv/tftp restart tftpd by xinetd: 1sudo /etc/init.d/xinetd restart copy device trees/kernel image to tftp folder: 12cp Image /srv/tftpcp Image-fsl-imx8mq-evk.dtb /srv/tftp/fsl-imx8mq-evk.dtb NFSInstall necessary tools1sudo apt-get install nfs-kernel-server nfs-common portmap Setup NFSAdd below line at end of /etc/exports1/home/ *(rw,insecure,no_root_squash,no_subtree_check) restart nfs server:1sudo /etc/init.d/nfs-kernel-server restart create copy of your rootfs:12345cd ~mkdir imx8-evk-dummy# goto your yocto image build dir, i.e. imx-yocto-bsp/imx8mmevk_build/tmp/work/imx8mmevk-poky-linux/fsl-image-validation-imx/1.0-r0cd &lt;your_yocto_image_build_folder&gt;cp -r rootfs ~/imx8-evk-dummy Notice: Seems long path of rootfs will cause rootfs mounting error, suggest copy your rootfs to a short path TargetInterrupt board booting up then type into u-boot terminal: 1234567setenv nfsroot &lt;path-to-your-rootfs&gt;setenv image &lt;kernel-image-name-in-tftp-folder&gt;setenv fdt_file &lt;devid-tree-file-name-in-tftp-folder&gt;setenv serverip &lt;pc-ip-address&gt;setenv bootcmd &apos;run netboot&apos;savreset i.e.: 1234567setenv nfsroot /home/alex/imx8-evk-dummy/rootfssetenv image Imagesetenv fdt_file fsl-imx8mm-evk.dtbsetenv serverip 10.0.1.17setenv bootcmd &apos;run netboot&apos;savreset","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Yocto QA Issue: Files/directories were installed but not shipped in any package","slug":"Yocto-QA-Issue-Files-directories-were-installed-but-not-shipped-in-any-package","date":"2019-05-02T11:55:53.000Z","updated":"2019-05-02T12:21:16.000Z","comments":true,"path":"2019-05-02/Yocto-QA-Issue-Files-directories-were-installed-but-not-shipped-in-any-package/","link":"","permalink":"http://lzqblog.top/2019-05-02/Yocto-QA-Issue-Files-directories-were-installed-but-not-shipped-in-any-package/","excerpt":"Yocto has much more strict rules than buildroot, one more QA Issue I met today is when I trying to install some regular files into rootfs by cmake install.","text":"Yocto has much more strict rules than buildroot, one more QA Issue I met today is when I trying to install some regular files into rootfs by cmake install. Root causeYocto/bitbake need to record every file you trying to install into rootfs, so it can easily remove those files when you trying to remove a package. Special case is When you trying to install TARGET by cmake like this:1install(TARGETS $&#123;PROJECT_NAME&#125; DESTINATION bin) Yocto will automatically record TARGET in this case if your inherit cmake recipe even you didn’t declare it in recipe explicitly. However, if we trying to install some regular files(like some setting files,scripts etc.) by install(FILES or install(DIRECTORY, yocto will require us to declare those files explicitly. FixDeclare those files in recipe:12FILES_$&#123;PN&#125; += &quot;/test/*&quot;# Change &quot;/test/*&quot; to where your regular file installed","categories":[{"name":"问题记录","slug":"问题记录","permalink":"http://lzqblog.top/categories/问题记录/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"Yocto QA Issue: -dev package contains non-symlink .so","slug":"Yocto-QA-Issue-dev-package-contains-non-symlink-so","date":"2019-04-29T11:11:37.000Z","updated":"2019-05-02T11:52:11.000Z","comments":true,"path":"2019-04-29/Yocto-QA-Issue-dev-package-contains-non-symlink-so/","link":"","permalink":"http://lzqblog.top/2019-04-29/Yocto-QA-Issue-dev-package-contains-non-symlink-so/","excerpt":"Last week I met an issue when I trying to include a shared lib(built by cmake) written by me into Yocto project, which has already been verified in buildroot.The root cause is recipe trying to directly install a *.so lib into target filesystem, which doesn’t meet Yocto QA request. Lib should be installed with version number(i.e. libabc.so.0.0.3), then use a soft link(i.e. libabc.so) link to it.","text":"Last week I met an issue when I trying to include a shared lib(built by cmake) written by me into Yocto project, which has already been verified in buildroot.The root cause is recipe trying to directly install a *.so lib into target filesystem, which doesn’t meet Yocto QA request. Lib should be installed with version number(i.e. libabc.so.0.0.3), then use a soft link(i.e. libabc.so) link to it. Quick fixIf your lib is using cmakeAdd below line to add lib version information in cmake:1set_target_properties($&#123;PROJECT_NAME&#125; PROPERTIES VERSION 0.0.3 SOVERSION 0.0.3) A better way:123set($&#123;PROJECT_NAME&#125;_VERSION \"0.0.3\")set_target_properties($&#123;PROJECT_NAME&#125; PROPERTIES VERSION $&#123;$&#123;PROJECT_NAME&#125;_VERSION&#125; SOVERSION $&#123;$&#123;PROJECT_NAME&#125;_VERSION&#125;)message(STATUS \"Version: $&#123;$&#123;PROJECT_NAME&#125;_VERSION&#125;\") After that, when you build it with bitbake, version number will be added to extension automatically, a soft link we mentioned will be created as well. Force Yocto ignore this warningIt’s not recommended but you can add below line into your lib recipe to force Yocto ignore this issue:1INSANE_SKIP_$&#123;PN&#125; = &quot;dev-so&quot; As matter of fact, you can use this line to avoid almost all QA Issues, just replace “dev-so” into your error type.","categories":[{"name":"问题记录","slug":"问题记录","permalink":"http://lzqblog.top/categories/问题记录/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"i.MX 8 getting started: cmake package","slug":"i-MX-8-getting-started-cmake-package","date":"2019-03-28T11:56:53.000Z","updated":"2019-03-28T12:10:44.000Z","comments":true,"path":"2019-03-28/i-MX-8-getting-started-cmake-package/","link":"","permalink":"http://lzqblog.top/2019-03-28/i-MX-8-getting-started-cmake-package/","excerpt":"We already started to use cmake instead of writing Makefile by our own in buildroot. Let’s see how to have a cmake package in Yocto.","text":"We already started to use cmake instead of writing Makefile by our own in buildroot. Let’s see how to have a cmake package in Yocto. Add your source file and CMakeListsHere we use a simple cpp source file to test c++11 and pthread. alexcmaketest.cpp : 123456789101112131415161718192021#include &lt;iostream&gt;#include &lt;thread&gt;#include &lt;memory&gt;int main()&#123; auto thread1 = std::make_unique&lt;std::thread&gt;([]() &#123; std::cout &lt;&lt; \"hello world from thread1\" &lt;&lt; std::endl; &#125;); auto thread2 = std::make_unique&lt;std::thread&gt;([]() &#123; std::cout &lt;&lt; \"hello world from thread2\" &lt;&lt; std::endl; &#125;); if (thread1-&gt;joinable()) thread1-&gt;join(); if (thread2-&gt;joinable()) thread2-&gt;join(); return 0;&#125; Then prepare your CMakeLists.txt: CMakeLists.txt: 1234567891011cmake_minimum_required(VERSION 2.8 FATAL_ERROR)project(alexcmaketest)file(GLOB SRC_FILES \"*.cpp\")add_executable($&#123;PROJECT_NAME&#125; $&#123;SRC_FILES&#125;)target_link_libraries($&#123;PROJECT_NAME&#125; pthread)install(TARGETS $&#123;PROJECT_NAME&#125; DESTINATION bin) Notice : install should be added into your CMakeLists.txt if you want your binary to be installed into rootfs. Write your recipecmakeexample_0.1.bb : 1234567891011SUMMARY = &quot;cmake example&quot;DESCRIPTION = &quot;Recipe for cmake test&quot;LICENSE = &quot;GPL-2.0&quot;LIC_FILES_CHKSUM = &quot;file://$&#123;COMMON_LICENSE_DIR&#125;/GPL-2.0;md5=801f80980d171dd6425610833a22dbe6&quot;SRC_URI = &quot;file://alexcmaketest.cpp \\ file://CMakeLists.txt&quot;S = &quot;$&#123;WORKDIR&#125;&quot;inherit cmake There is no need to override do_install nor do_config in this scenario. cmake.bbclass has already defined those tasks and we can just inherit from it.If pkgconfig is required by your cmake, use inherit pkgconfig cmake instead. Then add your packages into your layer, don’t forget config your package as IMAGE_INSTALL_append in layer.conf. After that, you should have a folder tree like this: 123456789101112.├── bitbake-cookerdaemon.log├── conf│ └── layer.conf├── COPYING.MIT├── README├── recipes-cmakeexample│ └── cmakeexample│ ├── cmakeexample-0.1│ │ ├── alexcmaketest.cpp│ │ └── CMakeLists.txt│ └── cmakeexample_0.1.bb Build your package!1$ bitbake cmakeexample Build your imageOf course don’t forget to re-build your image. 1$ bitbake fsl-image-qt5-validation-imx","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"i.MX 8 getting started: create your kernel module","slug":"i-MX-8-getting-started-create-your-kernel-module","date":"2019-03-26T12:34:32.000Z","updated":"2019-03-28T12:15:58.000Z","comments":true,"path":"2019-03-26/i-MX-8-getting-started-create-your-kernel-module/","link":"","permalink":"http://lzqblog.top/2019-03-26/i-MX-8-getting-started-create-your-kernel-module/","excerpt":"The normal way that using yocto to do kernel development is really painful… Maybe try out-of-tree build is a better choice.","text":"The normal way that using yocto to do kernel development is really painful… Maybe try out-of-tree build is a better choice. Create and add your layer1$ bitbake-layers create-layer --example-recipe-name alexkernel meta-alexkernel 1$ bitbake-layers add-layer ../sources/meta-alexkernel/ Or you can use exist layer instead, just create recipe files under your layer. Add your source code and Makefilealex_module.c:12345678910111213141516171819202122#include &lt;linux/module.h&gt;#include &lt;linux/printk.h&gt;#include &lt;linux/init.h&gt;static int __init alex_module_init(void)&#123; printk(KERN_INFO \"Hello from alex module!\\n\"); return 0;&#125;static void __exit alex_module_exit(void)&#123; printk(KERN_INFO \"Bye from alex module!\\n\"); return 0;&#125;module_init(alex_module_init);module_exit(alex_module_exit);MODULE_AUTHOR(\"Coding Spirit &lt;coding@spirit.com&gt;\");MODULE_LICENSE(\"GPL v2\"); Makefile:1234567891011121314obj-m := alex_module.oSRC := $(shell pwd)all: $(MAKE) -C $(KERNEL_SRC) M=$(SRC)modules_install: $(MAKE) -C $(KERNEL_SRC) M=$(SRC) modules_installclean: rm -f *.o *~ core .depend .*.cmd *.ko *.mod.c rm -f Module.markers Module.symvers modules.order rm -rf .tmp_versions Modules.symvers Modify recipe files and conf filealexkernel_0.1.bb: 1234567891011SUMMARY = &quot;kernel module example&quot;DESCRIPTION = &quot;Recipe created by bitbake-layers&quot;LICENSE = &quot;GPL-2.0&quot;LIC_FILES_CHKSUM = &quot;file://$&#123;COMMON_LICENSE_DIR&#125;/GPL-2.0;md5=801f80980d171dd6425610833a22dbe6&quot;inherit moduleSRC_URI = &quot;file://Makefile \\ file://alex_module.c&quot;S = &quot;$&#123;WORKDIR&#125;&quot; Notice: bitbake support inheritance. Inherit from a exist bbclass will be much easier than rewrite one all by yourself. Take a look at openembedded github to check how did they implement a base bbclass. BTW cmake.bbclass might be useful if you trying to support cmake. layer.conf: 123456789101112131415# We have a conf and classes directory, add to BBPATHBBPATH .= &quot;:$&#123;LAYERDIR&#125;&quot;# We have recipes-* directories, add to BBFILESBBFILES += &quot;$&#123;LAYERDIR&#125;/recipes-*/*/*.bb \\ $&#123;LAYERDIR&#125;/recipes-*/*/*.bbappend&quot;IMAGE_INSTALL_append += &quot;alexkernel&quot;KERNEL_MODULE_AUTOLOAD += &quot;alex_module&quot;BBFILE_COLLECTIONS += &quot;meta-alexkernel&quot;BBFILE_PATTERN_meta-alexkernel = &quot;^$&#123;LAYERDIR&#125;/&quot;BBFILE_PRIORITY_meta-alexkernel = &quot;6&quot;LAYERSERIES_COMPAT_meta-alexkernel = &quot;sumo&quot; Notice: Module will automatically get loaded when system booting up if KERNEL_MODULE_AUTOLOAD was set. We should have a folder tree as below:1234567891011.├── conf│ └── layer.conf├── COPYING.MIT├── README└── recipes-alexkernel └── alexkernel ├── alexkernel-0.1 │ ├── alex_module.c │ └── Makefile └── alexkernel_0.1.bb rebuild your rootfs and image1bitbake fsl-image-qt5-validation-imx Check your environment variables by bitbake -ebitbake -e is a very useful command when you trying to debug build problem. i.e. Check the rootfs folder of your image:1bitbake -e &lt;image&gt; | grep ^IMAGE_ROOTFS= Check the ${WORKDIR} of your recipe:1bitbake -e &lt;recipe&gt; | grep ^WORKDIR=","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"i.MX 8 getting started: create your general layer","slug":"i-MX-8-getting-started-create-your-general-layer","date":"2019-03-22T12:21:37.000Z","updated":"2019-03-26T11:11:39.000Z","comments":true,"path":"2019-03-22/i-MX-8-getting-started-create-your-general-layer/","link":"","permalink":"http://lzqblog.top/2019-03-22/i-MX-8-getting-started-create-your-general-layer/","excerpt":"This post will tell you how to create your own general layer with a “hello world” app to be built into your EVK.","text":"This post will tell you how to create your own general layer with a “hello world” app to be built into your EVK.Before start, you should run setup-environment first. Create your layerCreate layer example by bitbake-layersUse bitbake-layers create-layer &lt;layer name&gt; to create a general layer example. 12$ cd imx-yocto-bsp/source # you also can create your layer in other path$ bitbake-layers create-layer meta-alexlayer Notice: yocto-layer has been deprecated after Yocto 2.5. See yocto ref manual for more details. The yocto-bsp, yocto-kernel, and yocto-layer scripts previously shipped with poky but not in OpenEmbedded-Core have been removed. These scripts are not maintained and are outdated. In many cases, they are also limited in scope. The bitbake-layers create-layer command is a direct replacement for yocto-layer It will help you to create a layer with priority of 6. To change to other priority, add option “‐‐priority” or edit BBFILE_PRIORITY after creation. ModificationGo to your layer path, add some stuff into your conf/layer.conf: 12IMAGE_INSTALL_append += &quot;example&quot;LAYERSERIES_COMPAT_meta-alexlayer = &quot;sumo&quot; IMAGE_INSTALL_append will tell bitbake to install your app into image.Notice: It’s required by Yocto Project Compatible version 2 standard to set LAYERSERIES_COMPAT. There will be a warning if you didn’t do so. see yocto ref manual for more details. Note Setting LAYERSERIES_COMPAT is required by the Yocto Project Compatible version 2 standard. The OpenEmbedded build system produces a warning if the variable is not set for any given layer. Then add your source code:1234$ cd meta-alexlayer/recipes-example/example$ mkdir example-0.1$ cd example-0.1$ touch alexhello.cpp my example here :1234567// alexhello.cpp#include &lt;iostream&gt;int main()&#123; std::cout &lt;&lt; \"hello world from alexlayer\" &lt;&lt; std::endl; return 0;&#125; Then modify your recipe file example_0.1.bb: 123456789101112131415161718192021222324252627SUMMARY = &quot;bitbake-layers recipe&quot;DESCRIPTION = &quot;Recipe created by bitbake-layers&quot;LICENSE = &quot;MIT&quot;LIC_FILES_CHKSUM = &quot;file://$&#123;COMMON_LICENSE_DIR&#125;/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302&quot;TARGET_CC_ARCH += &quot;$&#123;LDFLAGS&#125;&quot;SRC_URI = &quot;file://alexhello.cpp&quot;S = &quot;$&#123;WORKDIR&#125;&quot;do_compile() &#123; $&#123;CXX&#125; alexhello.cpp -o alexhello&#125;do_install() &#123; install -d $&#123;D&#125;$&#123;bindir&#125; install -m 0755 alexhello $&#123;D&#125;$&#123;bindir&#125;&#125;python do_build() &#123; bb.plain(&quot;***********************************************&quot;); bb.plain(&quot;* *&quot;); bb.plain(&quot;* Example recipe created by bitbake-layers *&quot;); bb.plain(&quot;* *&quot;); bb.plain(&quot;***********************************************&quot;);&#125; Notice: Here we use TARGET_CC_ARCH += “${LDFLAGS}” to avoid “No GNU_HASH in the elf binary” error when QA check, see mega-manual for more details. 25.10.8. Default Linker Hash Style Changed The default linker hash style for gcc-cross is now “sysv” in order to catch recipes that are building software without using the OpenEmbedded LDFLAGS. This change could result in seeing some “No GNU_HASH in the elf binary” QA issues when building such recipes. You need to fix these recipes so that they use the expected LDFLAGS. Depending on how the software is built, the build system used by the software (e.g. a Makefile) might need to be patched. However, sometimes making this fix is as simple as adding the following to the recipe: TARGET_CC_ARCH += &quot;${LDFLAGS}&quot; After those steps, you should have a folder like this: Add your layer and buildThere are two ways to add your layer into build: Use bitbake-layers add-layerUse bitbake-layers add-layer &lt;layer name&gt; to add a layer and build it. Before this, you should source setup-environment. 12$ bitbake-layers add-layer meta-alexlayer$ bitbake example Modify script provided by nxpModify fsl-setup-release.sh, add your layer path to “BBLAYERS”:12echo \"BBLAYERS += \\\" \\$&#123;BSPDIR&#125;/sources/meta-qt5 \\\"\" &gt;&gt; $BUILD_DIR/conf/bblayers.confecho \"BBLAYERS += \\\" \\$&#123;BSPDIR&#125;/sources/meta-alexlayer \\\"\" &gt;&gt; $BUILD_DIR/conf/bblayers.conf # new layer Then source it and bitbake your new layer:12$ DISTRO=fsl-imx-xwayland MACHINE=imx8mmevk source fsl-setup-release.sh -b build-xwayland$ bitbake example Rebuild your image file1$ bitbake fsl-image-qt5-validation-imx","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"i.MX 8 getting started: setup environment","slug":"i-MX-8-getting-started-setup-environment","date":"2019-03-21T06:51:39.000Z","updated":"2019-05-28T13:04:26.076Z","comments":true,"path":"2019-03-21/i-MX-8-getting-started-setup-environment/","link":"","permalink":"http://lzqblog.top/2019-03-21/i-MX-8-getting-started-setup-environment/","excerpt":"This post will show you how to setup environment(Linux) for NXP i.MX 8 and build a image fot i.MX8 Mini EVK. If you trying to build a Android image, close this post.","text":"This post will show you how to setup environment(Linux) for NXP i.MX 8 and build a image fot i.MX8 Mini EVK. If you trying to build a Android image, close this post. Before startCheck your host environment: Fedora, openSUSE, CentOS, Debian, or Ubuntu(newer then 14.04, I test with 18.04) 120G disk space if graphical support is need Git is already setup on your machine Install toolsThere are some packages you might haven’t installed but required by Yocto: chrpath gawk u-boot-tools use apt install install all of them. Also for repo:12$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; /usr/local/bin/repo$ chmod a+x /usr/local/bin/repo You can choose your own repo install path, but make sure this path was added into PATH. Yocto project setupWe will use i.MX official repo to init.1234$ mkdir imx-yocto-bsp $ cd imx-yocto-bsp $ repo init -u https://source.codeaurora.org/external/imx/imx-manifest -b imx-linux-sumo -m imx-4.14.78-1.0.0_ga.xml $ repo sync Use -b &lt;branch-name&gt; to switch to use other branch if you want. Check on https://source.codeaurora.org/external/imx/imx-manifest to find all available branches. Start buildChoose one graphical backend for your image fsl-imx-x11 fsl-imx-wayland fsl-imx-xwayland fsl-imx-fbFor i.MX8, only fsl-imx-wayland and fsl-imx-xwayland are supported.Then run:12$ DISTRO=fsl-imx-xwayland MACHINE=imx8mmevk source fsl-setup-release.sh -b build-xwayland $ bitbake fsl-image-qt5-validation-imx Set MACHINE to other variable if you are not using i.MX8 Mini EVK. Use -b in fsl-setup-release to specify build dir. Summaries of my build details:12345678910111213141516171819202122232425Build Configuration:BB_VERSION = \"1.38.0\"BUILD_SYS = \"x86_64-linux\"NATIVELSBSTRING = \"ubuntu-18.04\"TARGET_SYS = \"aarch64-poky-linux\"MACHINE = \"imx8mmevk\"DISTRO = \"fsl-imx-xwayland\"DISTRO_VERSION = \"4.14-sumo\"TUNE_FEATURES = \"aarch64\"TARGET_FPU = \"\"meta meta-poky = \"HEAD:64a257fa22126c4a40ff7e03424a404e360ebe1e\"meta-oe meta-multimedia = \"HEAD:2bb21ef27c4b0c9d52d30b3b2c5a0160fd02b966\"meta-freescale = \"HEAD:407c6cf408969445031a492e2d25e0e2749582ea\"meta-freescale-3rdparty = \"HEAD:88a29631809d1af0df618245430db29f2a7012b5\"meta-freescale-distro = \"HEAD:f7e2216e93aff14ac32728a13637a48df436b7f4\"meta-bsp meta-sdk = \"HEAD:9867dae67c158e0820bf226bd18b792623e99b25\"meta-browser = \"HEAD:75640e14e325479c076b6272b646be7a239c18aa\"meta-gnome meta-networking meta-python meta-filesystems = \"HEAD:2bb21ef27c4b0c9d52d30b3b2c5a0160fd02b966\"meta-qt5 = \"HEAD:d4e7f73d04e8448d326b6f89908701e304e37d65\" Restart a build environment1$ source setup-environment &lt;build-dir&gt; FlashUsing mfgtools provided by nxp to flash. Flash to emmc: 1sudo uuu -b emmc_all imx-boot-imx8mmevk-sd.bin-flash_evk fsl-image-validation-imx-imx8mmevk.sdcard.bz2/* In develop stage, suggest to use TFTP and NFS for a longer flash life span. See i.MX setup TFTP and NFS for more details.","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Yocto","slug":"Yocto","permalink":"http://lzqblog.top/tags/Yocto/"}]},{"title":"C/C++ mixed programming error: undefined reference","slug":"C-C-mixed-programming-error-undefined-reference","date":"2019-03-18T12:37:06.000Z","updated":"2019-03-21T12:26:44.000Z","comments":true,"path":"2019-03-18/C-C-mixed-programming-error-undefined-reference/","link":"","permalink":"http://lzqblog.top/2019-03-18/C-C-mixed-programming-error-undefined-reference/","excerpt":"The solution for this issue is very sample, add #ifdef cplusplus extern “C” in your C header files. I have seen a lots of C header files with this code, I also know that those codes will help C code compatible with C++ code, but I had never try to dig in to find out why those codes works until few weeks ago I was trying to call a lib written by C but lib headers didn’t surround with #ifdef cplusplus extern “C”.(Shame on me) This post will tell you why.","text":"The solution for this issue is very sample, add #ifdef cplusplus extern “C” in your C header files. I have seen a lots of C header files with this code, I also know that those codes will help C code compatible with C++ code, but I had never try to dig in to find out why those codes works until few weeks ago I was trying to call a lib written by C but lib headers didn’t surround with #ifdef cplusplus extern “C”.(Shame on me) This post will tell you why. Why “undefined reference”?Normally, You can see this “undefined reference” error when compiler can’t find your functions’ definition. But if you click into this post, I’m pretty sure that you have checked your code more than once. The reason why you meet this error while mixing programming is C and C++ compilers have different name mangling rules while compiling. In C, one function only can have one definition, but in C++ polymorphism was added so method can have same name but different version definitions with different parameter lists.i.e. you have a function named foo in C:1void foo(int a)&#123;&#125;; Meanwhile you have 2 method in C++:12void foo(int a)&#123;&#125;;void foo(char a)&#123;&#125;; C compiler might rename it as __foo in assembly. But C++ have to do some changes to make sure method name is unique in assembly, normally in C++ compiler it might be renamed with parameter list like __Z1_foo_int and __Z1_foo_char. There will be linking error like “undefined reference” when your trying to link a C lib which was compiled by C compiler and your C header files didn’t add #ifdef cplusplus extern “C”, because C++ compiler trying to find a symbol named **Z1_foo_int but it can’t because it was renamed as __foo** by C compiler. Why extern “C” can solve this?12345678910111213#ifdef __cplusplusextern \"C\" &#123;#endif/**** your declarations *****/#ifdef __cplusplus &#125;#endif C compiler will ignore those codes because of marco #ifdef __cplusplus, it’s easy to understand. But if you are using a C++ compiler, this extern “C” will be active and tell C++ compiler “you should link those functions with C name mangling rules”. In this case, C++ can find function definitions correctly in your C lib.","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://lzqblog.top/tags/C/"},{"name":"C","slug":"C","permalink":"http://lzqblog.top/tags/C/"}]},{"title":"cmake notes","slug":"cmake-notes","date":"2019-03-04T02:14:47.000Z","updated":"2019-03-04T11:49:16.000Z","comments":true,"path":"2019-03-04/cmake-notes/","link":"","permalink":"http://lzqblog.top/2019-03-04/cmake-notes/","excerpt":"Take notes!","text":"Take notes! Use pkg-config in cmake12345678#require gstreamer and check version, $&#123;GST&#125; is an user defined prefix for _LIBRARIES/_INCLUDE_DIRS/_CFLAGS_OTHERpkg_check_modules(GST REQUIRED gstreamer-1.0&gt;=1.10 gstreamer-app-1.0&gt;=1.10)#Then we can get hidden variables $&#123;GST_LIBRARIES&#125; $&#123;GST_INCLUDE_DIRS&#125; $&#123;GST_CFLAGS_OTHER&#125;target_link_libraries($&#123;PROJECT_NAME&#125; boost_log pthread $&#123;GST_LIBRARIES&#125;)target_include_directories($&#123;PROJECT_NAME&#125; PUBLIC $&#123;GST_INCLUDE_DIRS&#125;)target_compile_options($&#123;PROJECT_NAME&#125; PUBLIC $&#123;GST_CFLAGS_OTHER&#125;) Add all files under a folder(i.e. add all source files)123456#option 1: use file(), store files into variable SRC_FILESfile(GLOB SRC_FILES \"*.cpp\")#if there are sub-dirs should be searched, use recursivefile(GLOB_RECURSE SRC_FILES \"*.cpp\")#option 2: use aux_source_directory(), store source files into variable SRC_FILESaux_source_directory(. SRC_FILES)","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"cmake","slug":"cmake","permalink":"http://lzqblog.top/tags/cmake/"}]},{"title":"C++ standard exceptions","slug":"C-standard-exceptions","date":"2019-02-27T19:01:07.000Z","updated":"2019-02-28T12:22:00.000Z","comments":true,"path":"2019-02-28/C-standard-exceptions/","link":"","permalink":"http://lzqblog.top/2019-02-28/C-standard-exceptions/","excerpt":"…","text":"… logic_error(It reports errors that are a consequence of faulty logic within the program such as violating logical preconditions or class invariants and may be preventable.) invalid_argument domain_error length_error out_of_range future_error(C++11) bad_optional_access(C++17) runtime_error(It reports errors that are due to events beyond the scope of the program and can not be easily predicted.) range_error overflow_error underflow_error regex_error(C++11) nonexistent_local_time(C++20) ambiguous_local_time(C++20) tx_exception(TM TS) system_error(C++11) ios_base::failure(C++11) filesystem::filesystem_error(C++17) bad_typeid bad_cast bad_any_cast(C++17) bad_weak_ptr(C++11) bad_function_call(C++11) bad_alloc(report failure to allocate storage) bad_array_new_length(C++11) bad_exception ios_base::failure(until C++11) bad_variant_access(C++17) For more details, refer to cppreference","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://lzqblog.top/tags/C/"}]},{"title":"Linux C/C++ debugging: using adb and gdb","slug":"Linux-C-C-debugging-using-adb-and-gdb","date":"2019-02-16T11:38:56.000Z","updated":"2019-02-16T14:04:27.000Z","comments":true,"path":"2019-02-16/Linux-C-C-debugging-using-adb-and-gdb/","link":"","permalink":"http://lzqblog.top/2019-02-16/Linux-C-C-debugging-using-adb-and-gdb/","excerpt":"在大学的时候就一直用gdb + gdbserver 来远程调试C++， 前年开始用VS Code后在板上部署程序后配合VS Code调试更是爽到不行（根本停不下来），有种本地开发的感觉， 再也不用在蛋疼的GDB里面敲‘b’ ‘r’ ‘c’， 哈哈。最近的项目对adb的支持非常不错，usb上传下载速度比ssh不知道高到哪里去了。今天突然想到之前写Android app的时候都能通过usb和adb进行调试， 现在在Linux下调C++应该也可以通过usb+adb实现， 为什么不试一下呢？","text":"在大学的时候就一直用gdb + gdbserver 来远程调试C++， 前年开始用VS Code后在板上部署程序后配合VS Code调试更是爽到不行（根本停不下来），有种本地开发的感觉， 再也不用在蛋疼的GDB里面敲‘b’ ‘r’ ‘c’， 哈哈。最近的项目对adb的支持非常不错，usb上传下载速度比ssh不知道高到哪里去了。今天突然想到之前写Android app的时候都能通过usb和adb进行调试， 现在在Linux下调C++应该也可以通过usb+adb实现， 为什么不试一下呢？ gdb + gdbserver既然要调C/C++， 这两兄弟基本上是必备了(VC++程序员表示并不需要)。 在target device上部署待调试程序并启动gdbserver，然后再在host上使用gdb target remote连接， 跨平台调试变得非常容易， 配合VS Code使用的例子可以参考这里 adb forwardgdb和gdbserver可以提供调试的server和client， 只要client能够访问到server的指定端口，调试就能够进行。通常我们使用gdb+gdbserver， target device和host在一个局域网内， 通过socket能很轻松地实现连接。 如果我们要通过usb实现这个连接， 可以通过adb forward实现。 如果你在Android上写过通过socket通信的app（不禁想起了做毕设的时候）， 基本上都会用到这个cmd， 只需一行命令 adb forward tcp:1234 tcp:5678, 所有在host端1234端口的通信都会被重定向到target端的5678端口，调试socket时轻松愉快！ 有了它的帮助， 就能通过usb线实现socket连接了 Step By StepLet’s have a quick step by step instruction: First of all, build your C/C++ app and upload your app binary to target device. Then we start gdbserver on target device:12#target devicegdbserver :$&#123;TARGET_PORT&#125; $&#123;EXEC_FILE&#125; i.e. : gdbserver :1234 /usr/bin/test_app. gdbserver will listening at port 1234 and waiting for client to connect. After that we can use adb forward on host PC(make sure usb connection is good and adb shell works well):12#hostadb forward tcp:$&#123;HOST_PORT&#125; tcp:$&#123;TARGET_PORT&#125; All the communication data on specific host port will be redirected to target server port.i.e. : adb forward tcp:4567 tcp:1234. Then all the data send to localhost:4567 on host PC will be redirected to target device 1234 port. Last step, start gdb on host PC then connect to target gdbserver:123456789101112131415161718#host$ gdb#make sure your gdb and your gdbserver are from one set of toolchainGNU gdb (Debian 7.12-6) 7.12.0.20161007-gitCopyright (C) 2016 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type \"show copying\"and \"show warranty\" for details.This GDB was configured as \"x86_64-linux-gnu\".Type \"show configuration\" for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type \"help\".Type \"apropos word\" to search for commands related to \"word\".(gdb) target remote :$&#123;HOST_PORT&#125; i.e. : (gdb) target remote :4567 Now we can start hunting bug!","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://lzqblog.top/tags/C/"},{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Linux kernel module(3)","slug":"Linux-kernel-module-3","date":"2018-12-23T01:46:15.000Z","updated":"2018-12-23T04:26:49.000Z","comments":true,"path":"2018-12-23/Linux-kernel-module-3/","link":"","permalink":"http://lzqblog.top/2018-12-23/Linux-kernel-module-3/","excerpt":"This post will give a simple introduction to Linux kernel module(Part III.). Linux kernel module简介(三)","text":"This post will give a simple introduction to Linux kernel module(Part III.). Linux kernel module简介(三)In this post we will discuss how to call kernel driver in user space. Access IIO devices from user spaceIn last two posts we use a IIO(Linux Industrial I/O Subsystem) device st_uvis25 as a example to show how to write a kernel module. There are a lot of devices fall into this subsystem: ADCs Accelerometers Gyros IMUs Capacitance to Digital Converters (CDCs) Pressure Sensors Color, Light and Proximity Sensors Temperature Sensors Magnetometers DACs DDS (Direct Digital Synthesis) PLLs (Phase Locked Loops) Variable/Programmable Gain Amplifiers (VGA, PGA) In st_uvis25_core.c, a iio_info has been defined and assigned to a iio_dev in probe function:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// st_uvis25_core.c, Line 267static const struct iio_info st_uvis25_info = &#123; .read_raw = st_uvis25_read_raw,&#125;;/* code */int st_uvis25_probe(struct device *dev, int irq, struct regmap *regmap)&#123; struct st_uvis25_hw *hw; struct iio_dev *iio_dev; int err; iio_dev = devm_iio_device_alloc(dev, sizeof(*hw)); if (!iio_dev) return -ENOMEM; dev_set_drvdata(dev, (void *)iio_dev); hw = iio_priv(iio_dev); hw-&gt;irq = irq; hw-&gt;regmap = regmap; err = st_uvis25_check_whoami(hw); if (err &lt; 0) return err; iio_dev-&gt;modes = INDIO_DIRECT_MODE; iio_dev-&gt;dev.parent = dev; iio_dev-&gt;channels = st_uvis25_channels; iio_dev-&gt;num_channels = ARRAY_SIZE(st_uvis25_channels); iio_dev-&gt;name = ST_UVIS25_DEV_NAME; iio_dev-&gt;info = &amp;st_uvis25_info; err = st_uvis25_init_sensor(hw); if (err &lt; 0) return err; if (hw-&gt;irq &gt; 0) &#123; err = st_uvis25_allocate_buffer(iio_dev); if (err &lt; 0) return err; err = st_uvis25_allocate_trigger(iio_dev); if (err) return err; &#125; return devm_iio_device_register(dev, iio_dev);&#125; If devm_iio_device_register success and iio_info.read_raw has been registered, a file will be created at :/sys/bus/iio/devices/iio:device0/xxx_rawIn terminal, you can read it by cat1cat /sys/bus/iio/devices/iio:device0/xxx_raw In C/C++ applications, you can use fopen because it’s a file.","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Comments system has been added","slug":"Comments-system-has-been-added","date":"2018-12-22T01:40:27.000Z","updated":"2018-12-22T01:46:58.000Z","comments":true,"path":"2018-12-22/Comments-system-has-been-added/","link":"","permalink":"http://lzqblog.top/2018-12-22/Comments-system-has-been-added/","excerpt":"","text":"现在blog支持使用Github帐号评论啦！You can use your github account to add comments now!","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"日志","slug":"日志","permalink":"http://lzqblog.top/tags/日志/"}]},{"title":"Linux kernel module(2)","slug":"Linux-kernel-module-2","date":"2018-12-16T01:33:48.000Z","updated":"2018-12-16T12:09:05.000Z","comments":true,"path":"2018-12-16/Linux-kernel-module-2/","link":"","permalink":"http://lzqblog.top/2018-12-16/Linux-kernel-module-2/","excerpt":"This post will give a simple introduction to Linux kernel module(Part II.). Linux kernel module简介(二)","text":"This post will give a simple introduction to Linux kernel module(Part II.). Linux kernel module简介(二)Let’s continue the unfinished parts we left in Part I.. A I2C moduleWhat is regmapregmap is a new API added in kernel 3.1. It helps to provide a abstraction for I2C/SPI/IRQ etc. operations. If chips provide both I2C and SPI interfaces, using regmap also can help to reuse part of code. In this example(st_uvis25, a UVI sensor), it provides another SPI driver(st_uvis25_spi.c), and a interfaces-nonrelevant file(st_uvis25_core.c) as well. st_uvis25_core.c will not care which kind of interfaces you are using, every I2C/SPI read/write will be done through regmap. If you put your device on I2C bus in dts file, regmap will call I2C operate functions when you use regmap_write, if it’s on SPI bus, regmap will call SPI operate functions instead. Tos use regmap API, a regmap_config should be defined. reg_bits and val_bits defined the register address length and data length inside this device. write_flag_mask and read_flag_mask will do OR operation with the data you trying to send/read(they are optional):123// linux-4.9/drivers/base/regmap/regmap.c, Line 2002 u8 = buf; *u8 |= map-&gt;write_flag_mask; Then use devm_regmap_init_i2c or devm_regmap_init_spi to initialize your regmap. It will help you to allocate memory for your regmap and release it when module remove. How to use regmap to control deviceLet’s take a look at st_uvis25.h and st_uvis25_core.c:12345678// st_uvis25.h, Line 26struct st_uvis25_hw &#123; struct regmap *regmap; struct iio_trigger *trig; bool enabled; int irq;&#125;; 123456789101112131415161718192021// st_uvis25_core.c Line 55static int st_uvis25_check_whoami(struct st_uvis25_hw *hw)&#123; int err, data; err = regmap_read(hw-&gt;regmap, ST_UVIS25_REG_WHOAMI_ADDR, &amp;data); if (err &lt; 0) &#123; dev_err(regmap_get_device(hw-&gt;regmap), \"failed to read whoami register\\n\"); return err; &#125; if (data != ST_UVIS25_REG_WHOAMI_VAL) &#123; dev_err(regmap_get_device(hw-&gt;regmap), \"wrong whoami &#123;%02x vs %02x&#125;\\n\", data, ST_UVIS25_REG_WHOAMI_VAL); return -ENODEV; &#125; return 0;&#125; This st_uvis25_check_whoami uses regmap_read to read value from register ST_UVIS25_REG_WHOAMI_ADDR and compares it to ST_UVIS25_REG_WHOAMI_VAL. i2c_probe and probeIn last post we already know that module_i2c_driver actually are encapsulations of module_init/exit, so it’s easy to understand that st_uvis25_i2c_probe will be called when install mod. But how about st_uvis25_probe, where does it come from? EXPORT_SYMBOLAs I mentioned in last section, there are two more files, this st_uvis25_probe is export from one of them(st_uvis25_core.c):12345int st_uvis25_probe(struct device *dev, int irq, struct regmap *regmap)&#123; /* code */&#125;EXPORT_SYMBOL(st_uvis25_probe); EXPORT_SYMBOL is a marco defined in linux-4.9/include/linux/export.h123456789101112// linux-4.9/include/linux/export.h, Line 56/* For every exported symbol, place a struct in the __ksymtab section */#define ___EXPORT_SYMBOL(sym, sec) \\ extern typeof(sym) sym; \\ __CRC_SYMBOL(sym, sec) \\ static const char __kstrtab_##sym[] \\ __attribute__((section(\"__ksymtab_strings\"), aligned(1))) \\ = VMLINUX_SYMBOL_STR(sym); \\ static const struct kernel_symbol __ksymtab_##sym \\ __used \\ __attribute__((section(\"___ksymtab\" sec \"+\" #sym), used)) \\ = &#123; (unsigned long)&amp;sym, __kstrtab_##sym &#125; In newer kernel 4.19.9, this marco has been simplified to:12345678/* For every exported symbol, place a struct in the __ksymtab section */#define ___EXPORT_SYMBOL(sym, sec) \\ extern typeof(sym) sym; \\ __CRC_SYMBOL(sym, sec) \\ static const char __kstrtab_##sym[] \\ __attribute__((section(\"__ksymtab_strings\"), used, aligned(1))) \\ = #sym; \\ __KSYMTAB_ENTRY(sym, sec) When you use it as EXPORT_SYMBOL(my_export, GPL),it will be expanded like this:123456789extern typeof(my_export) my_export; \\__CRC_SYMBOL(my_export, GPL) \\static const char __kstrtab_my_export[] \\__attribute__((section(\"__ksymtab_strings\"), aligned(1))) \\= VMLINUX_SYMBOL_STR(my_export); \\static const struct kernel_symbol __ksymtab_my_export \\__used \\__attribute__((section(\"___ksymtab\" GPL \"+\" my_export), used)) \\= &#123; (unsigned long)&amp;my_export, __kstrtab_my_export &#125; It will be simpler if ignore attribute and __used(there are gcc attributes) and expand again:123static const char __kstrtab_my_export[] =” my_export”;static const struct kernel_symbol__ksymtab_my_export=&#123;(unsigned long)&amp;my_export,_kstrab_my_export&#125; This part of code declared a static const char array to store symbol name and a static const struct to store address and name of this symbol. If we add attribute back again, this char array will be put into section __ksymtab_strings and struct will be put into section __ksymatab_gpl. How to call drivers in user space will be discussed in Part III.To be continued…","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Linux kernel module(1)","slug":"Linux-kernel-module-1","date":"2018-12-09T03:01:48.000Z","updated":"2018-12-16T12:08:54.000Z","comments":true,"path":"2018-12-09/Linux-kernel-module-1/","link":"","permalink":"http://lzqblog.top/2018-12-09/Linux-kernel-module-1/","excerpt":"This post will give a simple introduction to Linux kernel module(Part I.). Linux kernel module简介(一)","text":"This post will give a simple introduction to Linux kernel module(Part I.). Linux kernel module简介(一)When your system has a new external chip connected(I2C,SPI,GPIO etc.), you might need to write a driver for it by yourself. Normally this driver will be implemented as a kernel module. Kernel module development is a complex task and it’s hard to make it clear in one simple post. If you want to learn more, a good choice is taking a look at Linux kernel source code. The simplest example of kernel moduleSource code1234567891011121314151617181920212223// file:simple_module.c#include &lt;linux/init.h&gt;#include &lt;linux/module.h&gt;#include &lt;linux/printk.h&gt;static int __init sample_module_init(void)&#123; printk(KERN_INFO \"Hello world!\\n\"); return 0;&#125;static void __exit sample_module_exit(void)&#123; printk(KERN_INFO \"Bye!\\n\");&#125;module_init(sample_module_init);module_exit(sample_module_exit);MODULE_AUTHOR(\"Coding Spirit &lt;coding@spirit.com&gt;\");MODULE_LICENSE(\"GPL v2\"); This simple example shows basic structure of kernel module. A init function and a exit function must be declared, to avoid warnings, MODULE_AUTHOR and MODULE_LICENSE is needed as well. MakefileTo compile it to kernel module(.ko) file, we need to write a Makefile for it.123simple-module-objs := simple_module.oobj-m := simple-module.o In this Makefile $(-objs) lists all objects used to link the final executable, obj-m means loadable module goals, it will generate a standalone .ko file, then we can use insmod to install it. If change it to obj-y, it will be compiled into kernel. Test this module1234567891011# clear debug message firstdmesg -c# see modules already installedlsmod# install simple moduleinsmod simple-module.ko# check debug messagedmesg# remove simple modulermmod simple-module.kodmesg What are module_init/exit and __init/exitmodule_init and module_exit are macros to help register module init and exit functions. Use your F12, go to definition:123#define __define_initcall(fn, id) \\ static initcall_t __initcall_##fn##id __used \\ __attribute__((__section__(\".initcall\" #id \".init\"))) = fn; fn is your function name, id stand for priority, for module_init, this level will be set as 6. After using this marco, your init function will be called when do_initcalls was called(init/main.c)1234567static void __init do_initcalls(void)&#123; int level; for (level = 0; level &lt; ARRAY_SIZE(initcall_levels) - 1; level++) do_initcall_level(level);&#125; as for marco __init , It tells the compiler to put this function in a special section, which is declared in vmlinux.lds. __init puts the function in the “.init.text” section. Take a look at where it defined(/linux-4.9/include/linux/init.h):123456789101112131415161718/* These macros are used to mark some functions or * initialized data (doesn't apply to uninitialized data) * as `initialization' functions. The kernel can take this * as hint that the function is used only during the initialization * phase and free up used memory resources after*/ /* These are for everybody (although not all archs will actually discard it in modules) */#define __init __section(.init.text)#define __initdata __section(.init.data)#define __exitdata __section(.exit.data)#define __exit_call __used __section(.exitcall.exit)#ifdef MODULE#define __exit __section(.exit.text)#else#define __exit __used __section(.exit.text)#endif As we can see in comment, if you use __init to mark it, memory will be released after initialization. A I2C moduleThis simple module is useless, let’s take a look at a more useful one: linux/drivers/iio/light/st_uvis25_i2c.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/* * STMicroelectronics uvis25 i2c driver * * Copyright 2017 STMicroelectronics Inc. * * Lorenzo Bianconi &lt;lorenzo.bianconi83@gmail.com&gt; * * Licensed under the GPL-2. */#include &lt;linux/kernel.h&gt;#include &lt;linux/module.h&gt;#include &lt;linux/acpi.h&gt;#include &lt;linux/i2c.h&gt;#include &lt;linux/slab.h&gt;#include &lt;linux/regmap.h&gt;#include \"st_uvis25.h\"#define UVIS25_I2C_AUTO_INCREMENT BIT(7)static const struct regmap_config st_uvis25_i2c_regmap_config = &#123; .reg_bits = 8, .val_bits = 8, .write_flag_mask = UVIS25_I2C_AUTO_INCREMENT, .read_flag_mask = UVIS25_I2C_AUTO_INCREMENT,&#125;;static int st_uvis25_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)&#123; struct regmap *regmap; regmap = devm_regmap_init_i2c(client, &amp;st_uvis25_i2c_regmap_config); if (IS_ERR(regmap)) &#123; dev_err(&amp;client-&gt;dev, \"Failed to register i2c regmap %d\\n\", (int)PTR_ERR(regmap)); return PTR_ERR(regmap); &#125; return st_uvis25_probe(&amp;client-&gt;dev, client-&gt;irq, regmap);&#125;static const struct of_device_id st_uvis25_i2c_of_match[] = &#123; &#123; .compatible = \"st,uvis25\", &#125;, &#123;&#125;,&#125;;MODULE_DEVICE_TABLE(of, st_uvis25_i2c_of_match);static const struct i2c_device_id st_uvis25_i2c_id_table[] = &#123; &#123; ST_UVIS25_DEV_NAME &#125;, &#123;&#125;,&#125;;MODULE_DEVICE_TABLE(i2c, st_uvis25_i2c_id_table);static struct i2c_driver st_uvis25_driver = &#123; .driver = &#123; .name = \"st_uvis25_i2c\", .pm = &amp;st_uvis25_pm_ops, .of_match_table = of_match_ptr(st_uvis25_i2c_of_match), &#125;, .probe = st_uvis25_i2c_probe, .id_table = st_uvis25_i2c_id_table,&#125;;module_i2c_driver(st_uvis25_driver);MODULE_AUTHOR(\"Lorenzo Bianconi &lt;lorenzo.bianconi83@gmail.com&gt;\");MODULE_DESCRIPTION(\"STMicroelectronics uvis25 i2c driver\");MODULE_LICENSE(\"GPL v2\"); What are module_i2c_driver and MODULE_DEVICE_TABLELike module_init we mentioned, they are marcos as well. Use your holy F12:1234567891011/** * module_i2c_driver() - Helper macro for registering a modular I2C driver * @__i2c_driver: i2c_driver struct * * Helper macro for I2C drivers which do not do anything special in module * init/exit. This eliminates a lot of boilerplate. Each module may only * use this macro once, and calling it replaces module_init() and module_exit() */#define module_i2c_driver(__i2c_driver) \\ module_driver(__i2c_driver, i2c_add_driver, \\ i2c_del_driver) As for module_driver, marco AGAIN:12345678910111213141516171819202122232425/** * module_driver() - Helper macro for drivers that don't do anything * special in module init/exit. This eliminates a lot of boilerplate. * Each module may only use this macro once, and calling it replaces * module_init() and module_exit(). * * @__driver: driver name * @__register: register function for this driver type * @__unregister: unregister function for this driver type * @...: Additional arguments to be passed to __register and __unregister. * * Use this macro to construct bus specific macros for registering * drivers, and do not use it on its own. */#define module_driver(__driver, __register, __unregister, ...) \\static int __init __driver##_init(void) \\&#123; \\ return __register(&amp;(__driver) , ##__VA_ARGS__); \\&#125; \\module_init(__driver##_init); \\static void __exit __driver##_exit(void) \\&#123; \\ __unregister(&amp;(__driver) , ##__VA_ARGS__); \\&#125; \\module_exit(__driver##_exit); As you can see, those marcos actually are encapsulations of module_init/exit. And for MODULE_DEVICE_TABLE, it’s just help to create an alias, if there is any nodes in dts has the same compatible with your drivers, probe function will be called.As a driver writer, you have no idea how will user enumerate it(By of or i2c), so provide both of them is necessary. 12345678#ifdef MODULE/* Creates an alias so file2alias.c can find device table. */#define MODULE_DEVICE_TABLE(type, name) \\extern typeof(name) __mod_##type##__##name##_device_table \\ __attribute__ ((unused, alias(__stringify(name))))#else /* !MODULE */#define MODULE_DEVICE_TABLE(type, name)#endif regmap etc. will be discussed in Part II. To be continued…","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Markdown frequently used syntax","slug":"Markdown-frequently-used-syntax","date":"2018-11-24T02:55:05.000Z","updated":"2018-11-29T11:02:29.000Z","comments":true,"path":"2018-11-24/Markdown-frequently-used-syntax/","link":"","permalink":"http://lzqblog.top/2018-11-24/Markdown-frequently-used-syntax/","excerpt":"Markdown 常用语法小结 写了这么久的md, 偶尔还是会忘记一些细节，干脆写篇日志总结一下，以备不时之需","text":"Markdown 常用语法小结 写了这么久的md, 偶尔还是会忘记一些细节，干脆写篇日志总结一下，以备不时之需 Highlight(突出显示) Item How to use Preview Bold(加粗) **Bold Text** Bold Text Italic(斜体) *Italic Text* Italic Text Strike Through(删除线) ~~Strike Through Text~~ Strike Through Text Font Color(字体颜色) &lt;span style=&quot;color:red&quot;&gt;Red Text&lt;/span&gt; Red Text Markdown本身不支持更改字体颜色，但是支持插入HTML, 上面的&lt;span&gt;其实是HTML的标签。 如果还有其他奇奇怪怪的要求(如更改字体，更改大小，设置指针样式)，也可以使用&lt;span&gt;实现:1&lt;span style=\"color:blue;font-family:Impact;font-style:italic;cursor:crosshair;font-size:30px\"&gt;Impact font blue italic 30px with crosshair pointer&lt;/span&gt; 效果如下（鼠标移到上面试试）： Impact font blue italic 30px with crosshair pointer Table(表格)Markdown 支持插入简单的表格: 1234| Default | left aligned | right aligned | mid aligned || --------- | :----------- | ------------: | :---------: || short | short | short | short || long text | long text | long text | long text | 效果如下： Default left aligned right aligned mid aligned short short short short long text long text long text long text 表格内容的对齐方式可以通过更改”&minus;&minus;&minus;”进行调整：1234----- //默认，标题居中，内容左对齐:---- //标题和内容都左对齐-----: //标题和内容都右对齐:----: //标题和内容都居中对齐 Insert image or super link(图片和超链接)图片 使用![Background Text](image_path ‘Title’)可以插入图片, 其中: Background Text: 显示在图片下层的文字，也就是说如果图片显示正常的话一般会被挡住看不见 image_path: 图像源文件的路径。可以是网络链接，也可以是本地路径 Title: 显示在图片下方的标题 如： 1![](Markdown-frequently-used-syntax/IMG_20170621_154100.jpg 'Flying Spirit') 超链接使用[Suerp_Link](url)的方式插入超链接, 其中: Suerp_Link: 超链接显示的文本 url: 指向的链接 如: 1[一位程序员，比较帅的那种](https://www.lzqblog.top) 一位程序员，比较帅的那种 Check boxMarkdown也支持带check box的样式，用户可以通过单击来框选，但是这种样式在静态页面中没什么用 123- [x] item1- [ ] item2- [x] item3 item1 item2 item3 Flow(流程图)Markdown 甚至支持直接画流程图 要创建流程图只需两步：1.声明元素 2.连接元素一个简单的例子： ```flowflowst=&gt;start: Main Start:&gt;www.lzqblog.topinput=&gt;inputoutput: input aop=&gt;operation: a–sb=&gt;subroutine: a = a!cond=&gt;condition: a &gt; 100?output=&gt;inputoutput: print ae=&gt;endst-&gt;input-&gt;op-&gt;condcond(no,right)-&gt;sb(right)-&gt;output(right)-&gt;opcond(yes,down)-&gt;e```效果如下： 流程图的基本语法声明元素: tag=&gt;type: content:&gt;url tag 为标签，在连接元素的时候会用到type为元素类型，常用的有 start condition operation inputoutput subroutine end几种content 为显示在元素中的内容url为可添加的超链接 连接元素：对于非条件元素:tag1-&gt;tag2默认的箭头方向是向下(down)，也可以指定箭头方向：tag1(right)-&gt;tag2对于条件元素(condition)，多了一个yes or no参数:condition_tag(no,right)-&gt;tag2condition_tag(yes,down)-&gt;tag2 注： hexo默认不支持Markdown流程图，要在hexo上显示流程图需要安装hexo-filter-flowchart 1npm install --save hexo-filter-flowchart 常用的差不多就这些，有想到的以后再补充吧 flow st=>start: Main Start:>http://www.lzqblog.top input=>inputoutput: input a op=>operation: a-- sb=>subroutine: a = a! cond=>condition: a > 100? output=>inputoutput: print a e=>end st->input->op->cond cond(no,right)->sb(right)->output(right)->op cond(yes,down)->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://lzqblog.top/tags/Markdown/"}]},{"title":"Linux: ‘adb devices’ can't find devices","slug":"Linux-‘adb-devices’-can-t-find-devices","date":"2018-11-23T09:51:58.000Z","updated":"2018-11-26T11:26:53.000Z","comments":true,"path":"2018-11-23/Linux-‘adb-devices’-can-t-find-devices/","link":"","permalink":"http://lzqblog.top/2018-11-23/Linux-‘adb-devices’-can-t-find-devices/","excerpt":"A strange issue was found on my Debian PC that adb devices can’t find any device meanwhile lsusb can find the device I need.","text":"A strange issue was found on my Debian PC that adb devices can’t find any device meanwhile lsusb can find the device I need. Issue1234$ lsusbBus 002 Device 006: ID 18d1:4e26 Google Inc. $ adb devicesList of devices attached SolutionCopy the first 4 characters of your device ID when you type lsusb (mark it as red): Bus 002 Device 006: ID 18d1:4e26 Google Inc. Add it into file ~/.android/adb_usb.ini or create it if it doesn’t exist:1234# ANDROID 3RD PARTY USB VENDOR ID LIST -- DO NOT EDIT.# USE &apos;android update adb&apos; TO GENERATE.# 1 USB VENDOR ID PER LINE.0x18d1 After that, you need to restart your adb server:12345$ adb kill-server $ adb start-server$ adb devicesList of devices attached0123456789ABCDEF device Now it can be detected by adb devices","categories":[{"name":"问题记录","slug":"问题记录","permalink":"http://lzqblog.top/categories/问题记录/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Debian: nvidia display card driver install","slug":"Debian-nvidia-display-card-driver-install","date":"2018-11-20T03:01:38.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2018-11-20/Debian-nvidia-display-card-driver-install/","link":"","permalink":"http://lzqblog.top/2018-11-20/Debian-nvidia-display-card-driver-install/","excerpt":"Bumblebee aims to provide support for NVIDIA Optimus laptops for GNU/Linux distributions(Bumblebee porject, Debian wiki). It can help to solve the overheat problem caused by dual dispaly card, also provide a easy way to install nvidia close source driver as well.","text":"Bumblebee aims to provide support for NVIDIA Optimus laptops for GNU/Linux distributions(Bumblebee porject, Debian wiki). It can help to solve the overheat problem caused by dual dispaly card, also provide a easy way to install nvidia close source driver as well. Update your source.listTo install nvidia close source driver, you need to add contrib non-free at every “main” item in your source.list:1sudo sed -i.bak 's/stretch[^ ]* main$/&amp; contrib non-free/g' /etc/apt/sources.list This command will help you to do that meanwhile create a .bak file to backup your origin source.list.Don’t forget to do apt update after that:1sudo apt update Install BumblebeeIf you have installed nvidia driver before, you should remove them to continue:1sudo apt-get remove nvidia* Then you can start to install bumblebee now:1sudo apt install bumblebee-nvidia primus Don’t worry about nouveau driver, bumblebee will help you to handle it.Then we need to add your user account to bumlebee group:1sudo adduser $USER bumlebee After that you might need to restart your computer. Application will use your intel card by default. If you want some application use your nvidia card, use1optirun $(YOURAPP) Verify your driverA easy way to verify this is to use glxspheres. It’s a part of virtualgl project. glxgears is not recommended because it’s not a tool for benchmarking.We can use Intel display card to run it first:1vblank_mode=0 /opt/VirtualGL/bin/glxspheres64 vblank_mode=0 will temporarily disable vertical synchronization. If you don’t add it, you might only can get 60 fps which is same as your monitor refresh rate. The result I got: Then run it with nvidia card:1vblank_mode=0 optirun /opt/VirtualGL/bin/glxspheres64 It’s much faster than Intel card.","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Issue:No such file or directory","slug":"Issue-No-such-file-or-directory","date":"2018-11-14T02:23:11.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-11-14/Issue-No-such-file-or-directory/","link":"","permalink":"http://lzqblog.top/2018-11-14/Issue-No-such-file-or-directory/","excerpt":"Clarify this issueIf you trying to execute a executable binary, but you see this error “No such file or directory”, it’s normally caused by you trying to run a 32-bits binary on a 64-bits OS.","text":"Clarify this issueIf you trying to execute a executable binary, but you see this error “No such file or directory”, it’s normally caused by you trying to run a 32-bits binary on a 64-bits OS. First of all you should check your OS:1uname -a If you see x86_64, we can make sure you are using a 64-bits OS.Then we should check file type of executable binary:1file $&#123;THE_EXECUTABLE_BIN&#125; If you see ELF 32-bit LSB executable, Intel 80386, basically we can make sure you are trying to run a 32-bits binary on a 64-bits OS meanwhile your OS haven’t add i386 architecture yet. How to fix itWe need to add i386 architecture support on your 64-bits OS.1234sudo dpkg --add-architecture i386sudo apt-get updatesudo apt-get install multiarch-supportsudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 After that, try to run it again :)","categories":[{"name":"问题记录","slug":"问题记录","permalink":"http://lzqblog.top/categories/问题记录/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Cross compile gRPC for ARM","slug":"Cross-compile-gRPC-for-ARM","date":"2018-11-08T05:04:12.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-11-08/Cross-compile-gRPC-for-ARM/","link":"","permalink":"http://lzqblog.top/2018-11-08/Cross-compile-gRPC-for-ARM/","excerpt":"This post will tell you how to cross compile gPRC static lib for ARM. 前段时间尝试交叉编译gRPC遇到了不少的麻烦，写篇post记录一下。","text":"This post will tell you how to cross compile gPRC static lib for ARM. 前段时间尝试交叉编译gRPC遇到了不少的麻烦，写篇post记录一下。gRPC PreparationFirst of all, you should have gRPC source code. git clone it from github. Then update submodules:12cd grpcgit submodule update --init Install zlib for your arm compiler[Optional]libz is one of gRPC dependencies. If you haven’t installed it for your arm compiler yet, you may need to install it. You can get zlib at zlib Home Site. After download and unzip it, set cross compiler and build it:1234export CC=arm-linux-gnueabihf-gccexport AR=arm-linux-gnueabihf-ar./configuremake -j4 then install it if build succeed:1make install prefix=/usr/arm-linux-gnueabihf Compile and install protobuf &amp; gRPC for HOSTprotobuf:1234cd grpc/third_party/protobuf./autogen.sh &amp;&amp; ./configure &amp;&amp; make -j4sudo make install -j4sudo ldconfig gRPC:12cd ..make -j4 &amp;&amp; sudo make install -j4 &amp;&amp; sudo ldconfig Cross compile static lib for ARMmake plugins first:12make cleanmake plugins CC=arm-linux-gnueabihf-gcc -j4 Cross compile gRPC:12345678910export GRPC_CROSS_COMPILE=trueexport GRPC_CROSS_AROPTS=\"cr --target=elf32-little\"make -j4 HAS_PKG_CONFIG=false \\ CC=arm-linux-gnueabihf-gcc \\ CXX=arm-linux-gnueabihf-g++ \\ RANLIB=arm-linux-gnueabihf-ranlib \\ LD=arm-linux-gnueabihf-ld \\ LDXX=arm-linux-gnueabihf-g++ \\ AR=arm-linux-gnueabihf-ar \\ PROTOBUF_CONFIG_OPTS=\"--host=arm-linux-gnueabihf --with-protoc=/usr/local/bin/protoc\" static static is important. I tried to build shared lib but there will be a lot of errors because arm-linux-gnueabihf-ld doesn’t take “-Wl” as a parameter. If build succeed, you can find your static lib at “grpc/libs/opt”. reference: https://github.com/grpc/grpc/issues/9719","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://lzqblog.top/tags/C/"},{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"gPRC","slug":"gPRC","permalink":"http://lzqblog.top/tags/gPRC/"}]},{"title":"git command备忘录","slug":"git-command备忘录","date":"2018-10-21T08:20:36.000Z","updated":"2019-05-01T05:23:15.000Z","comments":true,"path":"2018-10-21/git-command备忘录/","link":"","permalink":"http://lzqblog.top/2018-10-21/git-command备忘录/","excerpt":"…","text":"… 全局配置用户名和邮箱:12git config --global user.name \"Alex.Li\"git config --global user.email \"Alex.Li@xxxx.com\" ssh密钥生成:1ssh-keygen -t rsa -C \"Alex.Li@xxxx.com\" 储存https/http方式用户名密码:1git config --global credential.helper store 添加tag并推送到远端:12git tag -a 1.0.0 -m 'add version 1.0.0'git push origin master --tags 更改一个https仓库为ssh仓库： .git/config中1url = https://xxxx.com/somebody/abcdef.git 改为1url = git@gxxxx.com:somebody/abcdef.git 反之则反","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"日志","slug":"日志","permalink":"http://lzqblog.top/tags/日志/"}]},{"title":"C++ Design Patterns: Singleton","slug":"Cpp-Design-Patterns-Singleton","date":"2018-09-12T08:46:08.000Z","updated":"2018-11-29T02:21:02.000Z","comments":true,"path":"2018-09-12/Cpp-Design-Patterns-Singleton/","link":"","permalink":"http://lzqblog.top/2018-09-12/Cpp-Design-Patterns-Singleton/","excerpt":"Singleton is a widely used design patterns in software engineering. This post will tell you when should we use Singleton and how to design a universal,template based Singleton base class.","text":"Singleton is a widely used design patterns in software engineering. This post will tell you when should we use Singleton and how to design a universal,template based Singleton base class. Why SingletonFor some special cases, we want one class only can be instantiated only once to avoid unexpected behavior, for example threadpool and logger. Threadpool and logger normally should be instantiated when we start the program and it should have the same lifetime as program. So we need to make sure those class will not be instantiated more than once and also should not be destroyed until program end. Differences Between Static Class And SingletonStatic class basically is a bunch of static functions, it’s not an OOP design. Singleton can implement interfaces and it’s more OOP like. How To Design A Singleton Base ClassOne of the most important feature of singleton class is non-copyable. To make it non-copyable, delete copy constructor and override operator “=”:123protected: Singleton(const Singleton&amp;) = delete; Singleton&amp; operator=(const Singleton&amp;) = delete; Another part is singleton’s constructor and destructor should be private or protected to avoid user call constructor and destructor accidentally. :123protected: Singleton() = default; virtual ~Singleton() = default; set destructor as virtual because it’s base class.The only public method is getInstance() which will return static instance of singleton class. An exampleFull source code Singleton.h:12345678910111213141516171819202122#pragma once#include &lt;memory&gt;namespace BaseClass &#123;template &lt;typename T&gt;class Singleton &#123; public: template &lt;typename... Args&gt; static T&amp; getInstance(Args&amp;&amp;... args) noexcept &#123; static T instance&#123;std::forward&lt;Args&gt;(args)...&#125;; return instance; &#125; protected: Singleton() = default; virtual ~Singleton() = default; Singleton(const Singleton&amp;) = delete; Singleton&amp; operator=(const Singleton&amp;) = delete;&#125;; // class Singleton&#125; // namespace BaseClass In this design, return value of getInstance() is a reference and use template to make it universal. When inherit this class, need to define subclass like this:1234567891011class MySingleton : public BaseClass::Singleton&lt;MySingleton&gt; &#123; friend class BaseClass::Singleton&lt;MySingleton&gt;; //declare as friend class of Singleton to give authority to base class can access private method public: void foo(); private: MySingleton(); ~MySingleton();&#125;; BasicLogger.h: is also a good example for this.","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://lzqblog.top/tags/C/"}]},{"title":"现在支持HTTPS啦","slug":"现在支持HTTPS啦","date":"2018-06-11T06:46:02.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-06-11/现在支持HTTPS啦/","link":"","permalink":"http://lzqblog.top/2018-06-11/现在支持HTTPS啦/","excerpt":"","text":"从今天开始，本站支持HTTPS访问啦！","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"日志","slug":"日志","permalink":"http://lzqblog.top/tags/日志/"}]},{"title":"makefile summarize","slug":"makefile-summarize","date":"2018-06-05T03:02:55.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-06-05/makefile-summarize/","link":"","permalink":"http://lzqblog.top/2018-06-05/makefile-summarize/","excerpt":"…","text":"… Variable Assignment(变量赋值)comparison of “=“, “:=“ , “?=“ and “+=““=“Variables defined with ‘=’ are recursively expanded variables. It means that value of this variable will be the last value gived by ‘=’ in makefile. For example:123a = foob = $(a) abca = oof In this case, the value of b will be oof abc. “:=“Variables defined with ‘:=’ are simply expanded variables. Just like “=“ in other language(C/C++/C#/Java). For example:123a := foob := $(a) abca := oof In this case, the value of b will be foo abc. “?=“We can use ‘?=’ to set a value to a variable only if this variable is not set yet. For example:1a ?= foo It is similar to:123ifeq ($(origin a), undefined)a = barendif “+=“‘+=’ is using for appending text. It will appending a space between two text.For example:12a = firsta += second In this case, the value of a will be first second. Useful Makefile Functions In makefile, functions should be called like this:1var = $(functionname arg1,arg2,arg3...) wildcardwildcard will help you get specific file name list in a dir.For example:12SRC_DIR := srcSOURCES := $(wildcard $(SRC_DIR)/*.cpp) In this case, SUORCES will be set like this(if *.cpp exists in SRC_DIR):1src/a.cpp src/b.cpp src/c.cpp addprefixaddprefix is using for add one value to the front of another value. For example:1a = $(addsuffix .o,foo bar) a will be set as ‘foo.o bar.o‘ patsubst$(patsubst pattern,replacement,text):Finds whitespace-separated words in text that match pattern and replaces them with replacement(gnu.org)For example:1a = $(patsubst %.cpp,%.o,a.cpp b.h c.cpp) a will be set as ‘a.o b.h c.o‘ notdir$(notdir names…):remove dir in names.For example:1a = $(notdir src/foo.c src/bar.c) a will be set as ‘foo.c bar.c‘ Using those functions to genreate *.o file and exec files in specific dir12345SRC_DIR:=srcOBJ_DIR:=objOUT_DIR:=outSOURCES:=$(wildcard $(SRC_DIR)/*.cpp)OBJECTS:=$(addprefix $(OBJ_DIR)/,$(patsubst %.cpp,%.o,$(notdir $(SOURCES)))) Phony Targets(伪目标)If we have a recipe :12clean: rm -rf $(OBJ_DIR) $(OUT_DIR) It will works well until one day you add one file called clean. In this case, you need add .PHONY:123.PHONY:cleanclean: rm -rf $(OBJ_DIR) $(OUT_DIR) If we do this, ‘make clean’ will run the recipe regardless of whether there is a file named clean.","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"makefile","slug":"makefile","permalink":"http://lzqblog.top/tags/makefile/"}]},{"title":"make: warning: Clock skew detected","slug":"make-warning-Clock-skew-detected","date":"2018-05-24T05:13:02.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-05-24/make-warning-Clock-skew-detected/","link":"","permalink":"http://lzqblog.top/2018-05-24/make-warning-Clock-skew-detected/","excerpt":"Sometimes make will output warning like this:1make: warning: Clock skew detected. Your build may be incomplete. It was caused by file time-stamps are ahead of clients’ clock.","text":"Sometimes make will output warning like this:1make: warning: Clock skew detected. Your build may be incomplete. It was caused by file time-stamps are ahead of clients’ clock. It can be fixed by update time-stamps:1find . -exec touch &#123;&#125; \\; Then make clean and make again","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Makefile","slug":"Makefile","permalink":"http://lzqblog.top/tags/Makefile/"}]},{"title":"Linux配置默认声卡","slug":"Linux配置默认声卡","date":"2018-05-02T06:08:54.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-05-02/Linux配置默认声卡/","link":"","permalink":"http://lzqblog.top/2018-05-02/Linux配置默认声卡/","excerpt":"树莓派多声卡，尝试配置声卡0为默认输出设备，声卡1为默认输入设备。","text":"树莓派多声卡，尝试配置声卡0为默认输出设备，声卡1为默认输入设备。 List all play/record device1234567891011121314pi@raspberrypi:~ $ aplay -l**** List of PLAYBACK Hardware Devices ****card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA] Subdevices: 7/7 Subdevice #0: subdevice #0 Subdevice #1: subdevice #1 Subdevice #2: subdevice #2 Subdevice #3: subdevice #3 Subdevice #4: subdevice #4 Subdevice #5: subdevice #5 Subdevice #6: subdevice #6card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI] Subdevices: 1/1 Subdevice #0: subdevice #0 12345pi@raspberrypi:~ $ arecord -l**** List of CAPTURE Hardware Devices ****card 1: Device [USB PnP Sound Device], device 0: USB Audio [USB Audio] Subdevices: 1/1 Subdevice #0: subdevice #0 Set card 0 as playback, card 1 as captureOpen .asoundrc file under $HOME12cd $HOMEvim .asoundrc Modify .asoundrc:123456789pcm.!default &#123; type asym playback.pcm &quot;plughw:0,0&quot; capture.pcm &quot;plughw:1,0&quot;&#125;ctl.!default &#123; type hw card 0&#125; “plughw:1,0” means card 1, device 0 Then save file and reboot","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"http://lzqblog.top/tags/Raspberry-Pi/"}]},{"title":"Ubuntu切换python版本","slug":"Ubuntu切换python版本","date":"2018-04-02T03:38:48.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-04-02/Ubuntu切换python版本/","link":"","permalink":"http://lzqblog.top/2018-04-02/Ubuntu切换python版本/","excerpt":"Ubuntu17.10默认的python version是2.7，如果安装了3.6默认的执行版本仍是2.7。如果想要切换python version，可以通过选择alternatives的方式切换版本。","text":"Ubuntu17.10默认的python version是2.7，如果安装了3.6默认的执行版本仍是2.7。如果想要切换python version，可以通过选择alternatives的方式切换版本。 检查当前安装的python版本 之前遇到一个奇怪的现象，Ubuntu突然不能使用python –version检查版本:1234The program 'python' can be found in the following packages: * python-minimal * python3Try: apt install &lt;selected package&gt; 使用sudo apt install python3后依然出现上述问题。解决办法：1sudo apt install python-minimal 之后可以使用python –version得到目前系统默认的版本为2.7.14. 切换python版本首先使用下面的命令检查当前是否为python设置了alternatives：1update-alternatives --list python 如果输出:1update-alternatives: error: no alternatives for python 则需要手动添加alternatives。如果我们要切换版本到python3.x，首先我们要使用whereis得到python3的安装位置：1whereis python3 从输出可以看到，当前安装了多个版本的python3，安装位置都在/usr/bin/python3.x：1python3: /usr/bin/python3.6m /usr/bin/python3 /usr/bin/python3.6 /usr/lib/python3.7 /usr/lib/python3 /usr/lib/python3.6 /etc/python3 /etc/python3.6 /usr/local/lib/python3.6 /usr/include/python3.6m /usr/share/python3 /usr/share/man/man1/python3.1.gz 在知道python安装位置后就可以添加alternatives,以python3.6为例：12sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2#the last \"2\" stand for priority level 其中最后的”2”表示优先级为2。同理，我们也可以把其他版本的python加入alternatives:1sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 现在使用update-alternatives –config python就可以看到当前python所有的alternatives并进行版本切换：123456789There are 2 choices for the alternative python (providing /usr/bin/python). Selection Path Priority Status------------------------------------------------------------ 0 /usr/bin/python3.6 2 auto mode* 1 /usr/bin/python2.7 1 manual mode 2 /usr/bin/python3.6 2 manual modePress &lt;enter&gt; to keep the current choice[*], or type selection number: 输入Selection number就可以切换版本啦！","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"},{"name":"python","slug":"python","permalink":"http://lzqblog.top/tags/python/"}]},{"title":"Jenkins+Gerrit: 自动commit//code review//submit","slug":"Jenkins-Gerrit-自动commit-code-review-submit","date":"2018-03-20T05:08:29.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-03-20/Jenkins-Gerrit-自动commit-code-review-submit/","link":"","permalink":"http://lzqblog.top/2018-03-20/Jenkins-Gerrit-自动commit-code-review-submit/","excerpt":"Jenkins+Gerrit的一般工作模式：user commit code to Gerrit-&gt;Jenkins test build success-&gt;other user code review +2-&gt;user submit-&gt;Jenkins release build-&gt;release SW. 我之前写了个release notes generator, 在Jenasdkins server上release build的时候， 可以自动生成release notes并打包并发给开发者。但是这个release notes在下一次build的时候会因为workspace的清空而被删除，因此希望Jenkins能够将release notes commit到Gerrit并保留下来，最后再自动上传到sharepoint上。实现上述过程后，自动化构建的自动化程度会更高一点，开发者只需在Jenkins上press a button, release就自动完成了。","text":"Jenkins+Gerrit的一般工作模式：user commit code to Gerrit-&gt;Jenkins test build success-&gt;other user code review +2-&gt;user submit-&gt;Jenkins release build-&gt;release SW. 我之前写了个release notes generator, 在Jenasdkins server上release build的时候， 可以自动生成release notes并打包并发给开发者。但是这个release notes在下一次build的时候会因为workspace的清空而被删除，因此希望Jenkins能够将release notes commit到Gerrit并保留下来，最后再自动上传到sharepoint上。实现上述过程后，自动化构建的自动化程度会更高一点，开发者只需在Jenkins上press a button, release就自动完成了。 新建branch 通常Gerrit trigger jenkins build的时候, jenkins 只会抓取某一次commit，这会导致抓取的code不在任何一个branch上。此时需要新建一个临时的branch，才能在后面进行push:12git branch \"jenkins_temp\"git checkout jenkins_temp Jenkins检测改动并提交 首先需要检测文件改动,以一个名为test.txt的文件为例：123456if [ \"$(git diff test.txt)\" != \"\" ]; then#if file has been modfied, do somethingecho \"Release_Notes.xlsx has been modfied\"elseecho \"Release_Notes.xlsx hasn't been modfied\"fi Staged changes并commit:123git add test.txt#if have two files: git add test1.txt text2.txtgit commit -m \"jenkins update test.txt 另：如果提交时没有生成commit id, 可以通过git hooks实现自动添加commit id。 Push changes 然后需要把改动Push到git远端。之前在Jenkins server上配置过git ssh key，因此我可以在server上直接push changes而不会报错。但是如果在Jenkins execute shell中执行脚本会遇到Permission denied的问题，因为execute shell的运行环境是独立的，并没有配置过ssh key。这时可以通过临时添加key的方式进行push：12ssh-agent sh -c 'ssh-add C:/Users/jenkins1/.ssh/id_rsa; git push originjenkins_temp:refs/for/master' verified,code review,submit 通常来讲，Push到git remote的commit都需要通过test build,如果成功，将会由jenkins verified +1。只后再通过其他人code review, 在code review +2后才能submit，也就是真正合并到remote branch上。由于jenkins只更改了relase notes这种非代码文件，我们希望jenkins能够自动将changes合并到remote branch上。这里就需要通过shell操作Gerrit。从Gerrit官方文档上，我们可以找到一些可以通过ssh连接完成的操作，包括verified,code review,submit等等。注意，这里同样需要指定ssh key，否则Permission denied。123ssh -i C:/Users/jenkins1/.ssh/id_rsa -p 29418 jenkins1@sw.tymphany.com gerrit review --verified +1 \"$(git rev-parse --short HEAD)\"ssh -i C:/Users/jenkins1/.ssh/id_rsa -p 29418 jenkins1@sw.tymphany.com gerrit review --code-review +2 \"$(git rev-parse --short HEAD)\"ssh -i C:/Users/jenkins1/.ssh/id_rsa -p 29418 jenkins1@sw.tymphany.com gerrit review -s \"$(git rev-parse --short HEAD)\" 至此，jenkins完成了自动构建。其他可能有用的git command:git 获取当前branch name1git symbolic-ref --short -q HEAD git 获取上一次提交的commit id1234#shortgit rev-parse --short HEAD#longgit rev-parse HEAD","categories":[{"name":"CI","slug":"CI","permalink":"http://lzqblog.top/categories/CI/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://lzqblog.top/tags/shell/"},{"name":"Continuous integration","slug":"Continuous-integration","permalink":"http://lzqblog.top/tags/Continuous-integration/"}]},{"title":"转载：常用的正则表达式","slug":"转载：常用的正则表达式","date":"2018-03-12T00:39:28.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-03-12/转载：常用的正则表达式/","link":"","permalink":"http://lzqblog.top/2018-03-12/转载：常用的正则表达式/","excerpt":"原文地址","text":"原文地址12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667一、校验数字的表达式 1 数字：^[0-9]*$ 2 n位的数字：^\\d&#123;n&#125;$ 3 至少n位的数字：^\\d&#123;n,&#125;$ 4 m-n位的数字：^\\d&#123;m,n&#125;$ 5 零和非零开头的数字：^(0|[1-9][0-9]*)$ 6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$ 7 带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$ 8 正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$ 9 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$10 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$11 非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$12 非零的负整数：^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$13 非负整数：^\\d+$ 或 ^[1-9]\\d*|0$14 非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$15 非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$16 非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$17 正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$18 负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$19 浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$二、校验字符的表达式 1 汉字：^[\\u4e00-\\u9fa5]&#123;0,&#125;$ 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$ 3 长度为3-20的所有字符：^.&#123;3,20&#125;$ 4 由26个英文字母组成的字符串：^[A-Za-z]+$ 5 由26个大写英文字母组成的字符串：^[A-Z]+$ 6 由26个小写英文字母组成的字符串：^[a-z]+$ 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ 8 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;3,20&#125;$ 9 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$10 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$11 可以输入含有^%&amp;',;=?$\\\"等字符：[^%&amp;',;=?$\\x22]+12 禁止输入含有~的字符：[^~\\x22]+三、特殊需求表达式 1 Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$ 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.? 3 InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$ 4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$ 5 电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$ 6 国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125; 7 身份证号(15位、18位数字)：^\\d&#123;15&#125;|\\d&#123;18&#125;$ 8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$ 9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$ 12 日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 15 钱的输入格式：16 1.有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：^[1-9][0-9]*$ 17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 20 5.必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 24 备注：这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$26 中文字符的正则表达式：[\\u4e00-\\u9fa5]27 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))28 空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)29 HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)30 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)31 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)32 中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)33 IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://lzqblog.top/tags/C/"},{"name":"转载","slug":"转载","permalink":"http://lzqblog.top/tags/转载/"}]},{"title":"常用命令行字符串操作指令","slug":"常用命令行字符串操作指令","date":"2018-02-09T07:42:29.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-02-09/常用命令行字符串操作指令/","link":"","permalink":"http://lzqblog.top/2018-02-09/常用命令行字符串操作指令/","excerpt":"不定期更新。。","text":"不定期更新。。 Windows在指定文件中查找字符串：1findstr \"#define BUILD_VERSION\" main.c 将某条指令返回值的第一行存在一个名为temp的变量中：1for /f \"delims=\" %%1 in ('findstr \"#define BUILD_VERSION\" main.c')do set temp=%%1 将temp中”BUILD_VERSION “左侧字符替换为空字符串，然后保留到version中：1set \"version=%temp:*BUILD_VERSION =%\" Linux在指定文件中查找字符串：1grep \"#define BUILD_VERSION\" main.c 将某条指令返回值的第一行存在一个名为temp的变量中：1temp=$(grep \"#define BUILD_VERSION\" main.c) 将temp中”BUILD_VERSION “左侧字符替换为空字符串，然后保留到version中(从左到右非贪婪匹配使用#,从右到左非贪婪匹配使用%)：1version=$&#123;temp#*BUILD_VERSION &#125; 3/19/2018更新：判断字符串变量sw_version的长度：123if [ \"$&#123;#sw_version&#125;\" = \"5\" ]; thenfi 读取文件某一行：1cat url.txt|sed -n '1p'","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"日志","slug":"日志","permalink":"http://lzqblog.top/tags/日志/"}]},{"title":"在Windows下安装gpu版的TensorFlow","slug":"在Windows下安装gpu版的TensorFlow","date":"2018-01-23T09:25:51.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-01-23/在Windows下安装gpu版的TensorFlow/","link":"","permalink":"http://lzqblog.top/2018-01-23/在Windows下安装gpu版的TensorFlow/","excerpt":"使用非gpu版本的TensorFlow进行训练实在是太慢了，于是尝试在Windows下安装gpu版本的TensorFlow，写篇日志记录一下。","text":"使用非gpu版本的TensorFlow进行训练实在是太慢了，于是尝试在Windows下安装gpu版本的TensorFlow，写篇日志记录一下。 工作环境 OS：Win10 Python:3.5(目前TensorFlow仍不支持3.6) 安装CUDA 首先确定想要安装的TensorFlow版本需要哪个版本的CUDA支持。我这里安装的TF版本是1.5.0，需要CUDA 9.0的支持。 下载并安装CUDA 前往developer.nvidia.com下载CUDA 9.0。一直下一步就行。 完成之后验证一下是否已经正确安装，运行cmd：1nvcc -V 如果正确安装，将会显示版本信息：12345C:\\Windows\\system32&gt;nvcc -Vnvcc: NVIDIA (R) Cuda compiler driverCopyright (c) 2005-2017 NVIDIA CorporationBuilt on Fri_Sep__1_21:08:32_Central_Daylight_Time_2017Cuda compilation tools, release 9.0, V9.0.176 安装CUDNN 同样需要确认需要哪个版本的CUDNN。我这里需要CUDNN 9.0。前往developer.nvidia.com下载指定版本，下载完成是一个压缩包，解压到C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0 安装TensorFlow1pip install tensorflow-gpu==1.5.0 此处使用==指定版本。另外可以在pypi.python.org查询到某个包的版本信息。 测试1python 123456import tensorflow as tftf.__version__sess = tf.Session()a = tf.constant(20)b = tf.constant(99)print(sess.run(a + b)) 运行结果：1234567891011121314151617C:\\Windows\\system32&gt;pythonPython 3.5.4 (v3.5.4:3f56838, Aug 8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; tf.__version__'1.5.0'&gt;&gt;&gt; sess = tf.Session()2018-02-05 10:21:19.674014: I C:\\tf_jenkins\\workspace\\rel-win\\M\\windows-gpu\\PY\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX22018-02-05 10:21:20.177086: I C:\\tf_jenkins\\workspace\\rel-win\\M\\windows-gpu\\PY\\35\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:1105] Found device 0 with properties:name: GeForce 940MX major: 5 minor: 0 memoryClockRate(GHz): 1.2415pciBusID: 0000:02:00.0totalMemory: 2.00GiB freeMemory: 1.66GiB2018-02-05 10:21:20.177537: I C:\\tf_jenkins\\workspace\\rel-win\\M\\windows-gpu\\PY\\35\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:1195] Creating TensorFlow device (/device:GPU:0) -&gt; (device: 0, name: GeForce 940MX, pci bus id: 0000:02:00.0, compute capability: 5.0)&gt;&gt;&gt; a = tf.constant(20)&gt;&gt;&gt; b = tf.constant(99)&gt;&gt;&gt; print(sess.run(a + b))119 如何更新1pip install --upgrade tensorflow-gpu","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://lzqblog.top/categories/机器学习/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://lzqblog.top/tags/Machine-Learning/"},{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://lzqblog.top/tags/TensorFlow/"}]},{"title":"使用TensorFlow训练自己的语音识别AI","slug":"使用TensorFlow训练自己的语音识别AI","date":"2018-01-11T06:53:04.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2018-01-11/使用TensorFlow训练自己的语音识别AI/","link":"","permalink":"http://lzqblog.top/2018-01-11/使用TensorFlow训练自己的语音识别AI/","excerpt":"这次来训练一个基于CNN的语音识别模型。训练完成后，我们将尝试将此模型用于Hotword detection。","text":"这次来训练一个基于CNN的语音识别模型。训练完成后，我们将尝试将此模型用于Hotword detection。 人类是怎样听懂一句话的呢？以汉语为例，当听到“wo shi”的录音时，我们会想，有哪两个字是读作“wo shi”的，有人想到的是“我是”，也有人觉得是“我市”。我们可以通过”wo shi”的频率的特征，匹配到一些结果，我们这次要训练的模型，也是基于频率特征的CNN模型。单纯的基于频率特征的识别有很大的局限性，比如前面提到的例子，光是听到“wo shi”可能会导致产生歧义，但是如果能有上下文，我们就可以大大提高“识别”的成功率。因此，类似Google Assistant那样的识别，不光是考虑到字词的发音，还联系了语义，就算有一两个字发音不清，我们还是能得到正确的信息。但是基于频率特征的模型用作Hotword detection还是比较合适的，因为Horword通常是一两个特定的词，不需要联系语境进行语义分析。 准备训练数据集 开源的语言数据集比较少，这里我们使用TensorFlow和AIY团队推出的一个数据集，包含30个基本的英文单词的大量录音：下载地址这个数据集只有1G多，非常小的语音数据集，不过用来实验是完全够的。 运行docker并挂载工作目录新建一个speech_train文件夹，并在其中创建子文件夹dataset,logs,train,它们将用于存放数据集，log和训练文件。解压数据集到dataset，然后运行docker：12docker run -it -v $(pwd)/speech_train:/speech_train \\ gcr.io/tensorflow/tensorflow:latest-devel 使用默认的conv模型开始训练123456cd /tensorflow/python tensorflow/examples/speech_commands/train.py \\--data_dir=/speech_train/dataset/ \\--summaries_dir=/speech_train/logs/ \\--train_dir=/speech_train/train/ \\--wanted_words=one,two,three,four,five,marvin 在这里我们指定希望识别的label: one,two,three,four,five,marvin。数据集的其他部分将被归为unknown 使用TensorBoard使训练可视化我们可以通过分析生成的log使训练过程可视化：1tensorboard --logdir /speech_train/logs 运行指令后，可以通过浏览器访问本地的6006端口进入TensorBoard。下图是使用conv模型完成18000 steps 训练的过程图：训练花了差不多15个小时。 生成pb文件训练完成后，我们需要将其转化为pb文件：1234python tensorflow/examples/speech_commands/freeze.py \\--start_checkpoint=/speech_train/train/conv.ckpt-18000 \\--output_file=/speech_train/conv.pb \\--wanted_words=one,two,three,four,five,marvin 完成后，我们将得到一个名为conv.pb的文件，配合包含可识别label的txt文件就可以直接使用了。 测试使用测试脚本进行测试：1234python tensorflow/examples/speech_commands/label_wav.py \\--graph=/speech_train/conv.pb \\--labels=/speech_train/conv_labels.txt \\--wav=/speech_train/dataset/marvin/0b40aa8e_nohash_0.wav 训练的模型应能正确识别出marvin。 使用准确度较低但是预测更快的low_latency_conv模型 我们可以使用另外一种准确度较低但是预测更快的low_latency_conv模型进行训练：12345678python tensorflow/examples/speech_commands/train.py \\--data_dir=/speech_train/dataset/ \\--summaries_dir=/speech_train/logs/ \\--train_dir=/speech_train/train/ \\--model_architecture=low_latency_conv \\--how_many_training_steps=20000,6000 \\--learning_rate=0.01,0.001 \\--wanted_words=one,two,three,four,marvin,wow 当使用该模型时，可以适当增加training steps和learning rate。在这种情况下，训练的时间大大缩短了：只花了不到3小时. 其他也可以使用gpu版本的tensorflow进行训练，速度可以提升不少哦。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://lzqblog.top/categories/机器学习/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://lzqblog.top/tags/Machine-Learning/"},{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://lzqblog.top/tags/TensorFlow/"}]},{"title":"Docker常用命令","slug":"Docker常用命令","date":"2018-01-09T06:10:14.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2018-01-09/Docker常用命令/","link":"","permalink":"http://lzqblog.top/2018-01-09/Docker常用命令/","excerpt":"Docker常用命令小结","text":"Docker常用命令小结列出所有容器：1docker ps -a 获取容器IP：1docker inspect 2d0142bd65a7 | grep IPAddress 其中 2d0142bd65a7 为容器ID。 删除所有容器：1docker rm $(docker ps -aq) 列出可以装载的镜像：1docker images 导出镜像：1docker save 1865b6805867&gt; image.tar 其中 1865b6805867 为镜像ID。 导入镜像：1docker load &lt; image.tar 为ID为1865b6805867的镜像打上TAG(没错，只需要ID前几位就可以)：1docker tag 1865 gcr.io/tensorflow/tensorflow:latest-devel 从容器复制文件到主机(如果你忘了从主机挂载文件夹)1docker cp containerID:container_path host_path","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"日志","slug":"日志","permalink":"http://lzqblog.top/tags/日志/"}]},{"title":"使用TensorFlow训练自己的图像识别AI","slug":"使用TensorFlow训练自己的图像识别AI","date":"2018-01-03T07:46:10.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2018-01-03/使用TensorFlow训练自己的图像识别AI/","link":"","permalink":"http://lzqblog.top/2018-01-03/使用TensorFlow训练自己的图像识别AI/","excerpt":"摸索了几天，终于用TensorFlow成功训练了一个能够识别三种动漫人物的AI。写篇post记录一下。由于训练是在虚拟机上跑的，没有办法使用显卡，所以这次的训练只用到了CPU。GPU版本的训练下次再写。","text":"摸索了几天，终于用TensorFlow成功训练了一个能够识别三种动漫人物的AI。写篇post记录一下。由于训练是在虚拟机上跑的，没有办法使用显卡，所以这次的训练只用到了CPU。GPU版本的训练下次再写。训练环境： OS: Ubuntu 17.10(VMWare) CPU:i5-6300HQ(开了两个核给虚拟机) RAM:4G(16G只开了4G给虚拟机) 配置开发环境 安装TensorFlow是一件十分麻烦的事情。你需要python(推荐python3以上)及各种扩展模块，bazel等等，这些安装操作会频繁地更改环境变量，稍有不慎就可能导致崩溃，还极难恢复。因此推荐使用Docker来进行环境搭建。 什么是Docker Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。你可以把容器看成一个沙箱。Docker提供了一些已经装完TensorFlow开发所需的各种依赖包的image。我们只需要使用Docker下载这些image，就可以在Docker的容器中进行开发，而不用担心安装各种扩展包导致系统崩溃。更重要的是，你可以基于一个image创建多个互不干扰的容器，我们可以在容器里进行各种变态的实验而不需要反复下载image。(特别是这些image由于某些众所周知的原因在大陆下载极其缓慢甚至不能下载) 如何安装Docker 参考Docker的官方安装指南可以非常轻松地完成Docker安装。 下载集成TensorFlow开发环境的镜像 接下来的步骤需要root权限并需要访问Google服务器。1# docker run -it gcr.io/tensorflow/tensorflow:latest-devel 执行该指令，Docker会自动下载镜像。你也可以选择下载不同版本的镜像：CPU版：gcr.io/tensorflow/tensorflowCPU版带开发环境：gcr.io/tensorflow/tensorflow:latest-develGPU版：gcr.io/tensorflow/tensorflow:latest-gpuGPU版带开发环境：gcr.io/tensorflow/tensorflow:latest-devel-gpu 搭建完成 经过漫长的等待，如果命令行变成root@xxxxxxxxxxxx 说明下载安装完成，用户已经在Docker容器中了(xxxxxxxxx为当前容器ID)。 准备训练样本 机器学习需要大量样本。这里我直接使用了Google图片的搜索结果作为样本，这样的方式方便快捷，但样本质量不一定高。当你尝试在Google图片中搜索“蜡笔小新”，搜索结果很有可能出现一幅没有包含蜡笔小新的图，该图可能只包含有动感超人甚至小白。这些错误的“正样本”会对训练结果产生影响。 分别在Google图片中搜索“Crayon Shin-chan”、“spongebob”、“minions”可以找到大量图片。可以使用Chrome的一个名为“Fatkun Batch Download Image”的扩展程序进行图片批量下载。新建一个cartoon文件夹，将图片分别放在其子文件夹cartoon/crayon cartoon/minions cartoon/spongebob下。每个目录有800~900张图。 开始训练 接下来的步骤需要root权限并需要访问Google服务器。 创建工作目录 新建一个名为tf_files的文件夹，并将cartoon文件夹copy进来。123cd ~mkdir tf_filescp cartoon tf_files 运行容器并挂载工作目录12docker run -it -v $(pwd)/tf_files:/tf_files \\ gcr.io/tensorflow/tensorflow:latest-devel 使用迁移学习进行训练什么是迁移学习 迁移学习(Transfer Learning)试图使用已经训练好的模型参数帮助新模型训练新的数据集。当数个训练任务及数据有一定程度的相关性，使用迁移学习可以加快新模型的学习而不用花费大量时间和样本从头开始训练。我们的任务是一个图像识别任务，这与Google训练好的Inception模型有较大的相关性，而我们的样本又较少，因此基于Inception模型进行迁移学习是个不错的选择。 什么是Inception模型 Inception模型是一种用于图像分类的卷积神经网络模型。这是一个多层、有着极其复杂结构的卷积神经网络。该模型可以识别超过1000种物品，但并不包括我们想要的动漫人物。Github上有提到Inception模型训练是在一台有128GB RAM和8块Tesla K40的电脑上进行的(We targeted a desktop with 128GB of CPU ram connected to 8 NVIDIA Tesla K40 GPU)。如果你想在你的个人电脑上尝试从零开始训练一个这种量级的神经网络，你可能需要数个星期才能完成训练，还有很大的可能性出现run out of GPU memory或run out of CPU memory导致训练失败。在这里我们将尝试使用Tensorflow提供的retrain.py训练整个神经网络的最后一层，即决策层/分类层，而倒数第二层被称为Bottlenecks(瓶颈层)。我们将利用Bottlenecks产生的有效数据，供给最后的决策层/分类层做出最后的分类预测。 开始训练12345678cd /tensorflow/python tensorflow/tensorflow/examples/image_retraining/retrain.py \\ --bottleneck_dir=/tf_files/bottlenecks \\ --how_many_training_steps 4000 \\ --model_dir=/tf_files/inception \\ --output_graph=/tf_files/cartoon.pb \\ --output_labels=/tf_files/cartoon.txt \\ --image_dir /tf_files/cartoon 在这里我们设置了bottleneck的输出目录，training_steps，模型位置，pb文件及label输出位置，样本图片位置。一般而言training_steps越多，训练时间越长，效果越好，反之则反。如果模型位置没有需要的模型，该脚本会尝试自动下载。pb文件就是训练完成的模型，label是一个txt文件，里面包含了我们训练完成的模型能识别的对象名称。不出意外的话，几十分钟后训练就可以完成。 可以看到我们的模型的测试识别准确率达到了95.5%。 tf_files下生成了我们训练的模型cartoon.pb以及label文件cartoon.txt。打开cartoon.txt可以看到，该模型可以识别的对象有crayon(蜡笔小新)、minions(小黄人)、spongebob(海绵宝宝)三种(就是cartoon文件夹下子文件夹的名字)。我这里生成的pb文件有87.4MB。 优化与压缩为什么要进行优化和压缩 对于移动设备(例如智能手机)和嵌入式设备(例如跑Android Things或Linux的设备)来说，这个模型文件太大了。如果你尝试把其打包为apk文件，你可能会得到一个将近100MB的apk，这对用户来说可能体验并不太友好。因此我们需要对该模型进行优化和压缩以减小其体积。如果你尝试直接将该pb文件压缩为zip文件，你会发现压缩文件大小只比原来小了几MB。我尝试使用优化脚本对pb文件进行优化，优化后的压缩效果还不错。 使用optimize_for_inference优化工具 optimize_for_inference脚本将会帮助我们删除当前模型中输入输出之前不需要的节点，并进行一些其他优化以提高运行性能。12345python tensorflow/python/tools/optimize_for_inference.py \\ --input=/tf_files/cartoon.pb \\ --output=/tf_files/optimized_cartoon.pb \\ --input_names=\"Mul\" \\ --output_names=\"final_result\" 优化完成后我们可以得到一个名为optimized_cartoon.pb的优化过的模型文件。但是只比原来小了0.2MB。压缩为zip文件也小不了多少:( 使用quantize_graph工具进行进一步优化 看来是时候放大招了。我们将使用quantize_graph对模型文件中的权重参数进行四舍五入。这一方式将会降低预测准确率(但是通常只降低1%左右)。12345python tensorflow/tools/quantization/quantize_graph.py \\ --input=/tf_files/optimized_cartoon.pb \\ --output=/tf_files/rounded_cartoon.pb \\ --output_node_names=\"final_result\" \\ --mode=weights_rounded 通常来说，新生成的rounded_cartoon.pb大小并不会发生太大变化，但是当我尝试将其压缩为zip文件时，我得到了一个令人满意的压缩包大小：23.9MB 现在如果我们尝试将其作为资源文件打包进apk，可以得到一个小得多的安装包，用户下载的时间大大减少了。 测试与验证 首先我们将测试经过optimize_for_inference优化的optimized_cartoon.pb。为了方便测试，我使用了TensorFlow在Android上的demo app，你可以在Github上找到其源码。要让我们的模型文件能够在这个demo上正常工作，我们需要做一点微小的工作。1.复制optimized_cartoon.pb及cartoon.txt文件至app/src/main/assets2.在ClassifierActivity.java中修改如下部分：123456789private static final int INPUT_SIZE = 299;private static final int IMAGE_MEAN = 128;private static final float IMAGE_STD = 128;private static final String INPUT_NAME = \"Mul\";private static final String OUTPUT_NAME = \"final_result\";private static final String MODEL_FILE = \"file:///android_asset/optimized_cartoon.pb\";private static final String LABEL_FILE = \"file:///android_asset/cartoon.txt\"; 这里我们限制输入图像为299x299, 并更改INPUT_NAME和OUTPUT_NAME。当然还有MODEL_FILE和LABEL_FILE的位置。测试样例我直接用手机拍的，由于限制了输入图像大小为299x299，所以图片质量比较差，但是还是得到了不错的运行结果：再看看经过quantize_graph优化的： 下一步 接下来我们可以尝试进行音频方向的机器学习探索。目前还在研究中，等有了有趣的发现后再写篇post吧。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://lzqblog.top/categories/机器学习/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://lzqblog.top/tags/Machine-Learning/"},{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://lzqblog.top/tags/TensorFlow/"}]},{"title":"使用Gparted扩展分区","slug":"使用Gparted扩展分区","date":"2018-01-03T01:21:09.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2018-01-03/使用Gparted扩展分区/","link":"","permalink":"http://lzqblog.top/2018-01-03/使用Gparted扩展分区/","excerpt":"前段时间跑机器学习，使用docker下了几个tensorflow的镜像，突然发现磁盘不够用了。相关的命令行不太熟，就想找找是不是有类似于分区精灵的带GUI的分区工具，还真找到一个Gparted。","text":"前段时间跑机器学习，使用docker下了几个tensorflow的镜像，突然发现磁盘不够用了。相关的命令行不太熟，就想找找是不是有类似于分区精灵的带GUI的分区工具，还真找到一个Gparted。 首先安装Gparted，然后运行：12# apt-get install gparted# gparted 如果是Ubuntu 17.10或以上版本，可能会报错：123456789101112131415161718# gpartedCreated symlink /run/systemd/system/-.mount → /dev/null.Created symlink /run/systemd/system/run-user-1000.mount → /dev/null.Created symlink /run/systemd/system/run-user-121.mount → /dev/null.Created symlink /run/systemd/system/run-vmblock\\x2dfuse.mount → /dev/null.Created symlink /run/systemd/system/tmp.mount → /dev/null.Created symlink /run/systemd/system/var-lib-docker-overlay2.mount → /dev/null.Created symlink /run/systemd/system/var-lib-docker-plugins.mount → /dev/null.No protocol specified(gpartedbin:3041): Gtk-WARNING **: cannot open display: :0Removed /run/systemd/system/-.mount.Removed /run/systemd/system/run-user-1000.mount.Removed /run/systemd/system/run-user-121.mount.Removed /run/systemd/system/run-vmblock\\x2dfuse.mount.Removed /run/systemd/system/tmp.mount.Removed /run/systemd/system/var-lib-docker-overlay2.mount.Removed /run/systemd/system/var-lib-docker-plugins.mount. google了一下，原因是应用没有完全支持Wayland。但是有workaround:1$ xhost +SI:localuser:root 之后就可以正常运行了。首先将当前分区扩容。之后添加一个扩展分区，再在扩展分区下添加linux-swap。最后别忘了应用修改。","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"在树莓派上使用Google Assistant","slug":"在树莓派上使用Google-Assistant","date":"2017-12-28T08:21:13.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-12-28/在树莓派上使用Google-Assistant/","link":"","permalink":"http://lzqblog.top/2017-12-28/在树莓派上使用Google-Assistant/","excerpt":"前段时间尝试在树莓派上使用Google Assistant, 系统能够捕捉音频并识别，使用USB声卡也能正常工作，但使用3.5mm jack时没有音频输出。经过摸索终于有输出了！写篇post记录一下关键步骤吧！","text":"前段时间尝试在树莓派上使用Google Assistant, 系统能够捕捉音频并识别，使用USB声卡也能正常工作，但使用3.5mm jack时没有音频输出。经过摸索终于有输出了！写篇post记录一下关键步骤吧！ 首先配置输入输出设备：12audioInputDevice = findAudioDevice(AudioManager.GET_DEVICES_INPUTS, AudioDeviceInfo.TYPE_USB_DEVICE);audioOutputDevice = findAudioDevice(AudioManager.GET_DEVICES_OUTPUTS, AudioDeviceInfo.TYPE_BUILTIN_SPEAKER); 此处TYPE_BUILTIN_SPEAKER即为3.5mm输出口。之前尝试TYPE_AUX_LINE、TYPE_LINE_ANALOG、TYPE_WIRED_HEADPHONES等全都不能发现设备返回null; 然后生成凭据：123456try &#123; userCredentials = EmbeddedAssistant.generateCredentials(this, R.raw.credentials);&#125; catch (IOException | JSONException e) &#123; Log.e(TAG, \"error getting user credentials\", e);&#125; 最后使用mEmbeddedAssistant = new EmbeddedAssistant.Builder(), 绑定完RequestCallback、ConversationCallback、凭据、初始音量、采样率、输入输出设备就可以啦！ 现在的sample还有点蠢，不能使用HotWord唤醒。而且在没有前置语言处理模块的情况下，识别稍微有点慢。","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://lzqblog.top/tags/Java/"},{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"http://lzqblog.top/tags/Raspberry-Pi/"},{"name":"Android Things","slug":"Android-Things","permalink":"http://lzqblog.top/tags/Android-Things/"}]},{"title":"在Android Things上使用TTS及使用Google Assistant遇到的问题","slug":"在Android-Things上使用TTS及使用Google-Assistant遇到的问题","date":"2017-12-06T08:37:03.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2017-12-06/在Android-Things上使用TTS及使用Google-Assistant遇到的问题/","link":"","permalink":"http://lzqblog.top/2017-12-06/在Android-Things上使用TTS及使用Google-Assistant遇到的问题/","excerpt":"智能音响有两个重要功能:“说”和“听”。在Android Things上我们可以通过TextToSpeech和Google Assistant来实现上述功能。TTS的实现比较容易，而Google Assistant就比较麻烦了，目前我遇到的问题是Google Assistant能听懂我说什么，却不能给出答案。。还是写个日志记录一下吧。","text":"智能音响有两个重要功能:“说”和“听”。在Android Things上我们可以通过TextToSpeech和Google Assistant来实现上述功能。TTS的实现比较容易，而Google Assistant就比较麻烦了，目前我遇到的问题是Google Assistant能听懂我说什么，却不能给出答案。。还是写个日志记录一下吧。 TTS的实现 TTS实现起来十分容易，创建TextToSpeech并重写OnInitListener的onInit方法：1234567891011ttsEngine = new TextToSpeech(MainActivity.this, new TextToSpeech.OnInitListener() &#123; @Override public void onInit(int status) &#123; if (status==TextToSpeech.SUCCESS)&#123; ttsEngine.setLanguage(Locale.US); &#125;else &#123; Log.w(TAG,\"Can not init tts engine\"); ttsEngine = null; &#125; &#125;&#125;); 再通过123if (ttsEngine != null) &#123; ttsEngine.speak(\"Hi master. What can I do for you?\", TextToSpeech.QUEUE_ADD, null, \"UTTERANCE_ID\");&#125; 即可实现音频输出。完整的代码已上传到github：Roach Google Assistant 要使用Google Assistant，必须要使用Google Assistant API并创建相应的加密凭据。同时，申请的Google账号还要给予app权限以允许访问一些敏感内容。先贴张测试结果图：在测试中，app似乎成功上传了录音并能正确识别，但是却不能根据问题进行正确的解答，初步怀疑可能还有一些权限没有申请。","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://lzqblog.top/tags/Java/"},{"name":"Android Things","slug":"Android-Things","permalink":"http://lzqblog.top/tags/Android-Things/"}]},{"title":"使用@IntDef替代Enum","slug":"使用-IntDef替代Enum","date":"2017-11-27T03:38:18.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-11-27/使用-IntDef替代Enum/","link":"","permalink":"http://lzqblog.top/2017-11-27/使用-IntDef替代Enum/","excerpt":"有篇Android官方文档提到：”For example, enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.” 于是我们使用自定义annotation来代替Enum。","text":"有篇Android官方文档提到：”For example, enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.” 于是我们使用自定义annotation来代替Enum。123456789101112@Retention(RetentionPolicy.SOURCE)@IntDef(&#123;RATE_120HZ, RATE_64HZ, RATE_32HZ, RATE_16HZ, RATE_8HZ, RATE_4HZ, RATE_2HZ, RATE_1HZ&#125;)public @interface SamplingRate &#123;&#125;public static final int RATE_120HZ = 0b0000;public static final int RATE_64HZ = 0b0001;public static final int RATE_32HZ = 0b0010;public static final int RATE_16HZ = 0b0011;public static final int RATE_8HZ = 0b0100;public static final int RATE_4HZ = 0b0101;public static final int RATE_2HZ = 0b0110;public static final int RATE_1HZ = 0b0111; @Retention 表示在什么级别保存该注解信息。可选的 RetentionPolicy 参数包括： RetentionPolicy.SOURCE 注解将被编译器丢弃 RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃 RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。@IntDef内输入原来的枚举变量，最后使用@interface声明注解名称。当需要使用时：1@SamplingRate int rate = RATE_64HZ; 真是不方便啊。。。","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://lzqblog.top/tags/Android/"},{"name":"Java","slug":"Java","permalink":"http://lzqblog.top/tags/Java/"}]},{"title":"在Android Things上使用远程屏幕","slug":"在Android-Things上使用远程屏幕","date":"2017-11-25T02:26:05.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2017-11-25/在Android-Things上使用远程屏幕/","link":"","permalink":"http://lzqblog.top/2017-11-25/在Android-Things上使用远程屏幕/","excerpt":"当完成连接的配置后，我们可以通过Vysor在远程屏幕上显示和控制Things Device。","text":"当完成连接的配置后，我们可以通过Vysor在远程屏幕上显示和控制Things Device。 1.Vysor是一款基于Chrome的扩展程序，下载后在Chorme中启用。 2.使用adb连接到Things 3.启动Vysor并连接，第一次使用需要在Things上安装apk。 4.Enjoy(还可以截图和录像哦！)","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Android Things","slug":"Android-Things","permalink":"http://lzqblog.top/tags/Android-Things/"}]},{"title":"在Raspberry Pi上初试Android Things","slug":"在Raspberry-Pi上初试Android-Things","date":"2017-11-24T05:48:14.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2017-11-24/在Raspberry-Pi上初试Android-Things/","link":"","permalink":"http://lzqblog.top/2017-11-24/在Raspberry-Pi上初试Android-Things/","excerpt":"Google推出Android Things都快一年了，现在还在preview阶段，而且现在支持的平台也很少，但是这些都无法阻挡我们试水的热情…","text":"Google推出Android Things都快一年了，现在还在preview阶段，而且现在支持的平台也很少，但是这些都无法阻挡我们试水的热情… 准备工作 1.Raspberry Pi 3 2.HDMI cable and monitor(据说有类似于VNC的工具，但是显示分辨率有问题) 3.Ethernet cable(第一次连接需要) 4.Micro SD card 生成IMAGE 首先在Android Things Console上生成Image。新建一个product,输入Product name,选择SOM Type。之后可以添加Bundle自定义开机动画等设置，也可以直接使用Empty bundle。之后选择一个Android Things versions, Create build configuration后，可以进行在线的build和Image生成(之前据说最开始本地build用服务器级的至强cpu都要build 5个小时)，下载生成的zip file。 烧录Image 解压下载的zip file，解压得到使用烧录工具(比如Etcher)将iot_rpi3.img烧录至SD card。 启动并连接设备 接好HDMI和Ethernet，插入SD card就可以开机了！ 接下来我们测试一下Ethernet的连接性。如果连接正常，屏幕上是会显示当前的ip地址的。使用adb尝试连接一下：1adb connect 192.168.1.66 当你看见如下内容，表明adb连接成功：1connected to 192.168.1.66:5555 在连接上adb后，我们可以设置通过wifi连接以摆脱网线的束缚123456adb shellam startservice \\ -n com.google.wifisetup/.WifiSetupService \\ -a WifiSetupService.Connect \\ -e ssid network_ssid \\ -e passphrase network_pass \\ 其中network_ssid尝试连接的wifi ssid，network_pass为密码（开放网络中该参数可以不填）。然后我们需要验证一下无线连接1logcat -d | grep Wifi 当看见WifiWatcher: Network state changed to CONNECTED时，表明连接成功。这时可以尝试断开adb,拔掉网线,使用adb连接无线ip,连接成功后可以ping一下百度：1ping baidu.com 如果想清除所有保存的wifi连接设置：123am startservice \\ -n com.google.wifisetup/.WifiSetupService \\ -a WifiSetupService.Reset UI DEMO 这里以官方的UI DEMO(om.example.androidthings.simpleui)为例，跑个带UI的app试一下。 程序结构 Things工程的结构和普通Android app结构很相似，Things的更加简单。还是熟悉的AndroidManifest.xml + java + res。 在Manifest中声明主题、入口Activity、权限等，在layout中，Android基本的控件都有。。。总而言之，和普通Android开发相似度极高，以致于我都不想写下去了。。。 代码 贴段几段代码，分析下值得注意的地方。首先import了几个在Android开发中没见过的包：12import com.google.android.things.pio.Gpio;import com.google.android.things.pio.PeripheralManagerService; 非常明显的things包，提供了gpio类，以及一个很重要的PeripheralManagerService. 我们通过PeripheralManager来操作外设。树莓派3的gpio name可以通过getGpioList获得，要对某个gpio进行控制，需要先openGpio(init)，然后可以通过setDirection设置io方向及初始电平，setEdgeTriggerType设置边缘触发模式(中断)，setActiveType设置高电平为true还是低电平为true，setValue来更改电平。当setActiveType(Gpio.ACTIVE_LOW)时，setValue(true)会输出低电平，反之亦然。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class SimpleUiActivity extends Activity &#123; private static final String TAG = SimpleUiActivity.class.getSimpleName(); private Map&lt;String, Gpio&gt; mGpioMap = new LinkedHashMap&lt;&gt;(); @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); LinearLayout gpioPinsView = (LinearLayout) findViewById(R.id.gpio_pins); LayoutInflater inflater = getLayoutInflater(); PeripheralManagerService pioService = new PeripheralManagerService(); for (String name : pioService.getGpioList()) &#123; View child = inflater.inflate(R.layout.list_item_gpio, gpioPinsView, false); Switch button = (Switch) child.findViewById(R.id.gpio_switch); button.setText(name); gpioPinsView.addView(button); Log.d(TAG, \"Added button for GPIO: \" + name); try &#123; final Gpio ledPin = pioService.openGpio(name); ledPin.setEdgeTriggerType(Gpio.EDGE_NONE); ledPin.setActiveType(Gpio.ACTIVE_HIGH); ledPin.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW); button.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() &#123; @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) &#123; try &#123; ledPin.setValue(isChecked); &#125; catch (IOException e) &#123; Log.e(TAG, \"error toggling gpio:\", e); buttonView.setOnCheckedChangeListener(null); // reset button to previous state. buttonView.setChecked(!isChecked); buttonView.setOnCheckedChangeListener(this); &#125; &#125; &#125;); mGpioMap.put(name, ledPin); &#125; catch (IOException e) &#123; Log.e(TAG, \"Error initializing GPIO: \" + name, e); // disable button button.setEnabled(false); &#125; &#125; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); for (Map.Entry&lt;String, Gpio&gt; entry : mGpioMap.entrySet()) &#123; try &#123; entry.getValue().close(); &#125; catch (IOException e) &#123; Log.e(TAG, \"Error closing GPIO \" + entry.getKey(), e); &#125; &#125; mGpioMap.clear(); &#125;&#125; 运行结果","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://lzqblog.top/tags/Java/"},{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"http://lzqblog.top/tags/Raspberry-Pi/"},{"name":"Android Things","slug":"Android-Things","permalink":"http://lzqblog.top/tags/Android-Things/"}]},{"title":"C# 生成Log文件","slug":"CSharp-生成Log文件","date":"2017-11-16T05:05:43.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-11-16/CSharp-生成Log文件/","link":"","permalink":"http://lzqblog.top/2017-11-16/CSharp-生成Log文件/","excerpt":"写了个Log类实现带时间戳的Log out, 代码如下：","text":"写了个Log类实现带时间戳的Log out, 代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768namespace My_Space&#123; using System; using System.IO; class Log &#123; private string logFile; private StreamWriter writer; private FileStream fileStream = null; public Log(string fileName) &#123; logFile = fileName; CreateDirectory(logFile); &#125; public void LogOut(string info) &#123; try &#123; FileInfo fileInfo = new FileInfo(logFile); if (!fileInfo.Exists) &#123; fileStream = fileInfo.Create(); writer = new StreamWriter(fileStream); &#125; else &#123; fileStream = fileInfo.Open(FileMode.Append, FileAccess.Write); writer = new StreamWriter(fileStream); &#125; writer.WriteLine(\"@\" + DateTime.Now + \"#\" + info + \";\"); &#125; finally &#123; if (writer != null) &#123; writer.Close(); writer.Dispose(); fileStream.Close(); fileStream.Dispose(); &#125; &#125; &#125; private void CreateDirectory(string filePath) &#123; DirectoryInfo directoryInfo = Directory.GetParent(filePath); if (!directoryInfo.Exists) &#123; directoryInfo.Create(); &#125; &#125; public static void ReadLog(string logPath, out string dataRead) &#123; StreamReader sR1 = new StreamReader(logPath); try &#123; dataRead = sR1.ReadToEnd(); &#125; catch (Exception) &#123; throw; &#125; &#125; &#125;&#125;","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://lzqblog.top/tags/C/"}]},{"title":"使用qemu运行Linux-kernel","slug":"使用qemu运行Linux-kernel","date":"2017-11-12T00:40:54.000Z","updated":"2018-11-28T12:01:18.000Z","comments":true,"path":"2017-11-12/使用qemu运行Linux-kernel/","link":"","permalink":"http://lzqblog.top/2017-11-12/使用qemu运行Linux-kernel/","excerpt":"之前想买块MTK的开发板，结果根本没有卖。。。 树莓派今年又不会出4，于是想用qemu边学边玩。","text":"之前想买块MTK的开发板，结果根本没有卖。。。 树莓派今年又不会出4，于是想用qemu边学边玩。宿主OS：Ubuntu 17.04 准备工作由于某些众所周知的原因，访问一些国外的服务器非常慢，因此推荐使用国内的镜像，我这里用的是阿里的：换完更新源后，个人习惯装一个vim：1sudo apt-get install vim 安装arm交叉编译链1sudo apt-get install gcc-arm-linux-gnueabi 也可以装一个arm-linux-gnueabihf，如果硬件带fpu，可以使用该工具。 安装qemu1sudo apt-get install qemu 下载Linux kernal并编译从kernel.org下载源码包。下载完成后解包到任意目录。cd过去后，使用vim新建一个build脚本build.sh,内容如下：12345678910export ARCH=arm export CROSS_COMPILE=arm-linux-gnueabi- make vexpress_defconfigmake zImage -j8make modules -j8make dtbsmkdir extra_foldercp arch/arm/boot/zImage extra_folder/cp arch/arm/boot/dts/*ca9.dtb extra_folder/cp .config extra_folder/ 运行脚本会使用arm-linux-gnueabi进行编译，并把生成的zImage和dtb文件copy到extra_folder（不然的话每次都手动copy好累。。） 下载busyboxbusybox能够提供一些基本的指令，如umount,sh,vi等等。在busybox.net下载源代码包，当然使用wget或者git clone也是可以的。解包后，cd到代码目录，再写一个build.sh：123make defconfigmake CROSS_COMPILE=arm-linux-gnueabi-make install CROSS_COMPILE=arm-linux-gnueabi- 运行脚本将在该目录下生成一个_install文件夹。 制作根文件系统和镜像创建rootfs12sudo mkdir rootfssudo mkdir rootfs/lib 复制busybox命令1sudo cp _install/* -r rootfs/ 复制运行库1sudo cp -P /usr/arm-linux-gnueabi/lib/* rootfs/lib/ 创建字符设备用于测试12345sudo mkdir -p rootfs/devsudo mknod rootfs/dev/tty1 c 4 1sudo mknod rootfs/dev/tty2 c 4 2sudo mknod rootfs/dev/tty2 c 4 3sudo mknod rootfs/dev/tty2 c 4 4 c：字符型4：主设备号1，2：次设备号 生成镜像并格式化生成ext3文件系统12dd if=/dev/zero of=a9rootfs.ext3 bs=1M count=32mkfs.ext3 a9rootfs.ext3 复制文件到镜像中1234sudo mkdir tmpfssudo mount -t ext3 a9rootfs.ext3 tmpfs/ -o loopsudo cp -r rootfs/* tmpfs/sudo umount tmpfs 启动qemu并运行系统写一个runOS.sh并运行：1qemu-system-arm -M vexpress-a9 -m 256M -dtb extra_folder/vexpress-v2p-ca9.dtb -kernel extra_folder/zImage -append \"root=/dev/mmcblk0 rw\" -sd a9rootfs.ext3 然后熟悉的企鹅出现了!拷个hello world试一下:","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://lzqblog.top/tags/Linux/"}]},{"title":"Android添加App载入界面","slug":"Android添加App载入界面","date":"2017-11-09T06:16:42.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-11-09/Android添加App载入界面/","link":"","permalink":"http://lzqblog.top/2017-11-09/Android添加App载入界面/","excerpt":"当App启动载入时间较长时，我们希望有一个载入界面过渡，当载入完成后再切换到MainActivity。这个载入界面我们称之为SplashActivity。","text":"当App启动载入时间较长时，我们希望有一个载入界面过渡，当载入完成后再切换到MainActivity。这个载入界面我们称之为SplashActivity。首先写一个继承AppCompatActivity的SplashActivity：1234public class SplashActivity extends AppCompatActivity&#123; final int SplashTime = 3200;// 期望的Splash时间 WebView wbGif;// 在这里我使用Webview来加载一个GIF动画&#125; 然后Override onCreate方法：1234567protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_splash); wbGif = (WebView) findViewById(R.id.webViewGif);// 在这里我使用Webview来加载一个GIF动画 wbGif.setBackgroundColor(Color.parseColor(\"#6a0606\")); wbGif.loadUrl(\"file:///android_res/drawable/loading.gif\"); &#125; 在该onCreate方法中创建一个新的Handler对象，它将在SplashTime结束后切换到MainActivity：12345678new android.os.Handler().postDelayed(new Runnable() &#123; @Override public void run() &#123; Intent main = new Intent(SplashActivity.this, MainActivity.class); SplashActivity.this.startActivity(main); SplashActivity.this.finish(); &#125;&#125;, SplashTime); 最后别忘了在AndroidManifest.xml中将入口Activity设置为SplashActivity：123456789&lt;activity android:name=\".SplashActivity\" android:screenOrientation=\"portrait\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\" /&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt; &lt;/intent-filter&gt;&lt;/activity&gt;","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://lzqblog.top/tags/Android/"},{"name":"Java","slug":"Java","permalink":"http://lzqblog.top/tags/Java/"}]},{"title":"C#自定义Excel导出类","slug":"CSharp自定义Excel导出类","date":"2017-11-08T01:20:36.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-11-08/CSharp自定义Excel导出类/","link":"","permalink":"http://lzqblog.top/2017-11-08/CSharp自定义Excel导出类/","excerpt":"前段时间写了个debug tool用来自动抓测试数据，该工具需要通过爬取Log数据自动生成带Chart的Excel，但是原生的COM组件非常不好用，于是我重新封装了一个。","text":"前段时间写了个debug tool用来自动抓测试数据，该工具需要通过爬取Log数据自动生成带Chart的Excel，但是原生的COM组件非常不好用，于是我重新封装了一个。Reference: Microsoft Excel 15.0 Object Library(COM组件)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106using Microsoft.Office.Interop.Excel;using System;using System.Reflection;namespace My_Space&#123; class ExportExcel &#123; private string xlsOutPath; private string xlsInPath; private Application xlsApp; private Workbook xlsWorkBook; private Worksheet xlsWorkSheet; private object misValue = Missing.Value; public ExportExcel(string excelOutPath) &#123; xlsOutPath = excelOutPath; xlsInPath = null; xlsApp = new Application(); if (xlsApp == null) &#123; throw new Exception(\"Please Install Excel 2013 or Newer Verison\"); &#125; XlsWorkBook = xlsApp.Workbooks.Add(misValue); xlsWorkSheet = XlsWorkBook.Worksheets.get_Item(1); &#125; public ExportExcel(string excelInPath, string excelOutPath) &#123; xlsInPath = excelInPath; xlsOutPath = excelOutPath; xlsApp = new Application(); if (xlsApp == null) &#123; throw new Exception(\"Please Install Excel 2013 or Newer Verison\"); &#125; XlsWorkBook = xlsApp.Workbooks.Add(xlsInPath); xlsWorkSheet = XlsWorkBook.Worksheets.get_Item(xlsWorkBook.Worksheets.Count); &#125; public Worksheet XlsWorkSheet &#123; get =&gt; xlsWorkSheet; set =&gt; xlsWorkSheet = value; &#125; public Workbook XlsWorkBook &#123; get =&gt; xlsWorkBook; set =&gt; xlsWorkBook = value; &#125; public void AddChart(Worksheet worksheet, double left, double top, double weight, double height, string dataStart, string dataEnd) &#123; ChartObjects xlsCharts = worksheet.ChartObjects(Type.Missing); ChartObject myChart = xlsCharts.Add(left, top, weight, height); Range chartRange = worksheet.get_Range(dataStart, dataEnd); myChart.Chart.SetSourceData(chartRange, misValue); myChart.Chart.ChartType = XlChartType.xlXYScatterSmooth; myChart.Chart.ChartStyle = 245; &#125; public void AddSheet(string name) &#123; bool exist = false;int i; for (i = 1; i &lt;= XlsWorkBook.Sheets.Count; i++) &#123; if (XlsWorkBook.Sheets[i].Name == name) &#123; exist = true; break; &#125; &#125; if (!exist) &#123; xlsWorkSheet = XlsWorkBook.Sheets.Add(misValue, xlsWorkSheet, misValue, misValue); xlsWorkSheet.Name = name; &#125; else &#123; xlsWorkSheet = XlsWorkBook.Sheets[i]; &#125; &#125; public void CopySheet(Worksheet src,Worksheet dst) &#123; src.Cells.Copy(Type.Missing); try &#123; dst.Paste(Type.Missing, Type.Missing); &#125; catch (Exception) &#123; throw; &#125; &#125; public void AddHyperLink(string cellName, string link) &#123; Range range = xlsWorkSheet.get_Range(cellName,Type.Missing); xlsWorkSheet.Hyperlinks.Add(range, link); &#125; public void SaveExcel(bool flag) &#123; if (flag) &#123; xlsWorkBook.Close(true, xlsOutPath, misValue); &#125; System.Runtime.InteropServices.Marshal.ReleaseComObject(xlsWorkSheet); System.Runtime.InteropServices.Marshal.ReleaseComObject(xlsWorkBook); System.Runtime.InteropServices.Marshal.ReleaseComObject(xlsApp); xlsWorkSheet = null; xlsWorkBook = null; xlsApp = null; GC.Collect(); &#125; &#125;&#125;","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://lzqblog.top/tags/C/"}]},{"title":"关闭程序窗口后仍有线程残留的解决办法","slug":"关闭程序窗口后仍有线程残留的解决办法","date":"2017-11-07T01:50:43.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-11-07/关闭程序窗口后仍有线程残留的解决办法/","link":"","permalink":"http://lzqblog.top/2017-11-07/关闭程序窗口后仍有线程残留的解决办法/","excerpt":"我原来一直喜欢用backgroundworker搞多线程，反而是Thread类使用较少。最近更新debug tool的时候使用了一些同事的代码，遇到了线程泄漏的问题。","text":"我原来一直喜欢用backgroundworker搞多线程，反而是Thread类使用较少。最近更新debug tool的时候使用了一些同事的代码，遇到了线程泄漏的问题。同事的代码中使用了Thread类而且内部是一个while(true)的死循环。这导致除了thread.Abort()外似乎没有其他终止线程的方法。。。但是thread.Abort()不一定能够直接杀死线程，在某些情况下，即使在formclosing中调用了thread.Abort()，关闭程序窗口后仍然有线程残留。如果不想修改原来的thread方法，可以通过1Application.Exit(); 来退出应用程序。但是此方法并不会对后台线程和资源进行强制回收。于是用了下面这种更粗暴的方法：1Environment.Exit(0); 问题解决。不过这次的经历再次提醒了我，最好别在Thread中写while(true)，也不要使用thread.Abort()这种不安全的方法。如果实在担心出现野线程，还是使用backgroundworker吧。","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://lzqblog.top/tags/C/"},{"name":"多线程","slug":"多线程","permalink":"http://lzqblog.top/tags/多线程/"}]},{"title":"项目总结（一）：平衡车的设计概述","slug":"项目总结（一）：平衡车的设计概述","date":"2017-11-05T00:43:47.000Z","updated":"2018-11-29T02:18:03.000Z","comments":true,"path":"2017-11-05/项目总结（一）：平衡车的设计概述/","link":"","permalink":"http://lzqblog.top/2017-11-05/项目总结（一）：平衡车的设计概述/","excerpt":"写篇post总结一下当年做平衡车的一些经验。这篇post是概述性质的，详细的软硬件设计以后有时间再写吧。","text":"写篇post总结一下当年做平衡车的一些经验。这篇post是概述性质的，详细的软硬件设计以后有时间再写吧。 写在前面其实大二大三的时候都有参加智能车竞赛(原来叫飞思卡尔智能车竞赛，简称飞赛，后来飞思卡尔被nxp收购，改名恩智浦智能车竞赛..)，但是学院有个政策，不允许同一年既参加电子设计竞赛（简称电赛）又参加飞赛，理由是要让更多的同学有机会参加到比赛中（至少老师是这么告诉我们的），于是大二那一年做智能车做到一半就弃权参加电赛去了。不过后来我和我的小伙伴们发现，居然有些同学两个比赛都参加了，这TM就很尴尬了。。 硬件基本架构概括来讲，需要关心的是三个部份: 1.电源首先稳压电路是一定会有的，我们选用了LM1117，外围电路简单，使用十分方便，可替代的LDO也不少。另外如果使用MOS管自己搭H桥，就需要boost电路了。 2.主控部分这个部分包括MCU最小系统以及各种传感器。对于平衡车而言，陀螺仪、角度传感器和编码器、图像传感器都算是核心传感器，一个用于获取角加速度，一个获取当前角度，一个获取电机转速，最后一个当然是识别赛道啦。除此之外，我们还使用了蓝牙模块，自己写了个上位机，无线调车、实时图传简直不能再爽。 3.驱动桥（H桥）平衡车是有两个电机的，而且两个电机都要求能够正反转，因此需要两个全桥，需要4片BTS7970或者8片mos。大二图方便，使用的是BTS7970，淘宝上一片二三十。。。大三总裁用mos管搭了一个，效果差不多，成本却低了不少。后来我毕设要用到电机控制又自己画了一块，虽然只是双面板并且为了过大电流大面积开窗，但是花点时间优化layout还是可以把板子做得很小。大三的电路图由于硬盘挂了找不到了:( 贴个毕设搭的MOSH Layout图： 设计文件挺早的时候就上传了：Coding Spirit:MOS_H MCU选型大二用的是coldfire，大三用的是K60。Coldfire是freescale自己的架构，当时我们用的mcf52255, 最高80MHz，K60是Cortex-M4，最高100MHz，另外带FPU。就我的个人感觉来说，K60的综合性能是要好于mcf52255的。另外coldfire资料不如k60多，这点对于初学者来说比较关键，因为从准备到参赛只有几个月的时间，从头开始学一款没接触过的架构的MCU会花掉大量时间。但是Coldfire配合Codewarrior有种STM32CUBEMX的感觉，代码生成感觉还不错。 软件基本架构首先贴个代码：Coding Spirit:Balance_Car 是否跑RTOS裸奔和RTOS其实都能做，但由于PID控制的周期性，使用定时器中断控制周期，进行采样、计算、输出显得非常和谐，任务不多的情况下裸奔其实更合理一点。我们也使用了这种方式，通过1ms的定时器中断进行状态机的切换。 PID控制对于自动化专业的学生来说，这种控制还是蛮简单的。首先平衡车需要实现三个闭环：1.角度闭环：建议使用PD控制。如果有陀螺仪的话不用计算差分，直接把Kd*陀螺仪测量值作为D项就可以了。我尝试过加入I项，要么系统滞后非常严重，要么没什么用。。。2.速度闭环：建议使用PI控制。建议不加入D项的原因是系统不需要预测速度，速度是我们直接给定的，比较稳定。3.转向闭环: 当时使用的是PD控制。D项来源于纵向的陀螺仪测量值，我们担心会出现转向过猛的情况，加入D负反馈限制了转向加速度，不然容易出现P参数过大时车体原地打转的情况。另外增量式和位置式PID的选择不用过多纠结，只有速度环有I项，积分饱和的情况很少见。不过积分限幅和输出限幅很有必要，不然车很容易撞坏。。 上位机我设计了个简陋的通信协议，并且写了两个配套的上位机，一个是初代没有图传功能，用VC++写的，V2.0就用C#写了一个可以实时传输图像的上位机，另外使用了自创的蜜汁压缩，稳定30fps哦！这里吹一波，比那些每4秒1帧的好到不知道哪里去了。但是当时着急用，代码写得很乱。。。V2.0源代码在此：Coding Spirit:Car_Debugger_V2.0","categories":[{"name":"项目总结","slug":"项目总结","permalink":"http://lzqblog.top/categories/项目总结/"}],"tags":[{"name":"智能车","slug":"智能车","permalink":"http://lzqblog.top/tags/智能车/"}]},{"title":"常用的Regex","slug":"常用的Regex","date":"2017-11-01T01:54:51.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-11-01/常用的Regex/","link":"","permalink":"http://lzqblog.top/2017-11-01/常用的Regex/","excerpt":"当进行数据分析时，我们常使用正则表达式爬取字符串得到目标数据。（有点爬虫的感觉）","text":"当进行数据分析时，我们常使用正则表达式爬取字符串得到目标数据。（有点爬虫的感觉） 目标数据为单行的情况最简单的情况，字符串可能是这样的：!@#$%[mark1]data[mark2]!@#$%!@#$%[mark1]data[mark2]!@#$%… 其中“!@#$%”为一大段不关心的字符，[mark1]和[mark2]为特定字符用于标记数据。我们的目标是将这个data得到。以源字符串、[mark1]和[mark2]分别为srcData、”#”、”!”为例，可以这样匹配：1string value = Regex.Match(srcData, \"(?&lt;=#).*?(?=!)\").Value; 此段代码将对#和!之间的除\\n之外的字符进行非贪婪匹配。注意，由于使用了通配符”.”,如果目标数据是多行,该正则表达式将不能正确匹配。 目标数据为多行前段时间的一个项目中要求从.c文件中获得某一struct的全部成员变量，一般而言struct内部都是多行的，因此上一种方式无法正确匹配。1string value = Regex.Match(srcData, @\"(?&lt;=[START])[\\s\\S]+?(?=[END])\").Value; 这种方式就比较粗暴了，直接非贪婪匹配所有字符（非空格和空格字符），所以得到的数据通常包括\\r\\n。","categories":[{"name":"编程相关","slug":"编程相关","permalink":"http://lzqblog.top/categories/编程相关/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://lzqblog.top/tags/C/"},{"name":"Regex","slug":"Regex","permalink":"http://lzqblog.top/tags/Regex/"}]},{"title":"Welcome","slug":"Welcome","date":"2017-10-31T12:48:07.000Z","updated":"2018-11-20T11:54:50.000Z","comments":true,"path":"2017-10-31/Welcome/","link":"","permalink":"http://lzqblog.top/2017-10-31/Welcome/","excerpt":"","text":"Welcome这是一个用node.js+hexo+github搭建起来的小站。好记性不如烂键盘，以后多多写blog咯！","categories":[{"name":"随便写写","slug":"随便写写","permalink":"http://lzqblog.top/categories/随便写写/"}],"tags":[{"name":"日志","slug":"日志","permalink":"http://lzqblog.top/tags/日志/"}]}]}