<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSL certificate problem: unable to get local issuer certificate</title>
    <url>/2020-08-26/SSL-certificate-problem-unable-to-get-local-issuer-certificate/</url>
    <content><![CDATA[<p>Yesterday successfully cross compiled curl with mbedTLS, but there was an error when trying to access a https link:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSL certificate problem: unable to get local issuer certificate</span><br></pre></td></tr></table></figure>

<p>To fix it, download CA certificate to local machine and export environment variable <code>CURL_CA_BUNDLE</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://curl.haxx.se/ca/cacert.pem</span><br><span class="line"><span class="built_in">export</span> CURL_CA_BUNDLE=&lt;path of cacert.pem&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis CI: Android Build Errors</title>
    <url>/2020-08-17/Travis-CI-Android-Build-Errors/</url>
    <content><![CDATA[<p>This post records some errors I have met during set up an Android build pipeline with Travis CI.</p>
<a id="more"></a>

<h2 id="Failed-to-install-the-following-Android-SDK-packages-as-some-licences-have-not-been-accepted"><a href="#Failed-to-install-the-following-Android-SDK-packages-as-some-licences-have-not-been-accepted" class="headerlink" title="Failed to install the following Android SDK packages as some licences have not been accepted."></a>Failed to install the following Android SDK packages as some licences have not been accepted.</h2><p>Error message:</p>
<p>Failed to install the following Android SDK packages as some licences have not been accepted.<br>     platforms;android-29 Android SDK Platform 29<br>  To build this project, accept the SDK license agreements and install the missing components using the Android Studio SDK Manager.</p>
<p>Fix:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">yes</span> <span class="string">|</span> <span class="string">sdkmanager</span> <span class="string">"platforms;android-29"</span></span><br></pre></td></tr></table></figure>

<h2 id="Lint-found-errors-in-the-project-aborting-build"><a href="#Lint-found-errors-in-the-project-aborting-build" class="headerlink" title="Lint found errors in the project; aborting build."></a>Lint found errors in the project; aborting build.</h2><p>Error message:</p>
<p>Execution failed for task ‘:app:lint’.<br><br>&gt; Lint found errors in the project; aborting build.</p>
<p>Quick Fix:</p>
<p>Add following code into <em>app/build.gradle</em> to disable abort when lint error:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lintOptions &#123;</span><br><span class="line">    abortOnError false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Suggested Fix:</p>
<p>Run <code>./gradlew lint</code> to generate lint report and fix those errors. You can find it under <em>/app/build/outputs/lint-results-debug.html</em>. You also can run <code>./gradlew lintDebug</code> or <code>./gradlew lintRelease</code> to run lint for debug or release version specifically.</p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Continuous Integration</tag>
      </tags>
  </entry>
  <entry>
    <title>Kibana: Read only dashboard</title>
    <url>/2020-08-15/Kibana-Read-only-dashboard/</url>
    <content><![CDATA[<p>…</p>
<a id="more"></a>

<h2 id="X-Pack-security-enabled"><a href="#X-Pack-security-enabled" class="headerlink" title="X-Pack security enabled"></a>X-Pack security enabled</h2><p>With X-Pack security enabled, give specific user with <code>kibana_dashboard_only_user</code> role in <strong>Management &gt; Security &gt; Users</strong>. In this case user can access dashboard but there is no edit button in dashboard.</p>
<h2 id="X-Pack-security-is-not-enabled"><a href="#X-Pack-security-is-not-enabled" class="headerlink" title="X-Pack security is not enabled"></a>X-Pack security is not enabled</h2><p>If X-Pack security is not enabled, there is another way to make dashboard “read only” :</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT .kibana/_settings</span><br><span class="line">&#123;</span><br><span class="line">  "index": &#123;</span><br><span class="line">    "blocks.read_only": true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If applied code in <strong>Dev tool</strong>, Edit button still can be seen in dashboard but user can’t save modified dashboard.</p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Android: BLE Operations</title>
    <url>/2020-07-05/Android-BLE-Operations/</url>
    <content><![CDATA[<p>When I was in university, I had developed a BLE based UAV controller based on an open source Android BLE library. The library itself is quite easy to use but I decided to develop an Android BLE app with native Android BLE API, which can connect and communicate with BLE GATT devices.</p>
<a id="more"></a>

<h2 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Note: ACCESS_FINE_LOCATION are required for BT scanning after Android 9</p>
</blockquote>
<h2 id="Request-to-open-Bluetooth"><a href="#Request-to-open-Bluetooth" class="headerlink" title="Request to open Bluetooth"></a>Request to open Bluetooth</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> BluetoothAdapter mBluetoothAdapter;</span><br><span class="line"><span class="keyword">private</span> BluetoothManager mBluetoothManager;</span><br><span class="line"></span><br><span class="line">mBluetoothManager = (BluetoothManager) getActivity().getSystemService(Context.BLUETOOTH_SERVICE);</span><br><span class="line">mBluetoothAdapter = mBluetoothManager.getAdapter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mBluetoothAdapter == <span class="keyword">null</span> || !mBluetoothAdapter.isEnabled()) &#123;</span><br><span class="line">    Intent enableBtIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">    startActivity(enableBtIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BLE-Scan"><a href="#BLE-Scan" class="headerlink" title="BLE Scan"></a>BLE Scan</h2><p>If there is no need to set scan filter, we can simply do:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScanCallback mScanCallback = <span class="keyword">new</span> ScanCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScanResult</span><span class="params">(<span class="keyword">int</span> callbackType, ScanResult result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onScanResult(callbackType, result);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">           devicesList.add(result.getDevice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">mBluetoothAdapter.getBluetoothLeScanner().startScan(mScanCallback);</span><br></pre></td></tr></table></figure>

<p>If we want add filter for scanner, i.e. We’d like to search devices with certain service:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_UUID = <span class="string">"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"</span>;</span><br><span class="line">ParcelUuid parcelUuidMask = ParcelUuid.fromString(SERVICE_UUID);</span><br><span class="line">List&lt;ScanFilter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ScanFilter.Builder filterBuilder = <span class="keyword">new</span> ScanFilter.Builder().setServiceUuid(parcelUuidMask);</span><br><span class="line">filters.add(filterBuilder.build());</span><br><span class="line">ScanSettings.Builder settingBuilder = <span class="keyword">new</span> ScanSettings.Builder();</span><br><span class="line">mFragmentReference.get().mBluetoothAdapter.getBluetoothLeScanner().startScan(filters, settingBuilder.build(), mScanCallback);</span><br></pre></td></tr></table></figure>

<h2 id="Connect-to-device"><a href="#Connect-to-device" class="headerlink" title="Connect to device"></a>Connect to device</h2><p>Blow code shows how to connect to device and set up callbacks:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UUID mServiceUuid = UUID.fromString(SERVICE_UUID);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_MTU = <span class="number">64</span>;</span><br><span class="line"><span class="comment">// Get from ScanCallback: result.getDevice();</span></span><br><span class="line"><span class="keyword">private</span> BluetoothDevice mDevice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mDeviceGatt = mDevice.connectGatt(mContext, <span class="keyword">false</span>, <span class="keyword">new</span> BluetoothGattCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionStateChange</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (newState) &#123;</span><br><span class="line">            <span class="keyword">case</span> BluetoothProfile.STATE_CONNECTED:</span><br><span class="line">                <span class="comment">// If connected we start to discover services provided by device</span></span><br><span class="line">                gatt.discoverServices();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BluetoothProfile.STATE_CONNECTING:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BluetoothProfile.STATE_DISCONNECTED:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                gatt.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServicesDiscovered</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (gatt.getService(mServiceUuid) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// service found, request for increasing MTU</span></span><br><span class="line">            gatt.requestMtu(REQUEST_MTU);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicRead</span><span class="params">(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status == BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"Read characteristic: "</span> + <span class="keyword">new</span> String(characteristic.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicWrite</span><span class="params">(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status == BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"Write characteristic: "</span> + <span class="keyword">new</span> String(characteristic.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMtuChanged</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> mtu, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"MTU changed to "</span> + mtu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The default MTU for ATT is 23 bytes. In those 23 bytes, there are 20 bytes for GATT. To send/receive data more than 20 bytes at once, we need to call <code>requestMtu</code> to increase MTU.</p>
<h2 id="Read-Write-characteristic"><a href="#Read-Write-characteristic" class="headerlink" title="Read/Write characteristic"></a>Read/Write characteristic</h2><p>Blow code shows how to read characteristic:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Here we get all available characteristics in this service</span></span><br><span class="line">List&lt;BluetoothGattCharacteristic&gt; characteristics = gatt.getService(mServiceUuid).getCharacteristics();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Try to read the first characteristic</span></span><br><span class="line"><span class="keyword">if</span> (!mThing.mDeviceGatt.readCharacteristic(characteristics.get(<span class="number">0</span>))) &#123;</span><br><span class="line">    Log.e(<span class="string">"TAG"</span>, <span class="string">"Read characteristic error"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Blow code shows how to write characteristic:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UUID mCharacteristicUuid = UUID.fromString(<span class="string">"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"</span>);</span><br><span class="line"></span><br><span class="line">BluetoothGattCharacteristic characteristic = gatt.getService(mServiceUuid).getCharacteristic(mCharacteristicUuid);</span><br><span class="line"></span><br><span class="line">characteristic.setValue();</span><br><span class="line">mDeviceGatt.writeCharacteristic(<span class="string">"data to write"</span>.getBytes());</span><br></pre></td></tr></table></figure>

<p>Once operation is done, <code>onCharacteristicRead</code> / <code>onCharacteristicWrite</code> will be called.</p>
<blockquote>
<p>Note: There is only one operation is allowed at a time. If we need to implement a complex logic with a lot of read/write operations, suggestion will be use a message queue.</p>
</blockquote>
]]></content>
      <categories>
        <category>App Development</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android: Swipe Down To Refresh</title>
    <url>/2020-06-27/Android-Swipe-Down-To-Refresh/</url>
    <content><![CDATA[<p>“Swipe down/Pull down to refresh” is a widely used feature in various kinds of apps. Let’s see how can we do that via SwipeRefreshLayout in AndroidX.</p>
<a id="more"></a>

<h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'</span></span><br></pre></td></tr></table></figure>

<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/mySwipeRefreshLayout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".ui.main.DevicesFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/myRecyclerView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Here we have a <code>RecyclerView</code> inside <code>SwipeRefreshLayout</code>. We plan to update dataset in <code>RecyclerView</code> when user swipe down.</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>To implement the logic of refreshing, we need to set refresh listener and override method <code>onRefresh</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mSwipeRefreshLayout = getView().findViewById(R.id.mySwipeRefreshLayout);</span><br><span class="line">mSwipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// logic implementation start</span></span><br><span class="line">      <span class="comment">// dataSet.add(fetchFromServer());</span></span><br><span class="line">      <span class="comment">// logic implementation end</span></span><br><span class="line">      mSwipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>When refreshing is done, call <code>setRefreshing(false)</code> to stop refreshing animation.</p>
]]></content>
      <categories>
        <category>App Development</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Give serial port access to normal user</title>
    <url>/2020-06-22/Give-serial-port-access-to-normal-user/</url>
    <content><![CDATA[<p>When we try to access a serial port device(i.e <strong>/dev/ttyUSB0</strong>) as a normal user, a <em>Permission denied</em> error will occur. Let’s take a look at permissions for those serial port devices:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /dev/ttyUSB0</span><br><span class="line">crw-rw---- 1 root dialout 188, 0 6月  22 19:28 /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<p>As we can see, except root user, <strong>dialout</strong> group also has permissions to those serial port tty devices. Hence, to allow normal user access serial port devices, adding normal user to <strong>dialout</strong> group will suffice:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG dialout <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python: Use mmap to create shared memory for IPC</title>
    <url>/2020-06-13/Python-Use-mmap-to-create-shared-memory-for-IPC/</url>
    <content><![CDATA[<p>There are several ways to achieve IPC, shared memory is one of those. In this post, we will try to create shared memory via <strong>mmap</strong> module in python.</p>
<a id="more"></a>

<h2 id="Write-to-shared-memory"><a href="#Write-to-shared-memory" class="headerlink" title="Write to shared memory"></a>Write to shared memory</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> mmap</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_mem</span><span class="params">(file, share_data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> contextlib.closing(mmap.mmap(file.fileno(), <span class="number">1024</span>, access=mmap.ACCESS_WRITE)) <span class="keyword">as</span> mem:</span><br><span class="line">        mem.seek(<span class="number">0</span>)</span><br><span class="line">        mem.write(share_data.encode())</span><br><span class="line">        mem.write(<span class="string">'\x00'</span>.encode() * (<span class="number">1024</span> - len(share_data.encode())))</span><br><span class="line">        mem.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.dat'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'\x00'</span> * <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">'data.dat'</span>, <span class="string">'r+'</span>)</span><br><span class="line">write_to_mem(file, <span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>

<p>Here we created a 1026 bytes file, which will be mapped to memory. </p>
<h2 id="Read-from-shared-memory"><a href="#Read-from-shared-memory" class="headerlink" title="Read from shared memory"></a>Read from shared memory</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> mmap</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.dat'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> contextlib.closing(mmap.mmap(f.fileno(), <span class="number">1024</span>, access=mmap.ACCESS_READ)) <span class="keyword">as</span> mem:</span><br><span class="line">        s = mem.read(<span class="number">1024</span>)</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure>

<p>Here we mapped <em>data.dat</em> file to memory and read from it.</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Use ffmpeg to make kazam recorded mp4 available for Android devices</title>
    <url>/2020-06-13/Use-ffmpeg-to-make-kazam-recorded-mp4-available-for-Android-devices/</url>
    <content><![CDATA[<p><strong>kazam</strong> is an easy to use screen record tool for Linux. User can install it via <code>apt install kazam</code> on Debian based distribution. After recording, <strong>kazam</strong> supports to save as mp4 files, which are 4:4:4 by default. To make it available for typical player on other platform, we can covert it to 4:2:0:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="variable">$&#123;original.mp4&#125;</span> -vf format=yuv420p <span class="variable">$&#123;new.mp4&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Android: Swipe Views With Tabs(TabLayout + ViewPager)</title>
    <url>/2020-05-16/Android-Swipe-Views-With-Tabs-TabLayout-ViewPager/</url>
    <content><![CDATA[<p>In AndroidX, TabLayout has been extended and moved to package com.google.android.material.tabs.TabLayout. This post will describe how to use <strong>TabLayout + ViewPager</strong> to create swipe views with tabs in AndroidX.</p>
<a id="more"></a>

<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><img src="https://blog-image-host.oss-cn-shanghai.aliyuncs.com/lzqblog/Android-Swipe-Views-With-Tabs-TabLayout-ViewPager/swipe.gif" width="50%" height="50%">

<h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>Before AndroidX, <strong>TabLayout</strong> is part of <span style="color:red">support</span> package:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'com.android.support:design:28.0.0'</span></span><br></pre></td></tr></table></figure>

<p>But now we need to use <span style="color:red">material</span> package:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'com.google.android.material:material:1.0.0'</span></span><br></pre></td></tr></table></figure>

<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>In my scenario I added TabLayout and ViewPager in a fragment(main_fragment.xml):</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".ui.main.MainFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.tabs.TabLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tab_layout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.viewpager.widget.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Here we added one TabLayout and one ViewPager inside. We will add tab items dynamically, but it’s also doable to add tab items inside layout file by adding <span style="color:red"><em>com.google.android.material.tabs.TabItem</em></span>.</p>
<p>Then we need another fragment(publish_fragment.xml) to display the view in each tab.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/publish"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".ui.main.PublishFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Here we added a TextView shows “Hello”.</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Back to Java code, in <em>MainFragment.java</em> we need to implement <strong>FragmentPagerAdapter</strong>, and <code>setupWithViewPager</code> to <strong>TabLayout</strong> :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainFragment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Fragment&gt; fragmentList = <span class="keyword">new</span> ArrayList&lt;Fragment&gt;();</span><br><span class="line">    <span class="keyword">private</span> String[] tabString = &#123;<span class="string">"TAB1"</span>, <span class="string">"TAB2"</span>, <span class="string">"TAB3"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.main_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        TabLayout tabLayout = (TabLayout) getView().findViewById(R.id.tab_layout);</span><br><span class="line">        ViewPager viewPager = (ViewPager) getView().findViewById(R.id.viewPager);</span><br><span class="line">        MyAdapter fragmentAdapter = <span class="keyword">new</span>  MyAdapter(getChildFragmentManager());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string:tabString)&#123;</span><br><span class="line">            tabLayout.addTab(tabLayout.newTab().setText(string));</span><br><span class="line">            fragmentList.add(PublishFragment.newInstance());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        viewPager.setAdapter(fragmentAdapter);</span><br><span class="line">        tabLayout.setupWithViewPager(viewPager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(fm);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fragmentList.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fragmentList.get(position);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tabString[position];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>App Development</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS IoT Getting Started: MQTT sample</title>
    <url>/2020-04-13/AWS-IoT-Getting-Started-MQTT-sample/</url>
    <content><![CDATA[<p>AWS IoT Getting Started: MQTT sample</p>
<a id="more"></a>

<h2 id="AWS-IoT-Console"><a href="#AWS-IoT-Console" class="headerlink" title="AWS IoT Console"></a>AWS IoT Console</h2><p>Using <a href="https://console.aws.amazon.com/iot/home" target="_blank" rel="noopener">AWS IoT Console</a> to manage IoT devices. In MQTT sample, we need to create a thing in console and setup policy, certificate, and keys.</p>
<h2 id="Create-a-Thing"><a href="#Create-a-Thing" class="headerlink" title="Create a Thing"></a>Create a Thing</h2><blockquote>
<p>Devices connected to AWS IoT are represented by things in the AWS IoT registry. A thing represents a specific device or logical entity. It can be a physical device or sensor (for example, a light bulb or a switch on the wall). It can also be a logical entity, like an instance of an application or physical entity that does not connect to AWS IoT, but is related to other devices that do (for example, a car that has engine sensors or a control panel). (From <a href="https://docs.aws.amazon.com/iot/latest/developerguide/create-aws-thing.html" target="_blank" rel="noopener">Amazon docs</a>)</p>
</blockquote>
<p>In AWS IoT Console, go to Manage-&gt;Things to create a thing. After that, in things details page <em>Interact</em> tab we can find the API endpoint for IoT device.</p>
<p><img src="https://blog-image-host.oss-cn-shanghai.aliyuncs.com/lzqblog/AWS-IoT-Getting-Started-MQTT-sample/Screenshot%20from%202020-04-13%2016-23-25.png" alt></p>
<h2 id="Certificates-and-keys"><a href="#Certificates-and-keys" class="headerlink" title="Certificates and keys"></a>Certificates and keys</h2><p>In AWS IoT Console, go to Secure-&gt;Certificates to create a certificate(One-click certificate creation are recommended):</p>
<p><img src="https://blog-image-host.oss-cn-shanghai.aliyuncs.com/lzqblog/AWS-IoT-Getting-Started-MQTT-sample/Screenshot%20from%202020-04-13%2016-32-30.png" alt></p>
<p>Then we need to download certificate, keys and root CA from this page:</p>
<p><img src="https://blog-image-host.oss-cn-shanghai.aliyuncs.com/lzqblog/AWS-IoT-Getting-Started-MQTT-sample/Screenshot%20from%202020-04-13%2016-33-47.png" alt></p>
<h2 id="AWS-IoT-SDK"><a href="#AWS-IoT-SDK" class="headerlink" title="AWS IoT SDK"></a>AWS IoT SDK</h2><p><a href="https://github.com/aws/aws-iot-device-sdk-embedded-C" target="_blank" rel="noopener">AWS IoT SDK</a> is the SDK for connecting to AWS IoT from a device using embedded C. Before porting to embedded platform, we can have a quick trial on a Linux based PC.</p>
<h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><p>This SDK depends on <a href="https://github.com/ARMmbed/mbedtls" target="_blank" rel="noopener">MbedTLS</a>. Files of MbedTLS need to copy to <em>aws-iot-device-sdk-embedded-C/external_libs/mbedTLS/</em>.</p>
<h3 id="Modifications-before-building"><a href="#Modifications-before-building" class="headerlink" title="Modifications before building"></a>Modifications before building</h3><p>MQTT sample code is under <em>aws-iot-device-sdk-embedded-C/samples/linux/subscribe_publish_sample/</em>. Before building, we need to do some modifications to make it work.</p>
<ul>
<li>Copy the downloaded certificate, keys and root CA into <em>aws-iot-device-sdk-embedded-C/certs/</em>.</li>
<li>Modify <em>/home/alex/data/aws/aws-iot-device-sdk-embedded-C/samples/linux/subscribe_publish_sample/aws_iot_config.h</em>:<ul>
<li>AWS_IOT_MQTT_HOST: Which is the API endpoint we got when created a thing</li>
<li>AWS_IOT_MY_THING_NAME: Should be same as the name we set when created a thing</li>
<li>AWS_IOT_ROOT_CA_FILENAME: File name of the rootCA we downloaded.</li>
<li>AWS_IOT_CERTIFICATE_FILENAME: File name of the device certificate we downloaded.</li>
<li>AWS_IOT_PRIVATE_KEY_FILENAME: File name of the private key we downloaded.</li>
</ul>
</li>
</ul>
<h3 id="make-and-run"><a href="#make-and-run" class="headerlink" title="make and run"></a>make and run</h3><p>Device log:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Subscribing...</span><br><span class="line">--&gt;sleep</span><br><span class="line">Subscribe callback</span><br><span class="line">sdkTest&#x2F;sub	hello from SDK QOS0 : 0 </span><br><span class="line">Subscribe callback</span><br><span class="line">sdkTest&#x2F;sub	hello from SDK QOS1 : 1 </span><br><span class="line">--&gt;sleep</span><br><span class="line">Subscribe callback</span><br><span class="line">sdkTest&#x2F;sub	hello from SDK QOS0 : 2 </span><br><span class="line">Subscribe callback</span><br><span class="line">sdkTest&#x2F;sub	hello from SDK QOS1 : 3 </span><br><span class="line">--&gt;sleep</span><br><span class="line">Subscribe callback</span><br><span class="line">sdkTest&#x2F;sub	hello from SDK QOS0 : 4 </span><br><span class="line">Subscribe callback</span><br></pre></td></tr></table></figure>

<p>AWS IoT Console:<br><img src="/2020-04-13/AWS-IoT-Getting-Started-MQTT-sample/Screenshot%20from%202020-04-13%2017-02-38.png" alt></p>
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>MQTT</tag>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>SWUpdate bring up (I): Install to Yocto Linux and create single copy image</title>
    <url>/2020-04-05/SWUpdate-bring-up-I-Install-to-Yocto-Linux-and-create-single-copy-image/</url>
    <content><![CDATA[<p><a href="https://github.com/sbabic/meta-swupdate-boards" target="_blank" rel="noopener">SWUpdate</a> is a popular embedded system update framework. I’m trying to bring up a OTA update system on stm32mp1, and this OTA system will base on SWUpdate. This post records steps need to be done to install SWUpdate system into Yocto Linux, and create a single copy image to test it.</p>
<a id="more"></a>

<h2 id="meta-swupdate"><a href="#meta-swupdate" class="headerlink" title="meta-swupdate"></a>meta-swupdate</h2><p><a href="https://github.com/sbabic/meta-swupdate-boards" target="_blank" rel="noopener">SWUpdate</a> was provided to help generate SWUpdate supported images. Clone it to the layers path and add it into <span style="color:red"><strong>conf/bblayers.conf</strong></span>.</p>
<blockquote>
<p>Notes:<br>This layer depends on several recipes in meta-openembedded. i.e. <strong>librsync</strong> and <strong>libubootenv</strong>. For STM32MP distribution, the default meta-openembedded version is too old and those recipes are not included yet. To continue, add those recipes manually or reset meta-openembedded to a newer version.</p>
</blockquote>
<h2 id="Boards-related-configs"><a href="#Boards-related-configs" class="headerlink" title="Boards related configs"></a>Boards related configs</h2><h3 id="SWUpdate-defconfig"><a href="#SWUpdate-defconfig" class="headerlink" title="SWUpdate defconfig"></a>SWUpdate defconfig</h3><p><span style="color:red"><strong>defconfig</strong></span> was required by swupdate.inc. Use menuconfig to create one for your boards as defconfig.</p>
<blockquote>
<p>Notes:<br>If <span style="color:blue">CONFIG_WEBSERVER</span> and <span style="color:blue">CONFIG_MONGOOSE</span> was enabled in menuconfig, target boards will run a mongoose webserver so user can access it through <span style="color:red">&lt;target_ip&gt;:8080</span> by default</p>
</blockquote>
<h3 id="SWUpdate-swupdate-cfg"><a href="#SWUpdate-swupdate-cfg" class="headerlink" title="SWUpdate swupdate.cfg"></a>SWUpdate swupdate.cfg</h3><p><span style="color:red"><strong>swupdate.cfg</strong></span> will be copied to target as swupdate runtime configurations. In <strong>swupdate.cfg</strong> we can set <code>board idendity</code>,<code>public-key</code>,<code>suricatta</code>, <code>webserver</code> and even more:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">globals :</span><br><span class="line">&#123;</span><br><span class="line">	verbose &#x3D; true;</span><br><span class="line">	loglevel &#x3D; 5;</span><br><span class="line">	syslog &#x3D; true;</span><br><span class="line">	no-downgrading &#x3D; &quot;1.0.0&quot;;</span><br><span class="line">	postupdatecmd &#x3D; &quot;reboot&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">download :</span><br><span class="line">&#123;</span><br><span class="line">	retries &#x3D; 3;</span><br><span class="line">	timeout &#x3D; 1800;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">identify : (</span><br><span class="line">	&#123; name &#x3D; &quot;stm32mp157a-cp&quot;; value &#x3D; &quot;1.0&quot;; &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">webserver :</span><br><span class="line">&#123;</span><br><span class="line">	document_root &#x3D; &quot;&#x2F;www&quot;;</span><br><span class="line">	userid		&#x3D; 0;</span><br><span class="line">	groupid		&#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="09-swupdate-args"><a href="#09-swupdate-args" class="headerlink" title="09-swupdate-args"></a>09-swupdate-args</h3><p>This file defines extra parameters for swupdate daemon.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HARDWARE=<span class="string">"stm32mp157a-cp:1.0"</span></span><br><span class="line">CFGFILE=<span class="string">"/etc/swupdate.cfg"</span></span><br><span class="line">SWUPDATE_ARGS=<span class="string">"-H <span class="variable">$&#123;HARDWARE&#125;</span> -f <span class="variable">$&#123;CFGFILE&#125;</span>"</span></span><br></pre></td></tr></table></figure>

<p>Here we specific hardware information thus SWUpdate daemon will check swu image hardware compatibility before updating. If user trying to use swu image without specific hardware compatibility, SWUpdate will refuse to update.</p>
<h3 id="Use-bbappend-to-add-board-related-configs-in"><a href="#Use-bbappend-to-add-board-related-configs-in" class="headerlink" title="Use bbappend to add board related configs in"></a>Use <strong>bbappend</strong> to add board related configs in</h3><p>In boards specific layer, create file <code>swupdate_%.bbappend</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FILESEXTRAPATHS_append :&#x3D; &quot;$&#123;THISDIR&#125;&#x2F;$&#123;PN&#125;:&quot;</span><br><span class="line"></span><br><span class="line">PACKAGECONFIG_CONFARGS &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">SRC_URI +&#x3D; &quot; \</span><br><span class="line">    file:&#x2F;&#x2F;swupdate.cfg \</span><br><span class="line">    file:&#x2F;&#x2F;09-swupdate-args \</span><br><span class="line">    &quot;</span><br><span class="line"></span><br><span class="line">do_install_append() &#123;</span><br><span class="line">    install -m 0644 $&#123;WORKDIR&#125;&#x2F;09-swupdate-args $&#123;D&#125;$&#123;libdir&#125;&#x2F;swupdate&#x2F;conf.d&#x2F;</span><br><span class="line"></span><br><span class="line">    install -d $&#123;D&#125;$&#123;sysconfdir&#125;</span><br><span class="line">    install -m 0644 $&#123;WORKDIR&#125;&#x2F;swupdate.cfg $&#123;D&#125;$&#123;sysconfdir&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now we have structure like this in boards specific layer:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">└── swupdate</span><br><span class="line">    ├── swupdate</span><br><span class="line">    │   ├── 09-swupdate-args</span><br><span class="line">    │   ├── defconfig</span><br><span class="line">    │   └── swupdate.cfg</span><br><span class="line">    └── swupdate_%.bbappend</span><br></pre></td></tr></table></figure>

<h2 id="Install-to-image"><a href="#Install-to-image" class="headerlink" title="Install to image"></a>Install to image</h2><p>Then we need to add <code>swupdate</code>, <code>swupdate-www</code> and <code>libubootenv-bin</code> into image.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IMAGE_INSTALL_append &#x3D; &quot; swupdate swupdate-www libubootenv-bin&quot;</span><br></pre></td></tr></table></figure>

<p>Flash the built image to target, make sure PC and target board are in same LAN, then we can access <span style="color:red">&lt;target_ip&gt;:8080</span> :</p>
<p><img src="/2020-04-05/SWUpdate-bring-up-I-Install-to-Yocto-Linux-and-create-single-copy-image/webserver.png" alt></p>
<h2 id="Create-a-single-copy-update-image-for-test"><a href="#Create-a-single-copy-update-image-for-test" class="headerlink" title="Create a single copy update image for test"></a>Create a single copy update image for test</h2><p>Now it’s time to create a swu image to test SWUpdate system.</p>
<h3 id="sw-description"><a href="#sw-description" class="headerlink" title="sw-description"></a>sw-description</h3><p><span style="color:red"><strong>sw-description</strong></span> defines the compatibility and usage of <code>swu</code> images. Here we defined a single copy update image, which is compatible with boards <code>stm32mp157a-cp</code> and will update target rootfs:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">software &#x3D;</span><br><span class="line">&#123;</span><br><span class="line">	version &#x3D; &quot;1.0.0&quot;;</span><br><span class="line"></span><br><span class="line">	stm32mp157a-cp &#x3D; &#123;</span><br><span class="line">		hardware-compatibility: [ &quot;1.0&quot; ];</span><br><span class="line">		images: (</span><br><span class="line">			&#123;</span><br><span class="line">				filename &#x3D; &quot;cp-image-core-openstlinux-eglfs-stm32mp1-cp.ext4.gz&quot;;</span><br><span class="line">				type &#x3D; &quot;raw&quot;;</span><br><span class="line">				sha256 &#x3D; &quot;@cp-image-core-openstlinux-eglfs-stm32mp1-cp.ext4.gz&quot;;</span><br><span class="line">				installed-directly &#x3D; true;</span><br><span class="line">				compressed &#x3D; true;</span><br><span class="line">				device &#x3D; &quot;&#x2F;dev&#x2F;mmcblk0p6&quot;;</span><br><span class="line">			&#125;</span><br><span class="line">		);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Recipe-for-update-image"><a href="#Recipe-for-update-image" class="headerlink" title="Recipe for update image"></a>Recipe for update image</h3><p>To generate a <code>swu</code> file from bitbake, we need to create a recipe for update image. In my scenario it was named as <strong>cp-image-update.bb</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DESCRIPTION &#x3D; &quot;SWUpdate compound image&quot;</span><br><span class="line"></span><br><span class="line">LICENSE &#x3D; &quot;MIT&quot;</span><br><span class="line">LIC_FILES_CHKSUM &#x3D; &quot;file:&#x2F;&#x2F;$&#123;COMMON_LICENSE_DIR&#125;&#x2F;MIT;md5&#x3D;0835ade698e0bcf8506ecda2f7b4f302&quot;</span><br><span class="line"></span><br><span class="line">inherit swupdate</span><br><span class="line"></span><br><span class="line">SRC_URI &#x3D; &quot; \</span><br><span class="line">    file:&#x2F;&#x2F;sw-description \</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line"># images to build before building swupdate image</span><br><span class="line">IMAGE_DEPENDS &#x3D; &quot;cp-image-core&quot;</span><br><span class="line"></span><br><span class="line"># images and files that will be included in the .swu image</span><br><span class="line">SWUPDATE_IMAGES &#x3D; &quot;cp-image-core-openstlinux-eglfs-stm32mp1-cp&quot;</span><br><span class="line"></span><br><span class="line">SWUPDATE_IMAGES_FSTYPES[cp-image-core-openstlinux-eglfs-stm32mp1-cp] &#x3D; &quot;.ext4.gz&quot;</span><br></pre></td></tr></table></figure>

<p>Now we have structure like this in boards specific layer:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── images</span><br><span class="line">│   ├── cp-image-update</span><br><span class="line">│   │   └── sw-description</span><br><span class="line">│   └── cp-image-update.bb</span><br></pre></td></tr></table></figure>

<p>To generate <code>swu</code> image, call <code>bitbake cp-image-update</code>.</p>
<h3 id="Generate-update-image-without-image-recipe"><a href="#Generate-update-image-without-image-recipe" class="headerlink" title="Generate update image without image recipe"></a>Generate update image without image recipe</h3><p>Sometimes we want to generate a <code>swu</code> image for test purpose, in this scenario we can skip <code>bitbake</code> and use a simple shell script to generate <code>swu</code> image quickly:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">CONTAINER_VER=<span class="string">"1.0"</span></span><br><span class="line">PRODUCT_NAME=<span class="string">"stm32mp157-cp"</span></span><br><span class="line">FILES=<span class="string">"sw-description cp-image-core-openstlinux-eglfs-stm32mp1-cp.ext4.gz"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$FILES</span>;<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span>;<span class="keyword">done</span> | cpio -ov -H crc &gt;  <span class="variable">$&#123;PRODUCT_NAME&#125;</span>_<span class="variable">$&#123;CONTAINER_VER&#125;</span>.swu</span><br></pre></td></tr></table></figure>

<h3 id="Quick-check-structure-of-generated-swu-image"><a href="#Quick-check-structure-of-generated-swu-image" class="headerlink" title="Quick check structure of generated swu image"></a>Quick check structure of generated swu image</h3><p>Since swu image was cpio based, we can use <code>cat</code> to check structure of it:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat cp-image-update-openstlinux-eglfs-stm32mp1-cp.swu | cpio -it</span><br><span class="line">sw-description</span><br><span class="line">cp-image-core-openstlinux-eglfs-stm32mp1-cp.ext4.gz</span><br><span class="line">88360 blocks</span><br></pre></td></tr></table></figure>

<h2 id="Test-with-generated-swu-image-on-target"><a href="#Test-with-generated-swu-image-on-target" class="headerlink" title="Test with generated swu image on target"></a>Test with generated swu image on target</h2><h3 id="Use-web-interface"><a href="#Use-web-interface" class="headerlink" title="Use web interface"></a>Use web interface</h3><p>We can trigger update easily by uploading <code>swu</code> image through webserver:</p>
<p><img src="/2020-04-05/SWUpdate-bring-up-I-Install-to-Yocto-Linux-and-create-single-copy-image/uploading.png" alt></p>
<p>We defined     <code>postupdatecmd = &quot;reboot&quot;;</code> in <span style="color:red"><strong>swupdate.cfg</strong></span>, so system will automatically reboot:</p>
<p><img src="/2020-04-05/SWUpdate-bring-up-I-Install-to-Yocto-Linux-and-create-single-copy-image/reboot.png" alt></p>
<h3 id="Use-command-line-interface"><a href="#Use-command-line-interface" class="headerlink" title="Use command line interface"></a>Use command line interface</h3><p>We also can use command line to trigger update if we have an usb drive which contains <strong>swu</strong> image and has connected to target:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swupdate -i &#x2F;media&#x2F;cp-image-update-openstlinux-eglfs-stm32mp1-cp.swu -H stm32mp157a-cp:1.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>nfsroot boot crash after systemd-networkd starts</title>
    <url>/2020-03-08/nfsroot-boot-crash-after-systemd-networkd-starts/</url>
    <content><![CDATA[<p>Yesterday we found that nfsroot will get crash after systemd-networkd starts:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nfs: server 192.168.0.101 not responding, still trying</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h2><p>Crash was happened after we importing <em>eth.network</em> for systemd-networkd, which will set ethernet as DHCP mode after system booting. We doubting that this setting will release the IP we set when boards was mounting nfsroot.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>As far as I know there are two solutions to avoid systemd-networkd breaking nfs connection:</p>
<ul>
<li><strong>KernelCommandLine=!nfsroot</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Match]</span><br><span class="line">Name&#x3D;eth0</span><br><span class="line">KernelCommandLine&#x3D;!nfsroot</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">DHCP&#x3D;ipv4</span><br></pre></td></tr></table></figure>

<p>According to Linux manual page:</p>
<blockquote>
<pre><code>KernelCommandLine=
    Checks whether a specific kernel command line option is set (or
    if prefixed with the exclamation mark unset). See
    &quot;ConditionKernelCommandLine=&quot; in systemd.unit(5) for details.</code></pre></blockquote>
<p>So <strong>KernelCommandLine=!nfsroot</strong> will prevent this config to be applied if we have set nfsroot in kernel command line.</p>
<ul>
<li><strong>CriticalConnection=true</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Match]</span><br><span class="line">Name&#x3D;eth0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">DHCP&#x3D;ipv4</span><br><span class="line"></span><br><span class="line">[DHCP]</span><br><span class="line">CriticalConnection&#x3D;true</span><br></pre></td></tr></table></figure>

<p>According to Linux manual page:</p>
<blockquote>
<pre><code>CriticalConnection=
   When true, the connection will never be torn down even if the
   DHCP lease expires. This is contrary to the DHCP specification,
   but may be the best choice if, say, the root filesystem relies on
   this connection. Defaults to false.</code></pre></blockquote>
<p>So with <strong>CriticalConnection=true</strong> the connection will not be dropped, which prevent nfs from disconnecting as well.</p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto debugging commands</title>
    <url>/2020-03-07/Yocto-debugging-commands/</url>
    <content><![CDATA[<p>Notes about some useful Yocto debugging commands</p>
<a id="more"></a>

<h2 id="Checking-owner-of-installed-files"><a href="#Checking-owner-of-installed-files" class="headerlink" title="Checking owner of installed files"></a>Checking owner of installed files</h2><p>Assuming that build environments is ready(which means you can run <code>bitbake</code> normally), using <code>oe-pkgdata-util</code> can help to find the recipe who populated it. i.e:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oe-pkgdata-util find-path /lib/ld-2.28.so</span><br><span class="line">glibc: /lib/ld-2.28.so</span><br></pre></td></tr></table></figure>
<p><em>/lib/ld-2.28.so</em> was installed by <strong>glibc</strong></p>
<h2 id="Checking-packages-are-going-to-install"><a href="#Checking-packages-are-going-to-install" class="headerlink" title="Checking packages are going to install"></a>Checking packages are going to install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake -g &lt;image&gt; &amp;&amp; cat pn-buildlist | grep -ve <span class="string">"native"</span> | sort | uniq</span><br></pre></td></tr></table></figure>

<h2 id="Checking-packages-installed"><a href="#Checking-packages-installed" class="headerlink" title="Checking packages installed"></a>Checking packages installed</h2><p>There are several <em>.manifest</em> files under the path of built images, which contained packages has been installed.</p>
<h2 id="Checking-variables-inside-recipes"><a href="#Checking-variables-inside-recipes" class="headerlink" title="Checking variables inside recipes"></a>Checking variables inside recipes</h2><p><code>bb.utils.contains</code> can help to check variables inside recipes. i.e. we’d like to install some files base on <strong>MACHINE_FEATURES</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do_install() &#123;</span><br><span class="line">    if $&#123;@bb.utils.contains(&#39;MACHINE_FEATURES&#39;,&#39;ethernet&#39;,&#39;true&#39;,&#39;false&#39;,d)&#125;; then</span><br><span class="line">        install -d $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;network&#x2F;</span><br><span class="line">        install -m 0644 $&#123;WORKDIR&#125;&#x2F;10-eth.network $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;network&#x2F;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if $&#123;@bb.utils.contains(&#39;MACHINE_FEATURES&#39;,&#39;wifi&#39;,&#39;true&#39;,&#39;false&#39;,d)&#125;; then</span><br><span class="line">        install -d $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;network&#x2F;</span><br><span class="line">        install -m 0644 $&#123;WORKDIR&#125;&#x2F;51-wlan.network $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;network&#x2F;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Below is the python code from openembedded, which explains usage of this function:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contains</span><span class="params">(variable, checkvalues, truevalue, falsevalue, d)</span>:</span></span><br><span class="line">   <span class="string">"""Check if a variable contains all the values specified.</span></span><br><span class="line"><span class="string">   Arguments:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   variable -- the variable name. This will be fetched and expanded (using</span></span><br><span class="line"><span class="string">   d.getVar(variable)) and then split into a set().</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   checkvalues -- if this is a string it is split on whitespace into a set(),</span></span><br><span class="line"><span class="string">   otherwise coerced directly into a set().</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   truevalue -- the value to return if checkvalues is a subset of variable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   falsevalue -- the value to return if variable is empty or if checkvalues is</span></span><br><span class="line"><span class="string">   not a subset of variable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   d -- the data store.</span></span><br><span class="line"><span class="string">   """</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MP1: NFS rootfs</title>
    <url>/2020-03-01/STM32MP1-NFS-rootfs/</url>
    <content><![CDATA[<p>Last and this weekend I spend some time on mounting NFS rootfs on STM32MP1… There are some PHY driver issues and permission issues troubled me a lot…</p>
<a id="more"></a>

<h2 id="Pre-requirements"><a href="#Pre-requirements" class="headerlink" title="Pre-requirements"></a>Pre-requirements</h2><ul>
<li><span style="color:red">nfs-kernel-server</span> has been installed on server side</li>
<li>Board and PC are in same LAN</li>
</ul>
<h2 id="Exports-settings"><a href="#Exports-settings" class="headerlink" title="Exports settings"></a>Exports settings</h2><p>Assuming that we will put board rootfs under <em>/home/alex/data/srv/nfs</em>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/exports</span><br><span class="line"><span class="comment"># /etc/exports: the access control list for filesystems which may be exported</span></span><br><span class="line"><span class="comment">#		to NFS clients.  See exports(5).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example for NFSv2 and NFSv3:</span></span><br><span class="line"><span class="comment"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example for NFSv4:</span></span><br><span class="line"><span class="comment"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span></span><br><span class="line"><span class="comment"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/home/alex/data/srv/nfs 192.168.0.*(rw,sync,no_subtree_check,no_root_squash)</span><br></pre></td></tr></table></figure>

<ul>
<li>Wildcard in ip address(192.168.0.*) is supported, which is helpful for multiple boards</li>
<li><span style="color:red">no_root_squash</span> will map NFS client root user as NFS server root user</li>
</ul>
<p>After modifying <em>/etc/exports</em>, we can restart nfs server and check server exports:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nfs-kernel-server</span><br><span class="line">sudo exportfs</span><br><span class="line"></span><br><span class="line">/home/alex/data/srv/nfs</span><br><span class="line">		192.168.0.*</span><br></pre></td></tr></table></figure>

<h2 id="PXE-configuration-file"><a href="#PXE-configuration-file" class="headerlink" title="PXE configuration file"></a>PXE configuration file</h2><p>Create PXE configuration file for nfs booting. U-boot will pass chosen parameters to kernel.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu title Select the boot mode</span><br><span class="line"> DEFAULT eMMC</span><br><span class="line"> TIMEOUT 20</span><br><span class="line"> LABEL initramfs</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb</span><br><span class="line"> 	INITRD uInitrd</span><br><span class="line"> 	APPEND rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br><span class="line"> LABEL nfs</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb</span><br><span class="line"> 	APPEND root&#x3D;&#x2F;dev&#x2F;nfs ip&#x3D;192.168.0.102 nfsroot&#x3D;192.168.0.101:&#x2F;home&#x2F;alex&#x2F;data&#x2F;srv&#x2F;nfs,nfsvers&#x3D;3 rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br><span class="line"> LABEL sdcard</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb</span><br><span class="line"> 	APPEND root&#x3D;&#x2F;dev&#x2F;mmcblk0p6 rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br><span class="line"> LABEL eMMC</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb </span><br><span class="line"> 	APPEND root&#x3D;&#x2F;dev&#x2F;mmcblk1p6 rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br></pre></td></tr></table></figure>

<p><strong>LABEL nfs</strong> was set for nfs rootfs:</p>
<ul>
<li><strong>root=/dev/nfs</strong> Set nfs as rootfs</li>
<li><strong>ip=192.168.0.102</strong> Set board ip address, also can be <strong>dhcp</strong></li>
<li><strong>nfsroot=192.168.0.101:/home/alex/data/srv/nfs,nfsvers=3</strong> Specify nfs server ip, rootfs dir and nfs version</li>
</ul>
<h2 id="Unpack-boards-rootfs-and-modify-permissions"><a href="#Unpack-boards-rootfs-and-modify-permissions" class="headerlink" title="Unpack boards rootfs and modify permissions"></a>Unpack boards rootfs and modify permissions</h2><p>Unpack board rootfs under the path we set at exports setting, then we need to modify permissions for some folders and files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">TARGET_RFS_PATH=<span class="string">"/home/alex/data/srv/nfs"</span></span><br><span class="line"></span><br><span class="line">sudo chown -R <span class="variable">$&#123;USER&#125;</span> <span class="string">"<span class="variable">$&#123;TARGET_RFS_PATH&#125;</span>/var/lib/systemd"</span></span><br><span class="line">sudo chown -R <span class="variable">$&#123;USER&#125;</span> <span class="string">"<span class="variable">$&#123;TARGET_RFS_PATH&#125;</span>/var/lib/machines"</span></span><br><span class="line">suidfiles=$(sudo find <span class="variable">$&#123;TARGET_RFS_PATH&#125;</span> -perm /u=s)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$suidfiles</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    sudo chown root:root <span class="variable">$&#123;suidfiles&#125;</span></span><br><span class="line">    sudo chmod u+s <span class="variable">$&#123;suidfiles&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Reference: <a href="https://git.kontron-electronics.de/yocto-ktn/yocto-ktn/blob/master/scripts/init-remote2" target="_blank" rel="noopener">kontron-electronics</a></p>
</blockquote>
<h2 id="Booting-the-board"><a href="#Booting-the-board" class="headerlink" title="Booting the board"></a>Booting the board</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">U-Boot 2018.11-stm32mp-r3 (Nov 14 2018 - 16:10:06 +0000)</span><br><span class="line"></span><br><span class="line">CPU: STM32MP157AAA Rev.B</span><br><span class="line">Model: CP STM32MP157A Dev Board V1</span><br><span class="line">Board: stm32mp1 in basic mode (cp,stm32mp157a-cp)</span><br><span class="line">DRAM:  512 MiB</span><br><span class="line">Clocks:</span><br><span class="line">- MPU : 650 MHz</span><br><span class="line">- MCU : 208.878 MHz</span><br><span class="line">- AXI : 266.500 MHz</span><br><span class="line">- PER : 24 MHz</span><br><span class="line">- DDR : 533 MHz</span><br><span class="line">NAND:  0 MiB</span><br><span class="line">MMC:   STM32 SDMMC2: 0, STM32 SDMMC2: 1</span><br><span class="line">Loading Environment from EXT4... OK</span><br><span class="line">In:    serial</span><br><span class="line">Out:   serial</span><br><span class="line">Err:   serial</span><br><span class="line">invalid MAC address in OTP 00:00:00:00:00:00Net:   eth0: ethernet@5800a000</span><br><span class="line">Hit any key to stop autoboot:  0 </span><br><span class="line">STM32MP&gt; </span><br><span class="line">STM32MP&gt; </span><br><span class="line">STM32MP&gt; run bootcmd_pxe</span><br><span class="line">ethernet@5800a000 Waiting for PHY auto negotiation to complete. done</span><br><span class="line">BOOTP broadcast 1</span><br><span class="line">BOOTP broadcast 2</span><br><span class="line">DHCP client bound to address 192.168.0.102 (990 ms)</span><br><span class="line">missing environment variable: pxeuuid</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: pxelinux.cfg&#x2F;01-e2-a4-06-a5-8f-7f</span><br><span class="line">Using ethernet@5800a000 device</span><br><span class="line">TFTP from server 192.168.0.101; our IP address is 192.168.0.102</span><br><span class="line">Filename &#39;pxelinux.cfg&#x2F;01-e2-a4-06-a5-8f-7f&#39;.</span><br><span class="line">Load address: 0xc4200000</span><br><span class="line">Loading: #</span><br><span class="line">         11.7 KiB&#x2F;s</span><br><span class="line">done</span><br><span class="line">Bytes transferred &#x3D; 658 (292 hex)</span><br><span class="line">Config file found</span><br><span class="line">Select the boot mode</span><br><span class="line">1:      initramfs</span><br><span class="line">2:      nfs</span><br><span class="line">3:      sdcard</span><br><span class="line">4:      eMMC</span><br><span class="line">Enter choice: 2</span><br><span class="line">2:      nfs</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: uImage</span><br><span class="line">Using ethernet@5800a000 device</span><br><span class="line">TFTP from server 192.168.0.101; our IP address is 192.168.0.102</span><br><span class="line">Filename &#39;uImage&#39;.</span><br><span class="line">Load address: 0xc2000000</span><br><span class="line">Loading: #################################################################</span><br><span class="line">         ################################################################T #</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #####################################################T ############</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         ###################T ##############################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         ########</span><br><span class="line">         76.2 KiB&#x2F;s</span><br><span class="line">done</span><br><span class="line">Bytes transferred &#x3D; 6693440 (662240 hex)</span><br><span class="line">append: root&#x3D;&#x2F;dev&#x2F;nfs ip&#x3D;192.168.0.102 nfsrootdebug nfsroot&#x3D;192.168.0.101:&#x2F;home&#x2F;alex&#x2F;data&#x2F;srv&#x2F;nfs,nfsver0</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: stm32mp157a-cp.dtb</span><br><span class="line">Using ethernet@5800a000 device</span><br><span class="line">TFTP from server 192.168.0.101; our IP address is 192.168.0.102</span><br><span class="line">Filename &#39;stm32mp157a-cp.dtb&#39;.</span><br><span class="line">Load address: 0xc4000000</span><br><span class="line">Loading: #############</span><br><span class="line">         86.9 KiB&#x2F;s</span><br><span class="line">done</span><br><span class="line">Bytes transferred &#x3D; 62891 (f5ab hex)</span><br><span class="line">## Booting kernel from Legacy Image at c2000000 ...</span><br><span class="line">   Image Name:   Linux-4.19.49</span><br><span class="line">   Created:      2019-06-09   7:17:25 UTC</span><br><span class="line">   Image Type:   ARM Linux Kernel Image (uncompressed)</span><br><span class="line">   Data Size:    6693376 Bytes &#x3D; 6.4 MiB</span><br><span class="line">   Load Address: c2000040</span><br><span class="line">   Entry Point:  c2000040</span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line">## Flattened Device Tree blob at c4000000</span><br><span class="line">   Booting using the fdt blob at 0xc4000000</span><br><span class="line">   XIP Kernel Image ... OK</span><br><span class="line">   Using Device Tree in place at c4000000, end c40125aa</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">[    2.174568] stm32_rtc 5c004000.rtc: setting system clock to 2000-01-01 00:01:41 UTC (946684901)</span><br><span class="line">[    2.183611] Generic PHY stmmac-0:00: attached PHY driver [Generic PHY] (mii_bus:phy_addr&#x3D;stmmac-0:00,)</span><br><span class="line">[    2.197201] usb 1-1: new high-speed USB device number 2 using ehci-platform</span><br><span class="line">[    2.214199] dwmac4: Master AXI performs any burst length</span><br><span class="line">[    2.218189] stm32-dwmac 5800a000.ethernet eth0: No Safety Features support found</span><br><span class="line">[    2.225501] stm32-dwmac 5800a000.ethernet eth0: IEEE 1588-2008 Advanced Timestamp supported</span><br><span class="line">[    2.234275] stm32-dwmac 5800a000.ethernet eth0: registered PTP clock</span><br><span class="line">[    2.398628] hub 1-1:1.0: USB hub found</span><br><span class="line">[    2.401140] hub 1-1:1.0: 4 ports detected</span><br><span class="line">[    3.277927] stm32-dwmac 5800a000.ethernet eth0: Link is Up - 100Mbps&#x2F;Full - flow control rx&#x2F;tx</span><br><span class="line">[    3.317195] IP-Config: Guessing netmask 255.255.255.0</span><br><span class="line">[    3.320790] IP-Config: Complete:</span><br><span class="line">[    3.324024]      device&#x3D;eth0, hwaddr&#x3D;e2:a4:06:a5:8f:7f, ipaddr&#x3D;192.168.0.102, mask&#x3D;255.255.255.0, gw&#x3D;5</span><br><span class="line">[    3.334612]      host&#x3D;192.168.0.102, domain&#x3D;, nis-domain&#x3D;(none)</span><br><span class="line">[    3.340520]      bootserver&#x3D;255.255.255.255, rootserver&#x3D;192.168.0.101, rootpath&#x3D;</span><br><span class="line">[    3.349127] ALSA device list:</span><br><span class="line">[    3.350873]   No soundcards found.</span><br><span class="line">[    3.519504] VFS: Mounted root (nfs filesystem) on device 0:15.</span><br><span class="line">[    3.529231] devtmpfs: mounted</span><br><span class="line">[    3.532594] Freeing unused kernel memory: 1024K</span><br><span class="line">[    3.535990] Run &#x2F;sbin&#x2F;init as init process</span><br><span class="line">[    5.499422] systemd[1]: System time before build time, advancing clock.</span><br><span class="line">[    6.079843] NET: Registered protocol family 10</span><br><span class="line">[    9.012545] Segment Routing with IPv6</span><br><span class="line">[    9.200958] systemd[1]: systemd 239 running in system mode. (+PAM -AUDIT -SELINUX +IMA -APPARMOR +SMA)</span><br><span class="line">[    9.222756] systemd[1]: Detected architecture arm.</span><br><span class="line"></span><br><span class="line">Welcome to ST OpenSTLinux - EGLfs - (A Yocto Project Based Distro) 2.6-snapshot-20191124 (thud)!</span><br><span class="line"></span><br><span class="line">[    9.371860] systemd[1]: Set hostname to &lt;stm32mp1-cp&gt;.</span><br><span class="line">[    9.476160] systemd[1]: Hardware watchdog &#39;STM32 Independent Watchdog&#39;, version 0</span><br><span class="line">[    9.483357] systemd[1]: Set hardware watchdog to 30s.</span><br><span class="line">[   15.306868] systemd[1]: Unnecessary job for dev-ttySTM0.device was removed.</span><br><span class="line">[   15.315395] systemd[1]: Started Dispatch Password Requests to Console Directory Watch.</span><br><span class="line">[  OK  ] Started Dispatch Password Requests to Console Directory Watch.</span><br><span class="line">[   15.374193] systemd[1]: Listening on Journal Socket (&#x2F;dev&#x2F;log).</span><br><span class="line">[  OK  ] Listening on Journal Socket (&#x2F;dev&#x2F;log).</span><br><span class="line">[   15.407969] systemd[1]: Listening on initctl Compatibility Named Pipe.</span><br><span class="line">[  OK  ] Listening on initctl Compatibility Named Pipe.</span><br><span class="line">[   15.479167] systemd[1]: Listening on udev Control Socket.</span><br><span class="line">[  OK  ] Listening on udev Control Socket.</span><br><span class="line">[   15.653309] systemd[1]: Reached target Remote File Systems.</span><br><span class="line">[  OK  ] Reached target Remote File Systems.</span><br><span class="line">[   15.696091] systemd[1]: Listening on Network Service Netlink Socket.</span><br><span class="line">[  OK  ] Listening on Network Service Netlink Socket.</span><br><span class="line">[   15.764924] systemd[1]: Listening on Syslog Socket.</span><br><span class="line">[  OK  ] Listening on Syslog Socket.</span><br><span class="line">[   15.802155] systemd[1]: Created slice system-getty.slice.</span><br><span class="line">[  OK  ] Created slice system-getty.slice.</span><br><span class="line">[   15.837597] systemd[1]: Reached target Swap.</span><br><span class="line">[  OK  ] Reached target Swap.</span><br><span class="line">[  OK  ] Started Forward Password Requests to Wall Directory Watch.</span><br><span class="line">[  OK  ] Reached target Paths.</span><br><span class="line">[  OK  ] Listening on udev Kernel Socket.</span><br><span class="line">[  OK  ] Created slice User and Session Slice.</span><br><span class="line">[  OK  ] Reached target Slices.</span><br><span class="line">[  OK  ] Listening on Journal Socket.</span><br><span class="line">         Mounting Kernel Debug File System...</span><br><span class="line">         Starting Journal Service...</span><br><span class="line">         Mounting POSIX Message Queue File System...</span><br><span class="line">         Starting Mount partitions...</span><br><span class="line">         Starting Create list of required st��…ce nodes for the current kernel...</span><br><span class="line">         Starting udev Coldplug all Devices...</span><br><span class="line">         Starting Apply Kernel Variables...</span><br><span class="line">         Mounting FUSE Control File System...</span><br><span class="line">         Mounting Kernel Configuration File System...</span><br><span class="line">         Starting Remount Root and Kernel File Systems...</span><br><span class="line">         Mounting Temporary Directory (&#x2F;tmp)...</span><br><span class="line">[  OK  ] Listening on Process Core Dump Socket.</span><br><span class="line">[  OK  ] Created slice system-serial\x2dgetty.slice.</span><br><span class="line">[  OK  ] Started Journal Service.</span><br><span class="line">[  OK  ] Mounted Kernel Debug File System.</span><br><span class="line">[  OK  ] Mounted POSIX Message Queue File System.</span><br><span class="line">[  OK  ] Started Mount partitions.</span><br><span class="line">[  OK  ] Started Create list of required sta��…vice nodes for the current kernel.</span><br><span class="line">[  OK  ] Started Apply Kernel Variables.</span><br><span class="line">[  OK  ] Mounted FUSE Control File System.</span><br><span class="line">[  OK  ] Mounted Kernel Configuration File System.</span><br><span class="line">[  OK  ] Started Remount Root and Kernel File Systems.</span><br><span class="line">[  OK  ] Mounted Temporary Directory (&#x2F;tmp).</span><br><span class="line">         Starting Create Static Device Nodes in &#x2F;dev...</span><br><span class="line">         Starting Flush Journal to Persistent Storage...</span><br><span class="line">[   18.106096] systemd-journald[130]: Received request to flush runtime journal from PID 1</span><br><span class="line">[  OK  ] Started Flush Journal to Persistent Storage.</span><br><span class="line">[  OK  ] Started udev Coldplug all Devices.</span><br><span class="line">[  OK  ] Started Create Static Device Nodes in &#x2F;dev.</span><br><span class="line">         Starting udev Kernel Device Manager...</span><br><span class="line">[  OK  ] Reached target Local File Systems (Pre).</span><br><span class="line">[  OK  ] Reached target Containers.</span><br><span class="line">         Mounting &#x2F;var&#x2F;volatile...</span><br><span class="line">[  OK  ] Mounted &#x2F;var&#x2F;volatile.</span><br><span class="line">         Starting Load&#x2F;Save Random Seed...</span><br><span class="line">[  OK  ] Reached target Local File Systems.</span><br><span class="line">         Starting Create Volatile Files and Directories...</span><br><span class="line">[  OK  ] Started Load&#x2F;Save Random Seed.</span><br><span class="line">[  OK  ] Started udev Kernel Device Manager.</span><br><span class="line">[  OK  ] Started Create Volatile Files and Directories.</span><br><span class="line"></span><br><span class="line">ST OpenSTLinux - EGLfs - (A Yocto Project Based Distro) 2.6-snapshot stm32mp1-cp ttySTM0</span><br><span class="line"></span><br><span class="line">stm32mp1-cp login: root (automatic login)</span><br><span class="line"></span><br><span class="line">root@stm32mp1-cp:~#</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MP1: Boot kernel via TFTP from U-Boot</title>
    <url>/2020-02-16/STM32MP1-Boot-kernel-via-TFTP-from-U-Boot/</url>
    <content><![CDATA[<p>Today I just managed to boot kernel via TFTP on STM32MP1 board but steps I go through are quite different with i.MX8. Thus, I think there is a necessity to have a short note about this 🖋</p>
<a id="more"></a>

<h2 id="Pre-requirements"><a href="#Pre-requirements" class="headerlink" title="Pre-requirements"></a>Pre-requirements</h2><ul>
<li>TFTP server on PC is up and running(<a href="https://lzqblog.top/2019-05-26/i-MX-setup-TFTP-and-NFS/">Check here</a>)</li>
<li>Board and PC are in same LAN</li>
</ul>
<h2 id="TFTP-folder"><a href="#TFTP-folder" class="headerlink" title="TFTP folder"></a>TFTP folder</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/data/srv/tftp$ tree</span><br><span class="line">.</span><br><span class="line">├── pxelinux.cfg</span><br><span class="line">│   └── 01-e2-a4-06-a5-8f-7f</span><br><span class="line">├── stm32mp157a-cp.dtb</span><br><span class="line">└── uImage</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure>
<p>U-Boot will use <code>pxe</code> command to load PXE configuration file from TFTP server(PC in my scenario). PXE configuration file has the same format with <em>extlinux.conf</em>, and the file name is related to hardware MAC address. In my case <span style="color:red"><em>01-e2-a4-06-a5-8f-7f</em></span>:</p>
<ul>
<li>01: ARP type 1 for ethernet</li>
<li>e2-a4-06-a5-8f-7f: MAC address</li>
</ul>
<p>Inside my PXE configuration file(01-e2-a4-06-a5-8f-7f):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu title Select the boot mode</span><br><span class="line"> DEFAULT eMMC</span><br><span class="line"> TIMEOUT 20</span><br><span class="line"> LABEL initramfs</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb</span><br><span class="line"> 	INITRD uInitrd</span><br><span class="line"> 	APPEND rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br><span class="line"> LABEL nfs</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb</span><br><span class="line"> 	APPEND root&#x3D;&#x2F;dev&#x2F;nfs nfsroot&#x3D;192.168.0.106:&#x2F;nfsroot ip&#x3D;dhcp rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br><span class="line"> LABEL sdcard</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb</span><br><span class="line"> 	APPEND root&#x3D;&#x2F;dev&#x2F;mmcblk0p6 rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br><span class="line"> LABEL eMMC</span><br><span class="line"> 	KERNEL uImage</span><br><span class="line"> 	FDT stm32mp157a-cp.dtb</span><br><span class="line"> 	APPEND root&#x3D;&#x2F;dev&#x2F;mmcblk1p6 rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br></pre></td></tr></table></figure>
<p>With this configuration file we could choose in U-Boot where to load rootfs when booting.</p>
<h2 id="U-Boot"><a href="#U-Boot" class="headerlink" title="U-Boot"></a>U-Boot</h2><p>After TFTP server and folder are ready, we can proceed on U-Boot. If <code>CONFIG_NET_RANDOM_ETHADDR</code> has not been set in uboot defconfig or MAC address haven’t been configured before, we might need to setup MAC address(<span style="color:red"><em>ethaddr</em></span>) manually. Meanwhile <span style="color:red"><em>serverip</em></span> need to be set as well:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env set ethaddr e2:a4:06:a5:8f:7f</span><br><span class="line">env set serverip 192.168.0.106</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure>
<p>After that we only need to <code>run bootcmd_pxe</code> if we want to load kernel from TFTP:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hit any key to stop autoboot:  0 </span><br><span class="line">STM32MP&gt; run bootcmd_pxe</span><br><span class="line">ethernet@5800a000 Waiting for PHY auto negotiation to complete. done</span><br><span class="line">BOOTP broadcast 1</span><br><span class="line">DHCP client bound to address 192.168.0.101 (2 ms)</span><br><span class="line">missing environment variable: pxeuuid</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: pxelinux.cfg&#x2F;01-e2-a4-06-a5-8f-7f</span><br><span class="line">Using ethernet@5800a000 device</span><br><span class="line">TFTP from server 192.168.0.106; our IP address is 192.168.0.101</span><br><span class="line">Filename &#39;pxelinux.cfg&#x2F;01-e2-a4-06-a5-8f-7f&#39;.</span><br><span class="line">Load address: 0xc4200000</span><br><span class="line">Loading: #</span><br><span class="line">         8.8 KiB&#x2F;s</span><br><span class="line">done</span><br><span class="line">Bytes transferred &#x3D; 608 (260 hex)</span><br><span class="line">Config file found</span><br><span class="line">Select the boot mode</span><br><span class="line">1:      initramfs</span><br><span class="line">2:      nfs</span><br><span class="line">3:      sdcard</span><br><span class="line">4:      eMMC</span><br><span class="line">Enter choice: 4:        eMMC</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: uImage</span><br><span class="line">Using ethernet@5800a000 device</span><br><span class="line">TFTP from server 192.168.0.106; our IP address is 192.168.0.101</span><br><span class="line">Filename &#39;uImage&#39;.</span><br><span class="line">Load address: 0xc2000000</span><br><span class="line">Loading: #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         ##################T ###############################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         #################################################################</span><br><span class="line">         ##############################################################</span><br><span class="line">         265.6 KiB&#x2F;s</span><br><span class="line">done</span><br><span class="line">Bytes transferred &#x3D; 6640192 (655240 hex)</span><br><span class="line">append: root&#x3D;&#x2F;dev&#x2F;mmcblk1p6 rootwait rw earlyprintk console&#x3D;ttySTM0,115200</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: stm32mp157a-cp.dtb</span><br><span class="line">Using ethernet@5800a000 device</span><br><span class="line">TFTP from server 192.168.0.106; our IP address is 192.168.0.101</span><br><span class="line">Filename &#39;stm32mp157a-cp.dtb&#39;.</span><br><span class="line">Load address: 0xc4000000</span><br><span class="line">Loading: #############</span><br><span class="line">         188.5 KiB&#x2F;s</span><br><span class="line">done</span><br><span class="line">Bytes transferred &#x3D; 62891 (f5ab hex)</span><br><span class="line">## Booting kernel from Legacy Image at c2000000 ...</span><br><span class="line">   Image Name:   Linux-4.19.49</span><br><span class="line">   Created:      2019-06-09   7:17:25 UTC</span><br><span class="line">   Image Type:   ARM Linux Kernel Image (uncompressed)</span><br><span class="line">   Data Size:    6640128 Bytes &#x3D; 6.3 MiB</span><br><span class="line">   Load Address: c2000040</span><br><span class="line">   Entry Point:  c2000040</span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line">## Flattened Device Tree blob at c4000000</span><br><span class="line">   Booting using the fdt blob at 0xc4000000</span><br><span class="line">   XIP Kernel Image ... OK</span><br><span class="line">   Using Device Tree in place at c4000000, end c40125aa</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br><span class="line"></span><br><span class="line">[    0.000000] Booting Linux on physical CPU 0x0</span><br><span class="line">[    0.000000] Linux version 4.19.49 (oe-user@oe-host) (gcc version 8.2.0 (GCC)) #1 SMP PREEMPT Sun Jun 9</span><br><span class="line">[    0.000000] CPU: ARMv7 Processor [410fc075] revision 5 (ARMv7), cr&#x3D;10c5387d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>U-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>GCC: __attribute__ ((__packed__))</title>
    <url>/2020-02-11/GCC-attribute-packed/</url>
    <content><![CDATA[<blockquote>
<p>It specifies that a member field has the smallest possible alignment. That is, one byte for a variable field, and one bit for a bitfield, unless you specify a larger value with the aligned attribute.</p>
</blockquote>
<a id="more"></a>

<h2 id="Data-alignment-and-data-structure-padding"><a href="#Data-alignment-and-data-structure-padding" class="headerlink" title="Data alignment and data structure padding"></a>Data alignment and data structure padding</h2><p>GCC will enable structure padding by default, i.e. we have a structure like this:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test_struct</span> <span class="title">test_data</span>;</span></span><br></pre></td></tr></table></figure>

<p><code>sizeof(test_data)</code> will be <span style="color:red">8</span> due to structure padded to to 4-byte alignment: 1(char a) + 1(char b) + <span style="color:red"><strong>2(added)</strong></span>  + 4(int c).</p>
<h2 id="attribute-packed"><a href="#attribute-packed" class="headerlink" title="attribute ((packed))"></a><strong>attribute</strong> ((<strong>packed</strong>))</h2><p>GCC provides us a way to disable structure padding, i.e. we have a structure like this:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125; __attribute__((__packed__));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test_struct</span> <span class="title">test_data</span>;</span></span><br></pre></td></tr></table></figure>

<p><code>sizeof(test_data)</code> will be <span style="color:red">6</span>: 1(char a) + 1(char b) + 4(int c). With this some memory can be saved.</p>
<p>We also can use <code>__attribute__((packed, aligned(X)))</code> to specify padding size(X should be powers of 2):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">char</span> d;</span><br><span class="line">&#125; __attribute__((packed, aligned(<span class="number">2</span>)));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test_struct</span> <span class="title">test_data</span>;</span></span><br></pre></td></tr></table></figure>

<p><code>sizeof(test_data)</code> will be <span style="color:red">8</span>: 1(char a) + 1(char b) + 4(int c) + 1(char d) + <span style="color:red"><strong>1(added)</strong></span></p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5 Getting Started</title>
    <url>/2020-02-07/PyQt5-Getting-Started/</url>
    <content><![CDATA[<p>Recently I start to evaluate the feasibility of porting one old C++ Qt4 project to PyQt5 since Python is more friendly for some engineers.</p>
<a id="more"></a>

<p>The following steps was test on Ubuntu.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install PyQt5</span><br></pre></td></tr></table></figure>

<p>If you haven’t install Qt Designer yet, we’d like to suggest install it as well:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install qttools5-dev-tools</span><br></pre></td></tr></table></figure>

<h2 id="The-first-PyQt5-program"><a href="#The-first-PyQt5-program" class="headerlink" title="The first PyQt5 program"></a>The first PyQt5 program</h2><p>After installation, we can perform a quick check by a simple PyQt5 program:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QLabel</span><br><span class="line"></span><br><span class="line">app=QApplication(sys.argv)</span><br><span class="line">label = QLabel(<span class="string">'Hello PyQt5!'</span>)</span><br><span class="line">label.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>We could see a simple window with a label on it after executing this simple code:</p>
<p><img src="/2020-02-07/PyQt5-Getting-Started/hello.png" alt></p>
<p>In this code we created a <code>QApplication</code> and run the event loop via <code>exec_()</code> method.</p>
<h2 id="Using-Qt-Designer-to-design-UI"><a href="#Using-Qt-Designer-to-design-UI" class="headerlink" title="Using Qt Designer to design UI"></a>Using Qt Designer to design UI</h2><p>In the first example we “designed” an application UI by coding, but in real project we have much more complicated UI for applications which is hard to design without UI designer. For PyQt5, we could use Qt Designer to design UI as before but we need one tiny utility to transform <span style="color:red">*.ui</span> file into python code.</p>
<p>i.e. If we drawn a simple UI like this in Qt Designer and save it as <span style="color:red">test.ui</span>:</p>
<p><img src="/2020-02-07/PyQt5-Getting-Started/ui.png" alt></p>
<p>Then we use <span style="color:red">pyuic5</span> to generate python code from <span style="color:red">test.ui</span>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyuic5 test.ui -o test_ui.py</span><br></pre></td></tr></table></figure>

<p>Then we can get <strong>test_ui.py</strong>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'test.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.14.1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">502</span>, <span class="number">376</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton.setGeometry(QtCore.QRect(<span class="number">190</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">25</span>))</span><br><span class="line">        self.pushButton.setObjectName(<span class="string">"pushButton"</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">502</span>, <span class="number">22</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br><span class="line">        self.menuFile = QtWidgets.QMenu(self.menubar)</span><br><span class="line">        self.menuFile.setObjectName(<span class="string">"menuFile"</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line">        self.actionasd = QtWidgets.QAction(MainWindow)</span><br><span class="line">        self.actionasd.setObjectName(<span class="string">"actionasd"</span>)</span><br><span class="line">        self.menuFile.addAction(self.actionasd)</span><br><span class="line">        self.menubar.addAction(self.menuFile.menuAction())</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"MainWindow"</span>))</span><br><span class="line">        self.pushButton.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"PushButton"</span>))</span><br><span class="line">        self.menuFile.setTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"File"</span>))</span><br><span class="line">        self.actionasd.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"Open"</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Quick-test-with-clicked-event"><a href="#Quick-test-with-clicked-event" class="headerlink" title="Quick test with clicked event"></a>Quick test with clicked event</h2><p>Then we can start coding with this file by inheriting <code>class Ui_MainWindow</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> test_ui <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMainWindow</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyMainWindow, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.pushButton.clicked.connect(self.onBtnClicked)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onBtnClicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Button Clicked:"</span> + self.sender().objectName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = QApplication([])</span><br><span class="line">mainWindow = MyMainWindow()</span><br><span class="line"></span><br><span class="line">mainWindow.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
<p>Here we defined a <code>class MyMainWindow</code> which inheriting from <code>QMainWindow</code> and <code>Ui_MainWindow</code>, then we defined <code>__init__</code> method which will <code>setupUi</code> and binding button clicked event with <code>onBtnClicked</code>. When <strong>pushButton</strong> was clicked, we can see output in terminal:<br><img src="/2020-02-07/PyQt5-Getting-Started/btn_clicked.png" alt></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So far we still not sure about the performance differences between Qt(C++) and PyQt5 but as far as I can see PyQt5 could be one of the options for those engineers who is not very good at C++.</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Qt5</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建简明教程(特供版)</title>
    <url>/2020-01-31/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B-%E7%89%B9%E4%BE%9B%E7%89%88/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="c752959d82bbac308125abb51871afa100d1b8786d41be497f64e8614c87c45f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Roman to Integer</title>
    <url>/2020-01-29/Algorithm-Puzzles-Roman-to-Integer/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Roman to Integer</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:<br>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>
<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>
<p>I can be placed before V (5) and X (10) to make 4 and 9.<br><br>X can be placed before L (50) and C (100) to make 40 and 90.<br><br>C can be placed before D (500) and M (1000) to make 400 and 900.<br><br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.<br></p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> iter = s.begin(); iter != s.end(); ++iter) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (*iter) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (*(iter + <span class="number">1</span>) == <span class="string">'V'</span>) &#123;</span><br><span class="line">                        ret += <span class="number">4</span>;</span><br><span class="line">                        ++iter;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*(iter + <span class="number">1</span>) == <span class="string">'X'</span>) &#123;</span><br><span class="line">                        ret += <span class="number">9</span>;</span><br><span class="line">                        ++iter;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ret += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'V'</span>:</span><br><span class="line">                    ret += <span class="number">5</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (*(iter + <span class="number">1</span>) == <span class="string">'L'</span>) &#123;</span><br><span class="line">                        ret += <span class="number">40</span>;</span><br><span class="line">                        ++iter;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*(iter + <span class="number">1</span>) == <span class="string">'C'</span>) &#123;</span><br><span class="line">                        ret += <span class="number">90</span>;</span><br><span class="line">                        ++iter;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ret += <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                    ret += <span class="number">50</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (*(iter + <span class="number">1</span>) == <span class="string">'D'</span>) &#123;</span><br><span class="line">                        ret += <span class="number">400</span>;</span><br><span class="line">                        ++iter;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*(iter + <span class="number">1</span>) == <span class="string">'M'</span>) &#123;</span><br><span class="line">                        ret += <span class="number">900</span>;</span><br><span class="line">                        ++iter;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ret += <span class="number">100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    ret += <span class="number">500</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                    ret += <span class="number">1000</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p>Runtime beats 98.55% in all cpp submissions:<br><img src="/2020-01-29/Algorithm-Puzzles-Roman-to-Integer/s1.png" alt></p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Integer to Roman</title>
    <url>/2020-01-27/Algorithm-Puzzles-Integer-to-Roman/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Integer to Roman</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>
<p>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>
<p>I can be placed before V (5) and X (10) to make 4 and 9.<br><br>X can be placed before L (50) and C (100) to make 40 and 90.<br><br>C can be placed before D (500) and M (1000) to make 400 and 900.<br><br>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.<br></p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> bitRet = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">            bitRet = num / <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitRet; ++i) &#123;</span><br><span class="line">                ret += <span class="string">"M"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num %= <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            bitRet = num / <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">if</span> (bitRet == <span class="number">9</span>) &#123;</span><br><span class="line">                ret += <span class="string">"CM"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bitRet == <span class="number">4</span>) &#123;</span><br><span class="line">                ret += <span class="string">"CD"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bitRet &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    ret += <span class="string">"D"</span>;</span><br><span class="line">                    bitRet -= <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitRet; ++i) &#123;</span><br><span class="line">                    ret += <span class="string">"C"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num %= <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            bitRet = num / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (bitRet == <span class="number">9</span>) &#123;</span><br><span class="line">                ret += <span class="string">"XC"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bitRet == <span class="number">4</span>) &#123;</span><br><span class="line">                ret += <span class="string">"XL"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bitRet &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    ret += <span class="string">"L"</span>;</span><br><span class="line">                    bitRet -= <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitRet; ++i) &#123;</span><br><span class="line">                    ret += <span class="string">"X"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            bitRet = num;</span><br><span class="line">            <span class="keyword">if</span> (bitRet == <span class="number">9</span>) &#123;</span><br><span class="line">                ret += <span class="string">"IX"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bitRet == <span class="number">4</span>) &#123;</span><br><span class="line">                ret += <span class="string">"IV"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bitRet &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    ret += <span class="string">"V"</span>;</span><br><span class="line">                    bitRet -= <span class="number">5</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitRet; ++i) &#123;</span><br><span class="line">                    ret += <span class="string">"I"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2020-01-27/Algorithm-Puzzles-Integer-to-Roman/s1.png" alt></p>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> M[] = &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> C[] = &#123;<span class="string">""</span>,  <span class="string">"C"</span>,  <span class="string">"CC"</span>,  <span class="string">"CCC"</span>,  <span class="string">"CD"</span>,</span><br><span class="line">                            <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> X[] = &#123;<span class="string">""</span>,  <span class="string">"X"</span>,  <span class="string">"XX"</span>,  <span class="string">"XXX"</span>,  <span class="string">"XL"</span>,</span><br><span class="line">                            <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> I[] = &#123;<span class="string">""</span>,  <span class="string">"I"</span>,  <span class="string">"II"</span>,  <span class="string">"III"</span>,  <span class="string">"IV"</span>,</span><br><span class="line">                            <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> M[num / <span class="number">1000</span>] + C[(num % <span class="number">1000</span>) / <span class="number">100</span>] + X[(num % <span class="number">100</span>) / <span class="number">10</span>] +</span><br><span class="line">               I[num % <span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2020-01-27/Algorithm-Puzzles-Integer-to-Roman/s2.png" alt></p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Container With Most Water</title>
    <url>/2020-01-26/Algorithm-Puzzles-Container-With-Most-Water/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Container With Most Water</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p>Note: You may not slant the container and n is at least 2.</p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><p>This puzzle can be easily solved by exhaustion method but time complexity is <strong>O(N^2)</strong>. A better approach will be using “compress window“：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> length = height.size();</span><br><span class="line">        <span class="keyword">int</span> currentMax = <span class="number">0</span>, windowLeft = <span class="number">0</span>, windowRight = length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (windowLeft &lt; windowRight) &#123;</span><br><span class="line">            currentMax = <span class="built_in">std</span>::max(</span><br><span class="line">                currentMax, <span class="built_in">std</span>::min(height[windowLeft], height[windowRight]) *</span><br><span class="line">                                (windowRight - windowLeft));</span><br><span class="line">            <span class="keyword">if</span> (height[windowLeft] &lt; height[windowRight]) &#123;</span><br><span class="line">                ++windowLeft;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --windowRight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentMax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Here time complexity is <strong>O(N)</strong><br><img src="/2020-01-26/Algorithm-Puzzles-Container-With-Most-Water/s1.png" alt></p>
<p>Try to use iterator:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> iterL = height.cbegin();</span><br><span class="line">        <span class="keyword">auto</span> iterR = height.cend() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterL &lt; iterR) &#123;</span><br><span class="line">            currentMax =</span><br><span class="line">                <span class="built_in">std</span>::max(currentMax, <span class="built_in">std</span>::min(*iterL, *iterR) *</span><br><span class="line">                                         (<span class="keyword">int</span>)<span class="built_in">std</span>::distance(iterL, iterR));</span><br><span class="line">            <span class="keyword">if</span> (*iterL &lt; *iterR) &#123;</span><br><span class="line">                ++iterL;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --iterR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentMax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/2020-01-26/Algorithm-Puzzles-Container-With-Most-Water/s2.png" alt></p>
<p>Bravo!</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Regular Expression Matching</title>
    <url>/2020-01-05/Algorithm-Puzzles-Regular-Expression-Matching/</url>
    <content><![CDATA[<p><del>每天</del> <del>每周</del> 偶尔一道算法题： 正则表达式匹配</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Given an input string (s) and a pattern (p), implement regular expression matching with support for ‘.’ and ‘*’.</p>
<p>‘.’ Matches any single character.<br><br>‘*’ Matches zero or more of the preceding element.<br><br>The matching should cover the entire input string (not partial).</p>
<p>Note:</p>
<p>s could be empty and contains only lowercase letters a-z.<br><br>p could be empty and contains only lowercase letters a-z, and characters like . or *.</p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><p>其实一开始我是打算用c++自带的正则表达式库的，敲完<code>#include &lt;regex&gt;</code>后觉得这样不太好，毕竟是在做算法题</p>
<p><img src="/2020-01-05/Algorithm-Puzzles-Regular-Expression-Matching/Onn.png" alt></p>
<p>那就暴力流来一波！首先考虑没有通配符的情况下, 比较完一位再比较下一位，很自然地想到递归：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> <span class="built_in">string</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (s[<span class="number">0</span>] == p[<span class="number">0</span>]) &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>加上通配符<strong>“.”</strong>的情况也比较容易，只需要检查一下字符串在该位有字符即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> <span class="built_in">string</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> currentMatch = (s[<span class="number">0</span>] == p[<span class="number">0</span>]) || (p[<span class="number">0</span>] == <span class="string">'.'</span> &amp;&amp; !s.empty());</span><br><span class="line">        <span class="keyword">return</span> currentMatch &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后是通配符<strong>“*“</strong>,这个有点麻烦需要去搜字符串后面几位，匹配0次的情况即<code>return isMatch(s, p.substr(2))</code>，直接跳过当前字符后后面的”*”, 匹配1次的情况即<code>return (currentMatch &amp;&amp; isMatch(s.substr(1), p))</code>, 把待匹配字符串后移一位，然后继续递归：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> <span class="built_in">string</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> currentMatch = (s[<span class="number">0</span>] == p[<span class="number">0</span>]) || (p[<span class="number">0</span>] == <span class="string">'.'</span> &amp;&amp; !s.empty());</span><br><span class="line">        <span class="keyword">if</span> (p[<span class="number">1</span>] == <span class="string">'*'</span> &amp;&amp; p.length() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> isMatch(s, p.substr(<span class="number">2</span>)) ||</span><br><span class="line">                   (currentMatch &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentMatch &amp;&amp; isMatch(s.substr(<span class="number">1</span>), p.substr(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>试了几个测试例，感觉还行哈~~</p>
<p><img src="/2020-01-05/Algorithm-Puzzles-Regular-Expression-Matching/baoli.jpg" alt></p>
<p>然后提交完结果出来了：</p>
<p><img src="/2020-01-05/Algorithm-Puzzles-Regular-Expression-Matching/s1.png" alt></p>
<p>看来我还是too naive…</p>
<p><img src="/2020-01-05/Algorithm-Puzzles-Regular-Expression-Matching/meijianguo.jpeg" alt></p>
<p>看了下提示，大意是用动态规划，先写状态转移方程:<br>定义dp[i][j] 在 s[0,i-1]和p[0,j-1]匹配时为正，反之为假</p>
<ul>
<li>当没有通配符<strong>*</strong>时：dp[i][j] = dp[i-1][j-1] &amp;&amp; (s[i-1] == p[j-1])</li>
<li>当有通配符<strong>*</strong>时:<ul>
<li>重复0次：dp[i][j] = dp[i][j-2]</li>
<li>重复1次：dp[i][j] = dp[i-1][j] &amp;&amp; (s[i-1] == p[j-2])</li>
</ul>
</li>
</ul>
<p>贴一下代码(这里优化了一下，照着上面的写空间复杂度会到O(i*j), 下面的为O(N))</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> <span class="built_in">string</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length(), n = p.length();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; dp(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> pre = dp[<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = !i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">bool</span> temp = dp[j];</span><br><span class="line">                <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line">                    dp[j] = dp[j - <span class="number">2</span>] || (i &amp;&amp; dp[j] &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">2</span>] || p[j - <span class="number">2</span>] == <span class="string">'.'</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[j] = i &amp;&amp; pre &amp;&amp; (s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">'.'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                pre = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2020-01-05/Algorithm-Puzzles-Regular-Expression-Matching/s2.png" alt></p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto rtl8811 wifi adapter bring up</title>
    <url>/2019-12-21/Yocto-rtl8811-wifi-adapter-bring-up/</url>
    <content><![CDATA[<p>Brief notes about bring up rtl8811 and wlan0 on STM32MP1</p>
<a id="more"></a>

<h2 id="rtl8811-driver"><a href="#rtl8811-driver" class="headerlink" title="rtl8811 driver"></a>rtl8811 driver</h2><p>There is an open source driver on <a href="https://github.com/abperiasamy/rtl8812AU_8821AU_linux" target="_blank" rel="noopener">Github</a> and I have verified <em>4235b0ec7d7220a6364586d8e25b1e8cb99c36f1</em> works well on my ubuntu PC. But to make it work in yocto, we need a patch to its makefile since it’s not designed as a yocto kernel module:</p>
<p><em>0001-modify-makefile-to-support-yocto.patch</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">From 0bc225d55b3e4e2269519b699f972401c227bc0c Mon Sep 17 00:00:00 2001</span><br><span class="line">From: &quot;Alex.Don.Scofield&quot; &lt;lizhiqin46783937@live.com&gt;</span><br><span class="line">Date: Sun, 15 Dec 2019 22:08:04 +0800</span><br><span class="line">Subject: [PATCH] modify makefile to support yocto</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"> Makefile | 9 +++++++--</span><br><span class="line"> 1 file changed, 7 insertions(+), 2 deletions(-)</span><br><span class="line"></span><br><span class="line">diff --git a&#x2F;Makefile b&#x2F;Makefile</span><br><span class="line">index dc027f3..8de8dfd 100644</span><br><span class="line">--- a&#x2F;Makefile</span><br><span class="line">+++ b&#x2F;Makefile</span><br><span class="line">@@ -893,10 +893,12 @@ ifndef KVER</span><br><span class="line"> KVER ?&#x3D; $(shell uname -r)</span><br><span class="line"> endif</span><br><span class="line"> ifndef KSRC</span><br><span class="line">-KSRC :&#x3D; &#x2F;lib&#x2F;modules&#x2F;$(KVER)&#x2F;build</span><br><span class="line">+# KSRC :&#x3D; &#x2F;lib&#x2F;modules&#x2F;$(KVER)&#x2F;build</span><br><span class="line">+KSRC :&#x3D; $(KERNEL_SRC)</span><br><span class="line"> endif</span><br><span class="line"> ifndef MODDESTDIR</span><br><span class="line">-MODDESTDIR :&#x3D; &#x2F;lib&#x2F;modules&#x2F;$(KVER)&#x2F;kernel&#x2F;drivers&#x2F;net&#x2F;wireless&#x2F;</span><br><span class="line">+# MODDESTDIR :&#x3D; &#x2F;lib&#x2F;modules&#x2F;$(KVER)&#x2F;kernel&#x2F;drivers&#x2F;net&#x2F;wireless&#x2F;</span><br><span class="line">+MODDESTDIR :&#x3D; $(O)</span><br><span class="line"> endif</span><br><span class="line"> INSTALL_PREFIX :&#x3D;</span><br><span class="line"> endif</span><br><span class="line">@@ -1621,6 +1623,9 @@ all: modules</span><br><span class="line"> modules:</span><br><span class="line"> 	$(MAKE) ARCH&#x3D;$(ARCH) CROSS_COMPILE&#x3D;$(CROSS_COMPILE) -C $(KSRC) M&#x3D;$(shell pwd)  modules</span><br><span class="line"> </span><br><span class="line">+modules_install:</span><br><span class="line">+	$(MAKE) ARCH&#x3D;$(ARCH) CROSS_COMPILE&#x3D;$(CROSS_COMPILE) -C $(KSRC) M&#x3D;$(shell pwd)  modules_install</span><br><span class="line">+</span><br><span class="line"> strip:</span><br><span class="line"> 	$(CROSS_COMPILE)strip $(MODULE_NAME).ko --strip-unneeded</span><br><span class="line"> </span><br><span class="line">-- </span><br><span class="line">2.17.1</span><br></pre></td></tr></table></figure>
<p>Then we create recipes for it(<em>kernel-module-rtl8812au_0.1.bb</em>):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUMMARY &#x3D; &quot;Driver for rtl8811au&#x2F;8812au&#x2F;8821au&quot;</span><br><span class="line">LICENSE &#x3D; &quot;GPL-2.0&quot;</span><br><span class="line">PV &#x3D; &quot;0.1&quot;</span><br><span class="line">LIC_FILES_CHKSUM &#x3D; &quot;file:&#x2F;&#x2F;$&#123;COMMON_LICENSE_DIR&#125;&#x2F;GPL-2.0;md5&#x3D;801f80980d171dd6425610833a22dbe6&quot;</span><br><span class="line"></span><br><span class="line">inherit module</span><br><span class="line"></span><br><span class="line">$&#123;PN&#125;_REPO &#x3D; &quot;github.com&#x2F;abperiasamy&#x2F;rtl8812AU_8821AU_linux.git&quot;</span><br><span class="line">SRCREV_$&#123;PN&#125; &#x3D; &quot;4235b0ec7d7220a6364586d8e25b1e8cb99c36f1&quot;</span><br><span class="line"></span><br><span class="line">SRC_URI &#x3D; &quot; \</span><br><span class="line">  git:&#x2F;&#x2F;$&#123;$&#123;PN&#125;_REPO&#125;;name&#x3D;$&#123;PN&#125;;protocol&#x3D;https;nobranch&#x3D;1;destsuffix&#x3D;git&#x2F;$&#123;PN&#125; \</span><br><span class="line">  file:&#x2F;&#x2F;0001-modify-makefile-to-support-yocto.patch \</span><br><span class="line">  &quot;</span><br><span class="line"></span><br><span class="line">S &#x3D; &quot;$&#123;WORKDIR&#125;&#x2F;git&#x2F;$&#123;PN&#125;&quot;</span><br><span class="line"></span><br><span class="line">RPROVIDES_$&#123;PN&#125; +&#x3D; &quot;kernel-module-rtl8812au&quot;</span><br></pre></td></tr></table></figure>

<p>Add it to image recipe and flash built image into target, kernel module will be installed at <em>/lib/modules/${KERNEL_VERSION}/extra/rtl8812au.ko</em>. If it has been proper init, you can see those logs in <strong>dmesg</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[    8.321575] RTL871X: module init start</span><br><span class="line">[    8.354748] RTL871X: rtl8812au v4.3.14_13455.20150212_BTCOEX20150128-51</span><br><span class="line">[    8.359924] RTL871X: rtl8812au BT-Coex version &#x3D; BTCOEX20150128-51</span><br><span class="line">[    8.586779] RTL871X: rtw_ndev_init(wlan0)</span><br><span class="line">[    8.607811] usbcore: registered new interface driver rtl8812au</span><br><span class="line">[    8.612202] RTL871X: module init ret&#x3D;0</span><br></pre></td></tr></table></figure>
<h2 id="wpa-supplicant"><a href="#wpa-supplicant" class="headerlink" title="wpa-supplicant"></a>wpa-supplicant</h2><p>If we use <strong>wpa-supplicant</strong> to manage and config wifi, we need to have a <strong>*.network</strong> file under <strong>/lib/systemd/network/</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Match]</span><br><span class="line">Name&#x3D;wlan0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">DHCP&#x3D;ipv4</span><br></pre></td></tr></table></figure>

<p>and a we also need a config file for wpa-supplicant:</p>
<p><em>/etc/wpa_supplicant/wpa_supplicant-wlan0.conf</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl_interface&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant</span><br><span class="line">eapol_version&#x3D;1</span><br><span class="line">ap_scan&#x3D;1</span><br><span class="line">fast_reauth&#x3D;1</span><br><span class="line"></span><br><span class="line">network&#x3D;&#123;</span><br><span class="line">    ssid&#x3D;&quot;WIFI SSID&quot;</span><br><span class="line">    psk&#x3D;&quot;WIFI PASSWD&quot;</span><br><span class="line">    priority&#x3D;5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we want wlan be ready after system booting, we need to append wpa-supplicant. Create <em>wpa-supplicant_%.bbappend</em>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FILESEXTRAPATHS_prepend :&#x3D; &quot;$&#123;THISDIR&#125;&#x2F;$&#123;PN&#125;:&quot;</span><br><span class="line"></span><br><span class="line">SRC_URI +&#x3D; &quot; \</span><br><span class="line">    file:&#x2F;&#x2F;51-wlan.network \</span><br><span class="line">    file:&#x2F;&#x2F;wpa_supplicant-wlan0.conf \</span><br><span class="line">    &quot;</span><br><span class="line">FILES_$&#123;PN&#125; +&#x3D; &quot; \</span><br><span class="line">    $&#123;systemd_unitdir&#125;&#x2F;network&#x2F;51-wlan.network \</span><br><span class="line">    $&#123;sysconfdir&#125;&#x2F;wpa_supplicant&#x2F;wpa_supplicant-wlan0.conf \</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">SYSTEMD_AUTO_ENABLE &#x3D; &quot;enable&quot;</span><br><span class="line">SYSTEMD_SERVICE_$&#123;PN&#125;_append &#x3D; &quot; wpa_supplicant@wlan0.service&quot;</span><br><span class="line"></span><br><span class="line">do_install_append() &#123;</span><br><span class="line">    install -d $&#123;D&#125;$&#123;sysconfdir&#125;&#x2F;wpa_supplicant&#x2F;</span><br><span class="line">    install -m 0600 $&#123;WORKDIR&#125;&#x2F;wpa_supplicant-wlan0.conf $&#123;D&#125;$&#123;sysconfdir&#125;&#x2F;wpa_supplicant&#x2F;</span><br><span class="line"></span><br><span class="line">    if $&#123;@bb.utils.contains(&#39;DISTRO_FEATURES&#39;,&#39;systemd&#39;,&#39;true&#39;,&#39;false&#39;,d)&#125;; then</span><br><span class="line">        install -d $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;network&#x2F;</span><br><span class="line">        install -m 0644 $&#123;WORKDIR&#125;&#x2F;51-wlan.network $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;network&#x2F;</span><br><span class="line"></span><br><span class="line">        install -d $&#123;D&#125;$&#123;sysconfdir&#125;&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;</span><br><span class="line">        ln -s $&#123;systemd_unitdir&#125;&#x2F;system&#x2F;wpa_supplicant@.service \</span><br><span class="line">        $&#123;D&#125;$&#123;sysconfdir&#125;&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;wpa_supplicant@wlan0.service</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Under Maintenance</title>
    <url>/2019-12-13/Under-Maintenance/</url>
    <content><![CDATA[<p>Website is currently under maintenance since some new features I have enabled recently might cause some performance issues(i.e. loading too slow)…</p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux USB gadget configfs</title>
    <url>/2019-12-07/Linux-USB-gadget-configfs/</url>
    <content><![CDATA[<p>Using configs we can easily set up usb gadget in user space. You even can make your board as a compound USB device, just by few commands.</p>
<a id="more"></a>

<h2 id="Enable-and-mount-configfs"><a href="#Enable-and-mount-configfs" class="headerlink" title="Enable and mount configfs"></a>Enable and mount configfs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe libcomposite</span><br><span class="line">mount -t configfs configfs /sys/kernel/config</span><br></pre></td></tr></table></figure>

<h2 id="Create-gadget-s"><a href="#Create-gadget-s" class="headerlink" title="Create gadget(s)"></a>Create gadget(s)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /sys/kernel/config/usb_gadget/g1</span><br></pre></td></tr></table></figure>

<h2 id="Create-English-strings-and-write-to-common-attributes"><a href="#Create-English-strings-and-write-to-common-attributes" class="headerlink" title="Create English strings and write to common attributes"></a>Create English strings and write to common attributes</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /sys/kernel/config/usb_gadget/g1/strings/0x409</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;SERIALNUMBER&#125;</span> &gt; /sys/kernel/config/usb_gadget/g1/strings/0x409/serialnumber</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;MANUFACTURER&#125;</span> &gt; /sys/kernel/config/usb_gadget/g1/strings/0x409/manufacturer</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;PRODUCT_NAME&#125;</span> &gt; /sys/kernel/config/usb_gadget/g1/strings/0x409/product</span><br></pre></td></tr></table></figure>
<h2 id="Create-gadget-configuration-s"><a href="#Create-gadget-configuration-s" class="headerlink" title="Create gadget configuration(s)"></a>Create gadget configuration(s)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /sys/kernel/config/usb_gadget/g1/configs/c1</span><br><span class="line">mkdir -p /sys/kernel/config/usb_gadget/g1/configs/c1/strings/0x409</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Config 1: ADB"</span> &gt; /sys/kernel/config/usb_gadget/g1/configs/c1/strings/0x409/configuration</span><br><span class="line"><span class="built_in">echo</span> 250 &gt; /sys/kernel/config/usb_gadget/g1/configs/c1/MaxPower</span><br></pre></td></tr></table></figure>

<h2 id="Create-gadget-function-s"><a href="#Create-gadget-function-s" class="headerlink" title="Create gadget function(s)"></a>Create gadget function(s)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Here we use ffs adb as an example</span></span><br><span class="line">mkdir -p /sys/kernel/config/usb_gadget/g1/<span class="built_in">functions</span>/ffs.adb</span><br></pre></td></tr></table></figure>

<h2 id="Associate-gadget-functions-with-configuration-s"><a href="#Associate-gadget-functions-with-configuration-s" class="headerlink" title="Associate gadget functions with configuration(s)"></a>Associate gadget functions with configuration(s)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /sys/kernel/config/usb_gadget/g1/<span class="built_in">functions</span>/ffs.adb /sys/kernel/config/usb_gadget/g1/configs/c1</span><br></pre></td></tr></table></figure>

<h2 id="Extra-setup-for-gadget-functions"><a href="#Extra-setup-for-gadget-functions" class="headerlink" title="Extra setup for gadget functions"></a>Extra setup for gadget functions</h2><p>Sometime there is some steps need to be done before enabling gadget(i.e. ffs need to be mounted before active)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create mount point for ffs and start adbd</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;mount_point&#125;</span>"</span></span><br><span class="line">mount -t functionfs adb <span class="string">"<span class="variable">$&#123;mount_point&#125;</span>"</span> -o uid=0,gid=0</span><br><span class="line">adbd &amp;</span><br></pre></td></tr></table></figure>
<p>If no extra step is needed, we can directly enable gadget</p>
<h2 id="Enable-the-gadget"><a href="#Enable-the-gadget" class="headerlink" title="Enable the gadget"></a>Enable the gadget</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Find the available udc</span></span><br><span class="line">udc=$(ls -1 /sys/class/udc/)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$udc</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"No UDC driver registered"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;udc&#125;</span>"</span> &gt; /sys/kernel/config/usb_gadget/g1/UDC</span><br></pre></td></tr></table></figure>
<h2 id="Compound-USB-Device"><a href="#Compound-USB-Device" class="headerlink" title="Compound USB Device"></a>Compound USB Device</h2><p>To setup a compound USB device, we just need to create several gadget functions and binding them with configuration(s) before enabling the gadget</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto devtool</title>
    <url>/2019-11-30/Yocto-devtool/</url>
    <content><![CDATA[<p>I have got used to create patch and <strong>bbappend</strong> files manually, now I’m switching to use <strong>devtool</strong> - To be honest it’s quite easy to use.</p>
<a id="more"></a>

<h2 id="Export-source-code-to-external-patch"><a href="#Export-source-code-to-external-patch" class="headerlink" title="Export source code to external patch"></a>Export source code to external patch</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">devtool modify &lt;recipe_name&gt; &lt;dst_path_to_export&gt;</span><br></pre></td></tr></table></figure>
<p>Then we can do changes based on exported source code.</p>
<h2 id="Upgrade-changes-to-bbappend"><a href="#Upgrade-changes-to-bbappend" class="headerlink" title="Upgrade changes to bbappend"></a>Upgrade changes to bbappend</h2><p>When changes are verified and we need to add changes into bbapned file as a patch, just use git to commit changes, then:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">devtool update-recipe &lt;recipe_name&gt; -m patch -a &lt;dst_layer_path_to_generate_bbapned&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Exit-dev-mode"><a href="#Exit-dev-mode" class="headerlink" title="Exit dev mode"></a>Exit dev mode</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">devtool reset &lt;recipe_name&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note: devtool will not delete exported source code.</p>
</blockquote>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MP1 getting started: create machine</title>
    <url>/2019-11-30/STM32MP1-getting-started-create-machine/</url>
    <content><![CDATA[<p>Brief notes about how to create a customized machine based on STM32MP1.</p>
<a id="more"></a>

<h2 id="Device-tree"><a href="#Device-tree" class="headerlink" title="Device tree"></a>Device tree</h2><p>dts files should be created at the very beginning. There are 3 dts files need to implement:</p>
<ul>
<li>TF-A device tree</li>
<li>U-BOOT device tree</li>
<li>Kernel device tree</li>
</ul>
<h2 id="Machine-layer"><a href="#Machine-layer" class="headerlink" title="Machine layer"></a>Machine layer</h2><p>A custom layer can be created outside of <em>meta-st</em>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   ├── eula</span><br><span class="line">│   │   └── stm32mp1-cp</span><br><span class="line">│   ├── layer.conf</span><br><span class="line">│   └── machine</span><br><span class="line">│       └── stm32mp1-cp.conf</span><br><span class="line">├── COPYING.MIT</span><br><span class="line">├── README</span><br><span class="line">├── recipes-bsp</span><br><span class="line">│   ├── trusted-firmware-a</span><br><span class="line">│   │   ├── tf-a-stm32mp</span><br><span class="line">│   │   │   └── 0001-tf-a-alex.patch</span><br><span class="line">│   │   └── tf-a-stm32mp_2.0.bbappend</span><br><span class="line">│   └── u-boot</span><br><span class="line">│       ├── u-boot-stm32mp</span><br><span class="line">│       │   └── 0001-u-boot-alex.patch</span><br><span class="line">│       ├── u-boot-stm32mp_2018.11.bbappend</span><br><span class="line">│       ├── u-boot-stm32mp-extlinux</span><br><span class="line">│       │   └── boot.scr.cmd</span><br><span class="line">│       └── u-boot-stm32mp-extlinux.bb</span><br><span class="line">└── recipes-kernel</span><br><span class="line">    └── linux</span><br><span class="line">        ├── linux-stm32mp</span><br><span class="line">        │   └── stm32mp157a-cp.dts</span><br><span class="line">        └── linux-stm32mp_%.bbappend</span><br></pre></td></tr></table></figure>
<p>Here I use patchs and <em>bbappend</em> to add dts files.</p>
<h2 id="Machine-conf"><a href="#Machine-conf" class="headerlink" title="Machine conf"></a>Machine conf</h2><p>Machine conf can be created based on <strong>stm32mp1-disco.conf</strong>. There are some variables are pre-defined in <strong>st-machine-common-stm32mp.inc</strong> which need to be override in your machine conf.</p>
<h2 id="U-Boot-extlinux"><a href="#U-Boot-extlinux" class="headerlink" title="U-Boot extlinux"></a>U-Boot extlinux</h2><p>There are some u-boot related env variables are set by <strong>UBOOT_EXTLINUX_</strong> started configs in machine conf. In ST U-Boot, there path of <strong>extlinux.conf</strong> are related to <strong>UBOOT_EXTLINUX_BOOTPREFIXES</strong>.</p>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Install JDK/JRE for Ubuntu</title>
    <url>/2019-11-16/Install-JDK-JRE-for-Ubuntu/</url>
    <content><![CDATA[<p>…</p>
<a id="more"></a>

<p>There are two versions of JDK/JRE can be installed on Ubuntu:</p>
<ul>
<li>Open JDK/JRE</li>
<li>Oracle JDK/JRE</li>
</ul>
<h2 id="Install-Open-JDK-JRE"><a href="#Install-Open-JDK-JRE" class="headerlink" title="Install Open JDK/JRE"></a>Install Open JDK/JRE</h2><p><strong>Open JDK/JRE</strong> can be easily installed by</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install default-jre</span><br><span class="line">sudo apt install default-jdk</span><br></pre></td></tr></table></figure>

<h2 id="Install-Oracle-standalone-JRE"><a href="#Install-Oracle-standalone-JRE" class="headerlink" title="Install Oracle standalone JRE"></a>Install Oracle standalone JRE</h2><ol>
<li>First of all download Oracle JRE from <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle</a></li>
<li>Unpack downloaded package and install it into the path you like(i.e <em>/usr/lib/java</em>) <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/java</span><br><span class="line">sudo tar -zxvf ~/Downloads/jre-8u231-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>Add JRE installation path into <strong>$PATH</strong> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/environment</span><br></pre></td></tr></table></figure>
 Add <span style="color:red"><strong>:/usr/lib/java/jre1.8.0_231</strong></span> into <span style="color:red"><strong>PATH</strong></span></li>
<li>Add installed java as alternative <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/java/jre1.8.0_231/bin/java 1</span><br></pre></td></tr></table></figure>
 To switch to other alternative java. use: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure></li>
<li>Check installation <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version <span class="string">"1.8.0_231"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MP1 getting started: setup environments</title>
    <url>/2019-11-16/STM32MP1-getting-started-setup-environments/</url>
    <content><![CDATA[<p>I’m planing to do some research on ST newest MPU series: STM32MP1. It’s a Cortex A7(solo or dual core) + M4 solution, not very powerful but the price might be very competitive. In this post we will setup the development environments.</p>
<a id="more"></a>

<h2 id="Choose-the-suitable-base-software-package"><a href="#Choose-the-suitable-base-software-package" class="headerlink" title="Choose the suitable base software package"></a>Choose the suitable base software package</h2><p>There are 3 basic software packages provided by ST:</p>
<ul>
<li>Starter Package(For evaluation)</li>
<li>Developer Package(For limited modification and application development)</li>
<li>Distribution Package(For creating custom distribution)</li>
</ul>
<p>Similar with Qualcomm solutions, there are two packages are available for development purpose. In my scenario I will use Distribution Package for sure, so the following parts of this post is about how to setup environments for Developer Package based development.</p>
<p>BTW the experiences I got during Qualcomm apq8009 based SoC really sucks… Their packages just like a huge shit mountain.</p>
<h2 id="Initialize-repo"><a href="#Initialize-repo" class="headerlink" title="Initialize repo"></a>Initialize repo</h2><p>If you are new to Yocto, you need to install some packages before start(i.e. <strong>repo</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir openstlinux-4.19-thud-mp1-19-10-09 &amp;&amp; <span class="built_in">cd</span> openstlinux-4.19-thud-mp1-19-10-09</span><br><span class="line">repo init -u https://github.com/STMicroelectronics/oe-manifest.git -b refs/tags/openstlinux-4.19-thud-mp1-19-10-09</span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure>
<h2 id="Package-structure"><a href="#Package-structure" class="headerlink" title="Package structure"></a>Package structure</h2><p>From <a href="https://wiki.st.com/stm32mpu/wiki/STM32MP1_Distribution_Package" target="_blank" rel="noopener">ST WIKI</a>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openstlinux-4.19-thud-mp1-19-10-09  OpenSTLinux distribution</span><br><span class="line">├── layers </span><br><span class="line">│    ├── meta-openembedded                Collection of layers <span class="keyword">for</span> the OpenEmbedded-Core universe (OpenEmbedded standard)</span><br><span class="line">│    ├── meta-qt5                         QT5 layer <span class="keyword">for</span> OpenEmbedded (standard)</span><br><span class="line">│    ├── meta-st</span><br><span class="line">│    │   ├── meta-st-openstlinux          STMicroelectronics layer that contains the frameworks and images settings <span class="keyword">for</span> the OpenSTLinux distribution</span><br><span class="line">│    │   ├── meta-st-stm32mp              STMicroelectronics layer that contains the description of the BSP <span class="keyword">for</span> the STM32 MPU devices</span><br><span class="line">│    │   │   ├── recipes-bsp</span><br><span class="line">│    │   │   │   ├── alsa                 Recipes <span class="keyword">for</span> ALSA control configuration</span><br><span class="line">│    │   │   │   ├── drivers              Recipes <span class="keyword">for</span> Vivante GCNANO GPU kernel drivers</span><br><span class="line">│    │   │   │   ├── trusted-firmware<span class="_">-a</span>   Recipes <span class="keyword">for</span> TF-A</span><br><span class="line">│    │   │   │   └── u-boot               Recipes <span class="keyword">for</span> U-Boot</span><br><span class="line">│    │   │   ├── recipes-extended</span><br><span class="line">│    │   │   │   ├── linux-examples       Recipes <span class="keyword">for</span> Linux examples <span class="keyword">for</span> STM32 MPU devices</span><br><span class="line">│    │   │   │   ├── m4coredump           Recipes <span class="keyword">for</span> script to manage coredump of cortexM4</span><br><span class="line">│    │   │   │   └── m4projects           Recipes <span class="keyword">for</span> firmware examples <span class="keyword">for</span> Cortex M4</span><br><span class="line">│    │   │   ├── recipes-graphics</span><br><span class="line">│    │   │   │   ├── gcnano-userland      Recipes <span class="keyword">for</span> Vivante libraries OpenGL ES, OpenVG and EGL (multi backend)</span><br><span class="line">│    │   │   │   └── [...]</span><br><span class="line">│    │   │   ├── recipes-kernel</span><br><span class="line">│    │   │   │   ├── linux                Recipes <span class="keyword">for</span> Linux kernel</span><br><span class="line">│    │   │   │   └── linux-firmware       Recipes <span class="keyword">for</span> Linux firmwares (example, Bluetooth firmware)</span><br><span class="line">│    │   │   ├── recipes-security</span><br><span class="line">│    │   │   │   └── optee                Recipes <span class="keyword">for</span> OPTEE</span><br><span class="line">│    │   │   ├── recipes-st</span><br><span class="line">│    │   │   │   └── images               Recipes <span class="keyword">for</span> the bootfs and userfs partitions binaries</span><br><span class="line">│    │   │   └── [...]</span><br><span class="line">│    │   ├── meta-st-stm32mp-addons       STMicroelectronics layer that helps managing the STM32CubeMX integration</span><br><span class="line">│    │   └── scripts</span><br><span class="line">│    │       ├── envsetup.sh              Environment setup script <span class="keyword">for</span> Distribution Package</span><br><span class="line">│    │       └── [...]</span><br><span class="line">│    ├── meta-timesys                     Timesys layer <span class="keyword">for</span> OpenEmbedded (standard)</span><br><span class="line">│    └── openembedded-core                Core metadata <span class="keyword">for</span> current versions of OpenEmbedded (standard)</span><br></pre></td></tr></table></figure>

<h2 id="Test-building-image"><a href="#Test-building-image" class="headerlink" title="Test building image"></a>Test building image</h2><h3 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DISTRO=openstlinux-weston MACHINE=stm32mp1 <span class="built_in">source</span> layers/meta-st/scripts/envsetup.sh</span><br></pre></td></tr></table></figure>
<p>If you want to test without wayland or x11 support, using <strong>DISTRO=openstlinux-eglfs MACHINE=st-image-core</strong> instead.</p>
<p>If build folder has been created, using blow command to re-use it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> layers/meta-st/scripts/envsetup.sh build-openstlinuxweston-stm32mp1/</span><br></pre></td></tr></table></figure>
<h3 id="Trigger-building"><a href="#Trigger-building" class="headerlink" title="Trigger building"></a>Trigger building</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake st-image-weston</span><br></pre></td></tr></table></figure>
<p><strong>st-image-core</strong> is also available if you want to create a console only image.</p>
<h2 id="USB-Flash"><a href="#USB-Flash" class="headerlink" title="USB Flash"></a>USB Flash</h2><p>USB flash need to use <a href="https://my.st.com/content/my_st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-programmers/stm32cubeprog.html" target="_blank" rel="noopener">STM32CubeProgrammer</a>. Device need to switched as usb flash mode as well.</p>
<p>After installation, using <strong>STM32_Programmer_CLI</strong> to check if device can be detected:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo STM32_Programmer_CLI -l usb</span><br><span class="line">      -------------------------------------------------------------------</span><br><span class="line">                        STM32CubeProgrammer v2.2.1                  </span><br><span class="line">      -------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">=====  DFU Interface   =====</span><br><span class="line"></span><br><span class="line">Total number of available STM32 device <span class="keyword">in</span> DFU mode: 1</span><br><span class="line"></span><br><span class="line">  Device Index           : USB1</span><br><span class="line">  USB Bus Number         : 001</span><br><span class="line">  USB Address Number     : 004</span><br><span class="line">  Product ID             : DFU <span class="keyword">in</span> HS Mode @Device ID /0x500, @Revision ID /0x0000</span><br><span class="line">  Serial number          : 004800293338511139303435</span><br><span class="line">  Firmware version       : 0x0110</span><br><span class="line">  Device ID              : 0x0500</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Notice: You may need to create a soft link from <em>$HOME/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin/STM32_Programmer_CLI</em></p>
</blockquote>
<p>You also can add an udev rule to allow connection without su:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp <span class="variable">$HOME</span>/STMicroelectronics/STM32Cube/STM32CubeProgrammer/Drivers/rules/50-usb-conf.rules /etc/udev/rules.d/</span><br><span class="line">sudo service udev restart</span><br></pre></td></tr></table></figure>
<p>If device can be found in DFU mode, using blow cmd to trigger usb flash:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">STM32_Programmer_CLI -c port=usb1 -w flashlayout_st-image-weston/FlashLayout_xxxxxx.tsv</span><br></pre></td></tr></table></figure>
<p>STM32CubeProgrammer using a <code>.tsv</code> file to specify flash layout and the binaries are going to use.</p>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome: ERR_NETWORK_CHANGED on Ubuntu</title>
    <url>/2019-11-14/Chrome-ERR-NETWORK-CHANGED-on-Ubuntu/</url>
    <content><![CDATA[<p>In my scenario it was caused by some docker containers - All of them have booting issues but they have been set as <strong>–restart=always</strong>, which caused they start to create js requests periodicity. Everything is ok after removing those docker containers.</p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode settings for zephyr</title>
    <url>/2019-11-10/vscode-settings-for-zephyr/</url>
    <content><![CDATA[<p>This is an example <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a> settings to provide supports for <a href="https://zephyrproject.org/" target="_blank" rel="noopener">zephyr</a> based projects build/debug:</p>
<p><a href="https://github.com/codingspirit/vscode-zephyr" target="_blank" rel="noopener">vscode-zepjyr</a></p>
<p>I’m not planing to discuss details about those json files here since I know you lazy guys just want to know how to use it(Or maybe I’m too lazy to write those details down, who knows).</p>
<a id="more"></a>

<h2 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><ul>
<li>Copy this <em>.vscode</em> folder into your project root folder.</li>
<li>Modify the environment variables at the end of <em>task.json</em> and <em>launch.json</em> base on your own settings:<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//task.json</span></span><br><span class="line">"options": &#123;</span><br><span class="line">    "env": &#123;</span><br><span class="line">        "ZEPHYR_TOOLCHAIN_VARIANT": "zephyr",</span><br><span class="line">        "ZEPHYR_SDK_INSTALL_DIR": "/home/alex/zephyr-sdk-0.10.3",</span><br><span class="line">        "ZEPHYR_BASE": "$&#123;workspaceFolder&#125;/zephyrproject/zephyr",</span><br><span class="line">        "VS_CODE_BOARD_TO_BUILD": "reel_board",</span><br><span class="line">        "VS_CODE_ZEPHYR_BIN_NAME": "zephyr.elf",</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//launch.json</span></span><br><span class="line">            "miDebuggerPath": "/home/alex/zephyr-sdk-0.10.3/arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb"</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Press <strong>Ctrl+Shit+B</strong> to trigger build task(You also can run task “<strong>zephyr build ninja</strong>“ alternatively if you want to use <strong>ninja</strong> to build).</li>
<li>Press the holy <strong>F5</strong> button(which is on the right side of the <strong>F4</strong> button) to start debugging.</li>
<li>An selecting list will jump out when terminated debug process, don’t forget to select it.</li>
</ul>
<h2 id="Known-issues"><a href="#Known-issues" class="headerlink" title="Known issues"></a>Known issues</h2><ul>
<li><p>An exception will occur when stop at <strong>main()</strong>. Not sure where the root cause is, but debug process still can proceed, just ignore it.</p>
</li>
<li><p>Breakpoints can’t be added into some lines but you can run code step by step to those lines. Disable zephyr build optimization doesn’t help on this, it might related to zephyr toolchain.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Palindrome Number</title>
    <url>/2019-10-26/Algorithm-Puzzles-Palindrome-Number/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Palindrome Number</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>
<p>Example 1:</p>
<p>Input: 121<br>Output: true<br>Example 2:</p>
<p>Input: -121<br>Output: false<br>Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.<br>Example 3:</p>
<p>Input: 10<br>Output: false<br>Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><h3 id="First-came-out-solution"><a href="#First-came-out-solution" class="headerlink" title="First came out solution"></a>First came out solution</h3><p>My first came out solution is using string:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stringstream</span> stream;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">        stream &lt;&lt; x;</span><br><span class="line">        stream &gt;&gt; str;</span><br><span class="line">        <span class="keyword">size_t</span> length = str.length();</span><br><span class="line">        <span class="keyword">auto</span> iterHead = str.cbegin();</span><br><span class="line">        <span class="keyword">auto</span> iterTail = str.cend() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; length; i+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*iterHead == *iterTail)&#123;</span><br><span class="line">                ++iterHead;</span><br><span class="line">                --iterTail;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>I know it’s not the best solution at very beginning, but it still surprised me when submitted:</p>
<p><img src="/2019-10-26/Algorithm-Puzzles-Palindrome-Number/s1.png" alt></p>
<h3 id="Another-approach"><a href="#Another-approach" class="headerlink" title="Another approach"></a>Another approach</h3><p>Since the performance of transferring to string is so bad, I’d like to try to handle it in integer only.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> reverted = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x &gt; reverted) &#123;</span><br><span class="line">            reverted = reverted * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (x == reverted) || (x == reverted / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/2019-10-26/Algorithm-Puzzles-Palindrome-Number/s2.png" alt></p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Setting up Gitlab CI (II): pipeline and .gitlab-ci.yml</title>
    <url>/2019-10-19/Setting-up-Gitlab-CI-II-pipeline-and-gitlab-ci-yml/</url>
    <content><![CDATA[<p>A brief introduction about how to setup Gitlab CI (part II).</p>
<a id="more"></a>

<p>In <a href="https://lzqblog.top/2019-09-28/Setting-up-Gitlab-CI-I-docker-gitlab-runner/">Setting up Gitlab CI (I): docker+gitlab-runner</a> we already created a docker image for gitlab-runner, which will be our CI environment. Next step is define the behaviors of your CI processes.</p>
<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p><a href="https://docs.gitlab.com/ee/ci/pipelines.html" target="_blank" rel="noopener">Creating and using CI/CD pipelines</a>:</p>
<blockquote>
<p> Pipelines are the top-level component of continuous integration, delivery, and deployment.</p>
</blockquote>
<p>If <strong>.gitlab-ci.yml</strong> has been set up correctly, you could see pipeline flow under <em>CI/CD-&gt;Pipelines</em>. </p>
<h2 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h2><p>If CI was enabled in your gitlab projects, gitlab-runner will try to find a file named <strong>.gitlab-ci.yml</strong> in your repository root. This file will tell gitlab-runner what should be done during CI process. </p>
<h3 id="image-variables"><a href="#image-variables" class="headerlink" title="image, variables"></a>image, variables</h3><p>You need to specify the docker image and environment variables gitlab-runner are going to use at very beginning:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">localhost:5000/$&#123;name_of_your_image&#125;</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">SDK_VERSION:</span> <span class="number">1.2</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>
<p>In our case we use the image from local docker hub.</p>
<h3 id="stages-jobs-and-script"><a href="#stages-jobs-and-script" class="headerlink" title="stages, jobs and script"></a>stages, jobs and script</h3><p>In normal cases, our pipeline should have 3 stages roughly:</p>
<ul>
<li>build</li>
<li>test</li>
<li>deploy</li>
</ul>
<p>Stages can be split into several jobs like:</p>
<ul>
<li>code/commit style check</li>
<li>downloading build dependencies</li>
<li>build code</li>
<li>run unit test</li>
<li>run integration testing</li>
<li>deploy</li>
</ul>
<p>In <strong>.gitlab-ci.yml</strong>, job can be defined as:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">job_name:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">uname</span> <span class="string">-a</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure>
<p><strong>script</strong> defines shell scripts which will be executed by gitlab-runner.</p>
<p>Each job must have a unique name, but there are some reserved keywords can’t be used as job name:</p>
<ul>
<li>image</li>
<li>services</li>
<li>stages</li>
<li>types</li>
<li>before_script</li>
<li>after_script</li>
<li>variables</li>
<li>cache</li>
</ul>
<p>Job name also can start with a dot(<strong>.</strong>) like <em>.job</em>. If a job name started with a dot, it will be ignored by gitlab CI(gitlab-runner will skip it).</p>
<h3 id="More"><a href="#More" class="headerlink" title="More"></a>More</h3><p>There are a lot of features can be defined in <strong>.gitlab-ci.yml</strong>. Go to <a href="https://docs.gitlab.com/ee/ci/yaml/README.html" target="_blank" rel="noopener">GitLab CI/CD Pipeline Configuration Reference</a> for more details.</p>
]]></content>
      <categories>
        <category>CI</category>
      </categories>
      <tags>
        <tag>Continuous Integration</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: String to Integer (atoi)</title>
    <url>/2019-10-13/Algorithm-Puzzles-String-to-Integer-atoi/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: String to Integer (atoi)</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Implement atoi which converts a string to an integer.</p>
<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned.</p>
<p>Note:</p>
<p>Only the space character ‘ ‘ is considered as whitespace character.<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.<br>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;42&quot;</span><br><span class="line">Output: 42</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;   -42&quot;</span><br><span class="line">Output: -42</span><br><span class="line">Explanation: The first non-whitespace character is &#39;-&#39;, which is the minus sign.</span><br><span class="line">             Then take as many numerical digits as possible, which gets 42.</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;4193 with words&quot;</span><br><span class="line">Output: 4193</span><br><span class="line">Explanation: Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.</span><br></pre></td></tr></table></figure>
<p>Example 4:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;words and 987&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The first non-whitespace character is &#39;w&#39;, which is not a numerical </span><br><span class="line">             digit or a +&#x2F;- sign. Therefore no valid conversion could be performed.</span><br></pre></td></tr></table></figure>
<p>Example 5:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;-91283472332&quot;</span><br><span class="line">Output: -2147483648</span><br><span class="line">Explanation: The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.</span><br><span class="line">             Thefore INT_MIN (−231) is returned.</span><br></pre></td></tr></table></figure>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><p>My first solution is using regex to filtrate incorrect inputs and find out the numerical:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> intMin = <span class="number">-2147483648</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> intMax = <span class="number">2147483647</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">std</span>::regex_match(str, <span class="built_in">std</span>::regex(<span class="string">"[ ]*[-+]?\\d&#123;1,&#125;[\\s\\S]*"</span>))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::smatch numMatch;</span><br><span class="line">            <span class="built_in">std</span>::regex_search(str, numMatch, <span class="built_in">std</span>::regex(<span class="string">"[-+]?\\d&#123;1,&#125;"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> negative = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (numMatch[<span class="number">0</span>].str()[<span class="number">0</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line">                negative = <span class="number">-1</span>;</span><br><span class="line">                index = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numMatch[<span class="number">0</span>].str()[<span class="number">0</span>] == <span class="string">'+'</span>) &#123;</span><br><span class="line">                index = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; index &lt; numMatch[<span class="number">0</span>].str().length(); ++index) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res &gt; <span class="number">214748364</span> ||</span><br><span class="line">                    (res == <span class="number">214748364</span> &amp;&amp; numMatch[<span class="number">0</span>].str()[index] - <span class="string">'0'</span> &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> negative == <span class="number">-1</span> ? intMin : intMax;</span><br><span class="line">                &#125;</span><br><span class="line">                res = res * <span class="number">10</span> + (numMatch[<span class="number">0</span>].str()[index] - <span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res * negative;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Then :</p>
<p><img src="/2019-10-13/Algorithm-Puzzles-String-to-Integer-atoi/s1.png" alt></p>
<p><img src="/2019-10-13/Algorithm-Puzzles-String-to-Integer-atoi/p1.jpeg" alt></p>
<p>I realized that maybe using regex is not a good idea since there is no need to traversal string more than once… After some modification, here is my solution 2:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> intMin = <span class="number">-2147483648</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> intMax = <span class="number">2147483647</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">size_t</span> length = str.length();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> negative = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        index = str.find_first_not_of(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="built_in">std</span>::<span class="built_in">string</span>::npos) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str[index] &lt; <span class="string">'0'</span> || str[index] &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[index] == <span class="string">'-'</span>) &#123;</span><br><span class="line">                negative = <span class="literal">true</span>;</span><br><span class="line">                ++index;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[index] == <span class="string">'+'</span>) &#123;</span><br><span class="line">                ++index;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; index &lt; length; ++index) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[index] &lt; <span class="string">'0'</span> || str[index] &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res &gt; <span class="number">214748364</span> ||</span><br><span class="line">                (res == <span class="number">214748364</span> &amp;&amp; (str[index] - <span class="string">'0'</span> &gt; <span class="number">7</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> negative ? intMin : intMax;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * <span class="number">10</span> + (str[index] - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> negative ? -res : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Result I got:</p>
<p><img src="/2019-10-13/Algorithm-Puzzles-String-to-Integer-atoi/s2.png" alt></p>
<p>0 ms and better than 100%…</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Reverse Integer</title>
    <url>/2019-10-05/Algorithm-Puzzles-Reverse-Integer/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Reverse Integer</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p>Example 1:</p>
<p>Input: 123<br>Output: 321<br>Example 2:</p>
<p>Input: -123<br>Output: -321<br>Example 3:</p>
<p>Input: 120<br>Output: 21</p>
<p>Note:<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><p>This puzzle is ez to solve if you considered possible overflow at the very beginning. I’d like to using string to do reverse process, which should be no overflow during reverse, after reversing then do overflow check. Considering that the range of int32_t is <em>[-2147483648, 2147483647]</em>, we need to check the value after reversing is in this range or not.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int32_t</span> reverse(<span class="keyword">int32_t</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> ori = <span class="built_in">std</span>::to_string(x);</span><br><span class="line">        <span class="keyword">if</span> (ori[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::reverse(++<span class="built_in">std</span>::begin(ori), <span class="built_in">std</span>::end(ori));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::reverse(<span class="built_in">std</span>::begin(ori), <span class="built_in">std</span>::end(ori));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ori.length() == <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ori[<span class="number">0</span>] &gt; <span class="string">'2'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ori[<span class="number">0</span>] == <span class="string">'2'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (atoi(ori.substr(<span class="number">1</span>, <span class="number">9</span>).c_str()) &gt; <span class="number">147483647</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ori.length() == <span class="number">11</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ori[<span class="number">1</span>] &gt; <span class="string">'2'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ori[<span class="number">1</span>] == <span class="string">'2'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (atoi(ori.substr(<span class="number">2</span>, <span class="number">9</span>).c_str()) &gt; <span class="number">147483648</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> atoi(ori.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Result I got:</p>
<p><img src="/2019-10-05/Algorithm-Puzzles-Reverse-Integer/s1.png" alt></p>
<p>One shot pass~~</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Setting up Gitlab CI (I): docker+gitlab-runner</title>
    <url>/2019-09-28/Setting-up-Gitlab-CI-I-docker-gitlab-runner/</url>
    <content><![CDATA[<p>A brief introduction about how to setup Gitlab CI (part I).</p>
<a id="more"></a>

<p>If you are new to docker, this post might help: <a href="https://lzqblog.top/2018-01-09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">Click this</a></p>
<h2 id="Install-and-setup-gitlab-runner"><a href="#Install-and-setup-gitlab-runner" class="headerlink" title="Install and setup gitlab runner"></a>Install and setup gitlab runner</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install gitlab runner docker image</span></span><br><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br><span class="line"><span class="comment"># Config and register runner</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$&#123;container_id_of_gitlab-runner&#125;</span> gitlab-runner register</span><br></pre></td></tr></table></figure>

<p>If you have installed gitlab-runner binary, you also can do register by one single command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner register \</span><br><span class="line">  --non-interactive \</span><br><span class="line">  --url <span class="string">"https://gitlab.com/"</span> \</span><br><span class="line">  --registration-token <span class="string">"PROJECT_REGISTRATION_TOKEN"</span> \</span><br><span class="line">  --executor <span class="string">"docker"</span> \</span><br><span class="line">  --docker-image alpine:latest \</span><br><span class="line">  --description <span class="string">"description_of_runner"</span> \</span><br><span class="line">  --tag-list <span class="string">"docker,aws"</span> \</span><br><span class="line">  --run-untagged=<span class="string">"true"</span> \</span><br><span class="line">  --locked=<span class="string">"false"</span> \</span><br><span class="line">  --access-level=<span class="string">"not_protected"</span></span><br></pre></td></tr></table></figure>

<h2 id="Prepare-your-docker-image-as-CI-environment"><a href="#Prepare-your-docker-image-as-CI-environment" class="headerlink" title="Prepare your docker image as CI environment"></a>Prepare your docker image as CI environment</h2><p>Docker images can be built from a local <strong>Dockerfile</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t <span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;version_number&#125;</span> .</span><br></pre></td></tr></table></figure>
<p>There is a “.” at the end, don’t forget it.</p>
<h2 id="Create-local-docker-hub"><a href="#Create-local-docker-hub" class="headerlink" title="Create local docker hub"></a>Create local docker hub</h2><p>Normally you can deploy your image to dockerhub.com. But if you don’t want to open your images to public, you also can create a local docker hub instead:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br><span class="line">docker tag <span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;image_tag&#125;</span> localhost:5000/<span class="variable">$&#123;image_name&#125;</span></span><br><span class="line">docker push localhost:5000/<span class="variable">$&#123;image_name&#125;</span></span><br></pre></td></tr></table></figure>
<p>After that gitlab-runner can “download” your images from <em>localhost:5000/${image_name}</em>. </p>
<p>You also can do a quick check if your image repo exist or not by accessing catalog:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:5000/v2/_catalog</span><br></pre></td></tr></table></figure>

<p>To be continued…</p>
]]></content>
      <categories>
        <category>CI</category>
      </categories>
      <tags>
        <tag>Continuous Integration</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: ZigZag Conversion</title>
    <url>/2019-09-28/Algorithm-Puzzles-ZigZag-Conversion/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: ZigZag Conversion</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”</p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<p>string convert(string s, int numRows);<br>Example 1:</p>
<p>Input: s = “PAYPALISHIRING”, numRows = 3<br>Output: “PAHNAPLSIIGYIR”<br>Example 2:</p>
<p>Input: s = “PAYPALISHIRING”, numRows = 4<br>Output: “PINALSIGYAHRPI”<br>Explanation:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure>

<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><h3 id="First-came-out-solution"><a href="#First-came-out-solution" class="headerlink" title="First came out solution"></a>First came out solution</h3><table>
<thead>
<tr>
<th align="center">0</th>
<th align="center"></th>
<th align="center"></th>
<th align="center">6</th>
<th align="center"></th>
<th align="center"></th>
<th align="center">12</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"></td>
<td align="center">5</td>
<td align="center">7</td>
<td align="center"></td>
<td align="center">11</td>
<td align="center">13</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">4</td>
<td align="center"></td>
<td align="center">8</td>
<td align="center">10</td>
<td align="center"></td>
<td align="center">14</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">9</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">15</td>
</tr>
</tbody></table>
<p>It’s obvious that the output is periodic for first row:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &#x3D; 2 * (numRows - 1) * 0</span><br><span class="line">6 &#x3D; 2 * (numRows - 1) * 1</span><br><span class="line">12 &#x3D; 2 * (numRows - 1) * 2</span><br></pre></td></tr></table></figure>

<p>Let <span style="color:red"><em>T = 2 * (numRows - 1)</em></span>, for next row(row[1]):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &#x3D; T * 0 + 1 </span><br><span class="line">5 &#x3D; T * 1 - 1</span><br><span class="line">7 &#x3D; T * 1 + 1</span><br><span class="line">11 &#x3D; T * 2 - 1</span><br><span class="line">13 &#x3D; T * 2 + 1</span><br></pre></td></tr></table></figure>

<p>For row[2]:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 &#x3D; T * 0 + 2</span><br><span class="line">4 &#x3D; T * 1 - 2</span><br><span class="line">8 &#x3D; T * 1 + 2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Change 1,2 to <em>rowIndex</em> which start from <em>0</em> to <em>numRows - 1</em> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &#x3D; T * 0 + rowIndex (rowIndex &#x3D; 0)</span><br><span class="line">1 &#x3D; T * 0 + rowIndex (rowIndex &#x3D; 1)</span><br><span class="line">2 &#x3D; T * 0 + rowIndex (rowIndex &#x3D; 2)</span><br></pre></td></tr></table></figure>


<p>Cool, can start coding now</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">size_t</span> maxLength = s.size();</span><br><span class="line">        <span class="keyword">size_t</span> T = <span class="number">2</span> * (numRows - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> rowIndex = <span class="number">0</span>; rowIndex &lt; numRows; ++rowIndex) &#123;</span><br><span class="line">            <span class="keyword">size_t</span> oriIndex = rowIndex;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (oriIndex &lt; maxLength) &#123;</span><br><span class="line">                res.push_back(s[oriIndex]);</span><br><span class="line">                <span class="keyword">size_t</span> insertOne = oriIndex + T - rowIndex - rowIndex;</span><br><span class="line">                <span class="keyword">if</span> (insertOne &gt; oriIndex &amp;&amp; insertOne &lt; oriIndex + T &amp;&amp;</span><br><span class="line">                    insertOne &lt; maxLength) &#123;</span><br><span class="line">                    res.push_back(s[insertOne]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                oriIndex += T;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Result:</p>
<p><img src="/2019-09-28/Algorithm-Puzzles-ZigZag-Conversion/s1.png" alt></p>
<p>Let’s do some optimization:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">size_t</span> maxLength = s.size();</span><br><span class="line">        <span class="keyword">size_t</span> T = <span class="number">2</span> * (numRows - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> rowIndex = <span class="number">0</span>; rowIndex &lt; numRows; ++rowIndex) &#123;</span><br><span class="line">            <span class="keyword">size_t</span> oriIndex = rowIndex;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (oriIndex &lt; maxLength) &#123;</span><br><span class="line">                res.push_back(s[oriIndex]);</span><br><span class="line">                <span class="keyword">size_t</span> insertOne = oriIndex + T - rowIndex - rowIndex;</span><br><span class="line">                <span class="keyword">if</span> (insertOne &gt; oriIndex &amp;&amp; insertOne &lt; oriIndex + T &amp;&amp;</span><br><span class="line">                    insertOne &lt; maxLength) &#123;</span><br><span class="line">                    res.push_back(s[insertOne]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                oriIndex += T;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::move(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Result:</p>
<p><img src="/2019-09-28/Algorithm-Puzzles-ZigZag-Conversion/s2.png" alt></p>
<p>Looks like we also can change <em>size_t T = 2 * (numRows - 1)</em> to <em>size_t T = numRows + numRows -2</em> to use add instead of multiply</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">size_t</span> maxLength = s.size();</span><br><span class="line">        <span class="keyword">size_t</span> T = (numRows + numRows - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> rowIndex = <span class="number">0</span>; rowIndex &lt; numRows; ++rowIndex) &#123;</span><br><span class="line">            <span class="keyword">size_t</span> oriIndex = rowIndex;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (oriIndex &lt; maxLength) &#123;</span><br><span class="line">                res.push_back(s[oriIndex]);</span><br><span class="line">                <span class="keyword">size_t</span> insertOne = oriIndex + T - rowIndex - rowIndex;</span><br><span class="line">                <span class="keyword">if</span> (insertOne &gt; oriIndex &amp;&amp; insertOne &lt; oriIndex + T &amp;&amp;</span><br><span class="line">                    insertOne &lt; maxLength) &#123;</span><br><span class="line">                    res.push_back(s[insertOne]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                oriIndex += T;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::move(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Result:</p>
<p><img src="/2019-09-28/Algorithm-Puzzles-ZigZag-Conversion/s3.png" alt></p>
<p>Super, better than 99.34% now!</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>ALSA: Naming rule of codec_name inside snd_soc_dai_link</title>
    <url>/2019-09-01/ALSA-Naming-rule-of-codec-name-inside-snd-soc-dai-link/</url>
    <content><![CDATA[<p>…</p>
<a id="more"></a>

<p>When we define a dai link in machine driver, a structure names “snd_soc_dai_link” will be created. There are two members inside this structure to find the adaptive codec drivers: <strong>codec_name</strong> and <strong>codec_dai_name</strong>. </p>
<p>Normally codec driver will define <strong>codec_dai_name</strong>. You can find it easily inside codec driver source code. To make sure the dai link created properly, the <strong>codec_dai_name</strong> in machine driver and codec driver should be exactly same. As for <strong>codec_name</strong>, the naming rule should be like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codec_name.bus_number-codec_address</span><br></pre></td></tr></table></figure>

<p>Taking pcm512x as an example, if we connect it to <strong>i2c bus 4</strong> and the i2c address of pcm512x we are using is <strong>0x4e</strong> in device tree, we should define snd_soc_dai_link like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.codec_name     &#x3D; &quot;pcm512x.4-004e&quot;,</span><br><span class="line">.codec_dai_name &#x3D; &quot;pcm512x-hifi&quot;,</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto: Configure kernel with config fragments</title>
    <url>/2019-08-24/Yocto-Configure-kernel-with-config-fragments/</url>
    <content><![CDATA[<p>From my point of view it will be better to use config fragments to configure kernel instead of directly modifying <em>.config</em> file, the former way will be much easier to disable changes when you want to roll back.</p>
<a id="more"></a>

<h2 id="Using-menuconfig-to-get-the-new-config-file-you-want"><a href="#Using-menuconfig-to-get-the-new-config-file-you-want" class="headerlink" title="Using menuconfig to get the new .config file you want"></a>Using menuconfig to get the new .config file you want</h2><p>Taking raspberrypi as an example. Replace <em>linux-raspberrypi</em> to your kernel recipe name. i.e. change it to linux-imx if you are using NXP i.MX SoC. Same modification need to be applied for following steps.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake linux-raspberrypi -c menuconfig</span><br></pre></td></tr></table></figure>

<h2 id="Get-differences"><a href="#Get-differences" class="headerlink" title="Get differences"></a>Get differences</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake linux-raspberrypi -c diffconfig</span><br></pre></td></tr></table></figure>

<p>Save the generated <em>.cfg</em> fragments file. We gonna use it in next step.</p>
<p>If you can make sure about which <em>CONFIG_XXXX</em> need to be changed, you can write fragments file by yourself as well.</p>
<h2 id="Using-bbappend-to-apply-fragments"><a href="#Using-bbappend-to-apply-fragments" class="headerlink" title="Using bbappend to apply fragments"></a>Using bbappend to apply fragments</h2><p>Yocto provides bbappend for developers to modify constructing steps without modifying the original recipes, and that’s how we apply fragments.</p>
<p>Assuming that you already have a yocto layer works properly, then create recipes with this structure:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recipes-kernel/</span><br><span class="line">└── linux</span><br><span class="line">    ├── linux-raspberrypi</span><br><span class="line">    │   └── enable_adb-cp.cfg</span><br><span class="line">    └── linux-raspberrypi_%.bbappend</span><br></pre></td></tr></table></figure>

<p>Name of bbappend file should be same as your kernel recipe, here we use wildcard <em>%</em> to make sure bbappend can be applied to any version of linux-raspberrypi recipes.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">FILESEXTRAPATHS_prepend:&#x3D;&quot;$&#123;THISDIR&#125;&#x2F;$&#123;PN&#125;:&quot;</span><br><span class="line"></span><br><span class="line"># Enable adb</span><br><span class="line">SRC_URI_append +&#x3D; &quot;file:&#x2F;&#x2F;enable_adb-cp.cfg&quot;</span><br><span class="line"></span><br><span class="line">do_configure_append() &#123;</span><br><span class="line">    $&#123;S&#125;&#x2F;scripts&#x2F;kconfig&#x2F;merge_config.sh -m -O $&#123;B&#125; $&#123;B&#125;&#x2F;.config $&#123;WORKDIR&#125;&#x2F;*-cp.cfg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see the path we put <strong>*.cfg</strong> files will not be include by default, so using <strong>FILESEXTRAPATHS_prepend</strong> to specify searching path is required. Then we will add step when do_configure, which will call <strong>merge_config.sh</strong> tool provided by kernel source to automatically merge fragments into kernel config file.</p>
<p>The funny part is I found that I made a mistake when I trying to enable usb adbd on raspberry pi 3: raspberry pi 3 can’t be used as gadget mode because of hardware limitations. But at least I verified the way to apply fragments works.-_-.</p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto: Replace sysvinit with systemd</title>
    <url>/2019-08-17/Yocto-Replace-sysvinit-with-systemd/</url>
    <content><![CDATA[<p>There are some Yocto distributions still using sysvinit as their default init manager. To replace it with systemd, some modifications need to be done in <strong>local.conf</strong>:</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># build&#x2F;conf&#x2F;local.conf</span><br><span class="line">DISTRO_FEATURES_append +&#x3D; &quot;systemd&quot;</span><br><span class="line">VIRTUAL-RUNTIME_init_manager &#x3D; &quot;systemd&quot;</span><br><span class="line">DISTRO_FEATURES_BACKFILL_CONSIDERED +&#x3D; &quot;sysvinit&quot;</span><br><span class="line">VIRTUAL-RUNTIME_initscripts &#x3D; &quot;&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Longest Palindromic Substring</title>
    <url>/2019-08-04/Algorithm-Puzzles-Longest-Palindromic-Substring/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Longest Palindromic Substring</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<p>Example 1:</p>
<p>Input: “babad”<br>Output: “bab”<br>Note: “aba” is also a valid answer.<br>Example 2:</p>
<p>Input: “cbbd”<br>Output: “bb”</p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><h3 id="First-Came-out-solution"><a href="#First-Came-out-solution" class="headerlink" title="First Came out solution:"></a>First Came out solution:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">0</span>,tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">int</span> longestH = <span class="number">0</span>, longestT = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[head] == s[tail])&#123;</span><br><span class="line">                <span class="keyword">if</span>(isPalindromic(s.substr(head, tail - head + <span class="number">1</span>)))&#123;</span><br><span class="line">                    longestH = head;</span><br><span class="line">                    longestT = tail;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++tail;</span><br><span class="line">            <span class="keyword">if</span>(tail &gt;= length)&#123;</span><br><span class="line">                ++head;</span><br><span class="line">                tail = head + longestT - longestH + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(tail &gt;= length)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(longestH, longestT - longestH + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindromic</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dMid = s.length()/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = s.length()/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">string</span> sub = s.substr((dMid - mid) &gt; <span class="number">0</span> ? mid + <span class="number">1</span> : mid);</span><br><span class="line">        <span class="built_in">std</span>::reverse(sub.begin(), sub.end());</span><br><span class="line">        <span class="keyword">if</span>(sub == s.substr(<span class="number">0</span>, mid))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Result:</p>
<p><img src="/2019-08-04/Algorithm-Puzzles-Longest-Palindromic-Substring/s1.png" alt></p>
<div align="center"> 
![](Algorithm-Puzzles-Longest-Palindromic-Substring/f1.jpeg)
</div>

<p>Well, that’s the worst result I have ever seen.</p>
<h2 id="Extend-from-the-center"><a href="#Extend-from-the-center" class="headerlink" title="Extend from the center"></a>Extend from the center</h2><p>Checked the solution provided by leetcode, there is one way only have time complexity O(n²), I implemented in it C++ with a little optimization:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, maxLength = <span class="number">0</span>, halfLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length() - i + <span class="number">1</span> &lt; halfLength || i + <span class="number">1</span> &lt; halfLength)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> len1 = extendFromCenter(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = extendFromCenter(s, i, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = len1 &gt; len2 ? len1 : len2;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; maxLength)&#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                maxLength = len;</span><br><span class="line">                halfLength = maxLength / <span class="number">2</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(start, maxLength);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extendFromCenter</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s[left] == s[right])&#123;</span><br><span class="line">            --left;</span><br><span class="line">            ++right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Result with this:</p>
<p><img src="/2019-08-04/Algorithm-Puzzles-Longest-Palindromic-Substring/s2.png" alt></p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Median of Two Sorted Arrays</title>
    <url>/2019-07-27/Algorithm-Puzzles-Median-of-Two-Sorted-Arrays/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Median of Two Sorted Arrays</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume nums1 and nums2 cannot be both empty.</p>
<p>Example 1:</p>
<p>nums1 = [1, 3]<br>nums2 = [2]</p>
<p>The median is 2.0<br>Example 2:</p>
<p>nums1 = [1, 2]<br>nums2 = [3, 4]</p>
<p>The median is (2 + 3)/2 = 2.5</p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><p>The first came out solution is using merge sort since the sub-vectors are already sorted. The funny part is the puzzle requests time complexity should be O(log (m+n)), which is same as merge sort.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums3;</span><br><span class="line">        nums3.resize(nums1.size()+nums2.size());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> iter1 = nums1.begin();</span><br><span class="line">        <span class="keyword">auto</span> iter2 = nums2.begin();</span><br><span class="line">        <span class="keyword">auto</span> iter3 = nums3.begin();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(;; ++iter3)&#123;</span><br><span class="line">            <span class="keyword">if</span>(iter1 == nums1.end())&#123;</span><br><span class="line">                <span class="built_in">std</span>::copy(iter2,nums2.end(),iter3);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(iter2 == nums2.end())&#123;</span><br><span class="line">                <span class="built_in">std</span>::copy(iter1,nums1.end(),iter3);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(*iter1&lt;=*iter2)&#123;</span><br><span class="line">                *iter3 = *iter1;</span><br><span class="line">                ++iter1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                *iter3 = *iter2;</span><br><span class="line">                ++iter2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(nums3.size()%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums3[(nums3.size()<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (nums3[nums3.size()/<span class="number">2</span>] + nums3[nums3.size()/<span class="number">2</span> - <span class="number">1</span>])/<span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Time complexity: O(log(m+n))</p>
<p>Result I got:<br><img src="/2019-07-27/Algorithm-Puzzles-Median-of-Two-Sorted-Arrays/s1.png" alt></p>
<p>Better than 98.75%. BTW it seems I can get different result with the exactly same code…</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>i.MX8 adb bring up</title>
    <url>/2019-07-27/i-MX8-adb-bring-up/</url>
    <content><![CDATA[<p>The default BSP provided by NXP doesn’t support <strong>adb</strong>, we have to port it by ourselves. Our goal is making <strong>adbd</strong> running on SoC meanwhile we can use <strong>adb</strong> through USB port.<br>Let’s have a quick summary before I forget it(I already done this 3 months ago…)</p>
<a id="more"></a>

<h2 id="Source-code-of-adb-amp-adbd"><a href="#Source-code-of-adb-amp-adbd" class="headerlink" title="Source code of adb &amp; adbd"></a>Source code of adb &amp; adbd</h2><p>You can find adb &amp; adbd source codes easily, but I found that there is a recipe in openembedded already provided adb &amp; adbd:<br><em>meta-openembedded/meta-oe/recipes-devtools/android-tools</em><br>But the default recipes can’t work on imx8mm through USB. We need do some modifications later.</p>
<h2 id="Adding-support-for-login-adb-as-root"><a href="#Adding-support-for-login-adb-as-root" class="headerlink" title="Adding support for login adb as root"></a>Adding support for login adb as root</h2><p>There is a function called <strong>should_drop_privileges</strong> in adbd source code, modify this function that makes it always return 0 to disallow drop privileges. It has been added into newer openembedded but not the i.mx BSP.</p>
<figure class="highlight patch"><table><tr><td class="code"><pre><span class="line">From 3a788e9168c9b9eac66c4fa479413f4a95c61be4 Mon Sep 17 00:00:00 2001</span><br><span class="line">From: Florent Revest &lt;revestflo@gmail.com&gt;</span><br><span class="line">Date: Mon, 30 Oct 2017 21:05:46 +0100</span><br><span class="line">Subject: [PATCH] adb: Allow adbd to be ran as root</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"> adb/adb.c | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">diff --git a/adb/adb.c b/adb/adb.c</span><br><span class="line">index 027edd9359..e0f7ecde45 100644</span><br><span class="line"><span class="comment">--- a/adb/adb.c</span></span><br><span class="line"><span class="comment">+++ b/adb/adb.c</span></span><br><span class="line">@@ -1271,6 +1271,7 @@ static int should_drop_privileges() &#123;</span><br><span class="line">     int secure = 0;</span><br><span class="line">     char value[PROPERTY_VALUE_MAX];</span><br><span class="line"> </span><br><span class="line"><span class="addition">+    return 0;</span></span><br><span class="line">    /* run adbd in secure mode if ro.secure is set and</span><br><span class="line">     ** we are not in the emulator</span><br><span class="line">     */</span><br></pre></td></tr></table></figure>
<p>You need to add this patch into recipe sources as well:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SRC_URI +&#x3D; &quot; \</span><br><span class="line">    file:&#x2F;&#x2F;0008-adb-Allow-adbd-to-be-ran-as-root.patch;patchdir&#x3D;system&#x2F;core \</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Adding-support-for-USB-adb"><a href="#Adding-support-for-USB-adb" class="headerlink" title="Adding support for USB adb"></a>Adding support for USB adb</h2><p>To connect adbd through USB, we need support from usb function filesystem. To enable it in kernel:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">│ Symbol: USB_FUNCTIONFS [&#x3D;m]                                                                      │  </span><br><span class="line">│ Type  : tristate                                                                                 │  </span><br><span class="line">│ Prompt: Function Filesystem                                                                      │  </span><br><span class="line">│   Location:                                                                                      │  </span><br><span class="line">│     -&gt; Device Drivers                                                                            │  </span><br><span class="line">│       -&gt; USB support (USB_SUPPORT [&#x3D;y])                                                          │  </span><br><span class="line">│         -&gt; USB Gadget Support (USB_GADGET [&#x3D;y])                                                  │  </span><br><span class="line">│ (4)       -&gt; USB Gadget precomposed configurations (&lt;choice&gt; [&#x3D;m])                               │  </span><br><span class="line">│   Defined at drivers&#x2F;usb&#x2F;gadget&#x2F;legacy&#x2F;Kconfig:196                                               │  </span><br><span class="line">│   Depends on: &lt;choice&gt;                                                                           │  </span><br><span class="line">│   Selects: USB_LIBCOMPOSITE [&#x3D;y] &amp;&amp; USB_F_FS [&#x3D;y] &amp;&amp; USB_FUNCTIONFS_GENERIC [&#x3D;y]</span><br></pre></td></tr></table></figure>

<p>After installation of <strong>USB_FUNCTIONFS</strong>, we need to <em>modprobe</em> and <em>mount</em> functionfs before adbd start(initialization):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">modprobe g_ffs idVendor=0x18d1 idProduct=0x4e42 iSerialNumber=<span class="string">"codingspirit"</span></span><br><span class="line">mkdir -p /dev/usb-ffs/adb</span><br><span class="line">mount -t functionfs adb /dev/usb-ffs/adb -o uid=0,gid=0</span><br></pre></td></tr></table></figure>

<p>Then we can start adbd now.</p>
<p>In my case I’m using systemd to do this initialization(as a <strong>ExecStartPre</strong>), then set <em>/usr/bin/adbd</em> as <strong>ExecStart</strong>.</p>
<p>After all of those steps, we can do quick test by <strong>adb devices</strong>! If everything goes well, you can see your device has been recognized. Then use <strong>adb shell</strong> to login, a <strong>#</strong> symbol should be shown which means you are in root.</p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Longest Substring Without Repeating Characters</title>
    <url>/2019-07-21/Algorithm-Puzzles-Longest-Substring-Without-Repeating-Characters/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Longest Substring Without Repeating Characters</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Example 1:</p>
<p>Input: “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3.<br>Example 2:</p>
<p>Input: “bbbbb”<br>Output: 1<br>Explanation: The answer is “b”, with the length of 1.<br>Example 3:</p>
<p>Input: “pwwkew”<br>Output: 3<br>Explanation: The answer is “wke”, with the length of 3.<br>             Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><h3 id="First-came-out-solution"><a href="#First-came-out-solution" class="headerlink" title="First came out solution"></a>First came out solution</h3><p>Traverse substring(not all of them, with a little bit optimization)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.size() + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j-i) &lt;= longest)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkStringUnique(s.substr(i,j-i)))</span><br><span class="line">                    longest = (longest &gt; (j - i)) ? longest : (j - i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkStringUnique</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>&amp;&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter = s.begin(); iter != s.end(); ++iter)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.find_first_of(*iter, <span class="built_in">std</span>::distance(s.begin(), iter)+<span class="number">1</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Time complexity: O(n^3)</p>
<p><img src="/2019-07-21/Algorithm-Puzzles-Longest-Substring-Without-Repeating-Characters/s1.png" alt></p>
<p>But this solution is not good enough since the time complexity is O(n^3). Only better than 62.78% cpp users.</p>
<h3 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h3><p>Checked the reference answer, there is another solution: using sliding Window. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> res = <span class="built_in">map</span>.find(s[j]);</span><br><span class="line">            <span class="keyword">if</span> (res != <span class="built_in">map</span>.end()) &#123;</span><br><span class="line">                i = (res-&gt;second &gt; i) ? res-&gt;second : i;</span><br><span class="line">                res-&gt;second = j + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">map</span>.insert(&#123;s[j], j + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = (ans &gt; (j - i + <span class="number">1</span>)) ? ans : (j - i + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Time complexity: O(n)</p>
<p><img src="/2019-07-21/Algorithm-Puzzles-Longest-Substring-Without-Repeating-Characters/s2.png" alt></p>
<p>It’s better than 85.71% now.</p>
<h3 id="Assuming-ASCII-128"><a href="#Assuming-ASCII-128" class="headerlink" title="Assuming ASCII 128"></a>Assuming ASCII 128</h3><p>The third way to solve this is assuming the string inputs are all ASCII 128 characters… In this case no hash table is needed.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            i = index[s[j]] &gt; i ? index[s[j]] : i;</span><br><span class="line">            ans = (ans &gt; (j - i + <span class="number">1</span>)) ? ans : (j - i + <span class="number">1</span>);</span><br><span class="line">            index[s[j]] = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/2019-07-21/Algorithm-Puzzles-Longest-Substring-Without-Repeating-Characters/s3.png" alt></p>
<p>This solution is faster than 95.65%.</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Add two numbers</title>
    <url>/2019-07-14/Algorithm-Puzzles-Add-two-numbers/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Add two numbers</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p>Example:</p>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p>
<p>The template code provided by leetcode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><p>My first came out solution just like how we do sum on draft paper:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* resultHead = result;</span><br><span class="line">        ListNode emptyNode&#123;<span class="number">0</span>&#125;; </span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            carry = addTwoNode(l1, l2, carry, result);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>((carry == <span class="number">0</span>) &amp;&amp; (l1-&gt;next == <span class="literal">nullptr</span>) &amp;&amp; (l2-&gt;next == <span class="literal">nullptr</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> resultHead;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                result = result-&gt;next;</span><br><span class="line">                l1 = l1-&gt;next?l1-&gt;next:&amp;emptyNode;</span><br><span class="line">                l2 = l2-&gt;next?l2-&gt;next:&amp;emptyNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addTwoNode</span><span class="params">(ListNode* l1, ListNode* l2, <span class="keyword">int</span> carry, ListNode* result)</span></span>&#123;</span><br><span class="line">        result-&gt;val = (l1-&gt;val + l2-&gt;val + carry);</span><br><span class="line">        <span class="keyword">if</span>(result-&gt;val &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            result-&gt;val -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Time complexity: O(n)<br><img src="/2019-07-14/Algorithm-Puzzles-Add-two-numbers/s1.png" alt></p>
<p>It’s do a little optimization:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* resultHead = result;</span><br><span class="line">        ListNode emptyNode&#123;<span class="number">0</span>&#125;; </span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            carry = addTwoNode(l1-&gt;val, l2-&gt;val, result);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>((carry == <span class="number">0</span>) &amp;&amp; (l1-&gt;next == <span class="literal">nullptr</span>) &amp;&amp; (l2-&gt;next == <span class="literal">nullptr</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> resultHead;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result-&gt;next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">                result = result-&gt;next;</span><br><span class="line">                l1 = l1-&gt;next?l1-&gt;next:&amp;emptyNode;</span><br><span class="line">                l2 = l2-&gt;next?l2-&gt;next:&amp;emptyNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addTwoNode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; l1, <span class="keyword">const</span> <span class="keyword">int</span>&amp; l2, ListNode* result)</span></span>&#123;</span><br><span class="line">        result-&gt;val += (l1 + l2);</span><br><span class="line">        <span class="keyword">if</span>(result-&gt;val &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            result-&gt;val -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/2019-07-14/Algorithm-Puzzles-Add-two-numbers/s2.png" alt></p>
<p>Super! Better than 99.99%!</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Puzzles: Two Sum</title>
    <url>/2019-07-11/Algorithm-Puzzles-Two-Sum/</url>
    <content><![CDATA[<p>Algorithm Puzzles <del>everyday</del> <del>every week</del> sometimes: Two Sum</p>
<a id="more"></a>

<h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>Puzzle from <a href="https://leetcode.com" target="_blank" rel="noopener">leetcode</a>:</p>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure>

<p>The template code provided by leetcode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solving"><a href="#Solving" class="headerlink" title="Solving"></a>Solving</h2><p>The first came out solution from my head is for every elements for-loop traverse once to find the result:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; a : nums)&#123;</span><br><span class="line">            <span class="keyword">auto</span> tryToFind = target - a;</span><br><span class="line">            <span class="keyword">for</span>(...)</span><br><span class="line">                <span class="comment">//if tryToFind exist in nums</span></span><br><span class="line">                <span class="comment">//return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>It’s really ez! But time complexity will be <strong>O(n^2)</strong> since there are 2 for-loops inside. There must be a better way, I can’t submit with this solution!</p>
<p><img src="/2019-07-11/Algorithm-Puzzles-Two-Sum/think.jpg" alt></p>
<p>So what kind of search method is better? Maybe hash table?</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; a : nums)&#123;</span><br><span class="line">            <span class="built_in">map</span>.insert(&#123;a,i&#125;);</span><br><span class="line">            <span class="keyword">auto</span> res = <span class="built_in">map</span>.find(target-a);</span><br><span class="line">            <span class="keyword">if</span>(res != <span class="built_in">map</span>.end())&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != res-&gt;second)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;i, res-&gt;second&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::invalid_argument(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Bravo! Time complexity is <strong>O(n)</strong> now!(but we used more space)<br>results:<br><img src="/2019-07-11/Algorithm-Puzzles-Two-Sum/s1.png" alt><br>What? Only better than 88.56%? OK it still can get improvements by replacing for-each with for-loop(But why I choose for-each at the first time…)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="built_in">map</span>.insert(&#123;nums[i],i&#125;);</span><br><span class="line">            <span class="keyword">auto</span> res = <span class="built_in">map</span>.find(target-nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(res != <span class="built_in">map</span>.end())&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != res-&gt;second)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;i, res-&gt;second&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>result:<br><img src="/2019-07-11/Algorithm-Puzzles-Two-Sum/s2_1.png" alt></p>
<p><img src="/2019-07-11/Algorithm-Puzzles-Two-Sum/s2_2.png" alt></p>
<p>Cool, better than 99.79% now!</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Webserver bring up (II): Create a demo page(html+fcgi)</title>
    <url>/2019-06-28/Webserver-bring-up-II-Create-a-demo-page-html-fcgi/</url>
    <content><![CDATA[<p>In last post we have installed lighttpd and fastcgi++, it’s create a demo page to have a quick verification.</p>
<a id="more"></a>


<h2 id="A-simple-html"><a href="#A-simple-html" class="headerlink" title="A simple html"></a>A simple html</h2><p>Let’s write a simple html for demo:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"/img/favicon.ico"</span> <span class="attr">type</span>=<span class="string">"img/x-ico"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Alex Demo page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">"/img/back.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">" background-repeat:no-repeat ;background-size:100% 100%;background-attachment: fixed;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"margin-top: 25%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"diag"</span> <span class="attr">action</span>=<span class="string">"/cpp_get.fcgi"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"background-color:dimgrey"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">                        Product Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">" text"</span> <span class="attr">name</span>=<span class="string">"product_name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                        Product ID:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"product_id"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This page will show a picture as page background, meanwhile a from will be created for testing GET method. The path we are using in html is relative path, i.e. if you put your pages to <em>/var/www/pages/test.html</em>, the absolute path of back.jpg will be <em>/var/www/pages/img/back.jpg</em> and the relative path will be <em>/img/back.jpg</em>.</p>
<p>Beware of access rights of those files/directories, the user and user group of lighttpd was configured in <strong>lighttpd.conf</strong> by <strong>server.username</strong> and <strong>server.groupname</strong>. Make sure lighttpd can access them.</p>
<h2 id="Write-a-simple-fgci-backend"><a href="#Write-a-simple-fgci-backend" class="headerlink" title="Write a simple fgci backend"></a>Write a simple fgci backend</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fcgi_get.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fastcgi++/request.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetTest</span> :</span> <span class="keyword">public</span> Fastcgipp::Request&lt;<span class="keyword">wchar_t</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">response</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::<span class="function">wofstream <span class="title">outPutFile</span><span class="params">(<span class="string">"output.patch"</span>, <span class="built_in">std</span>::ios_base::out | <span class="built_in">std</span>::ios_base::binary)</span></span>;</span><br><span class="line">        <span class="comment">//! [Response definition]</span></span><br><span class="line">        <span class="comment">//! [HTTP header]</span></span><br><span class="line">        out &lt;&lt; <span class="string">L"Content-Type: text/html; charset=utf-8\r\n\r\n"</span>;</span><br><span class="line">        <span class="comment">//! [HTTP header]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//! [Output]</span></span><br><span class="line">        out &lt;&lt; <span class="string">L"&lt;!DOCTYPE html&gt;\n"</span></span><br><span class="line">               <span class="string">L"&lt;html&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;head&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;meta charset='utf-8' /&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;title&gt;Success&lt;/title&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;/head&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;body&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;p&gt;"</span>;</span><br><span class="line">        <span class="keyword">using</span> Fastcgipp::Encoding;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!environment().gets.empty())</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;get : environment().gets)</span><br><span class="line">            &#123;</span><br><span class="line">                out &lt;&lt; <span class="string">L"&lt;b&gt;"</span> &lt;&lt; Encoding::HTML &lt;&lt; get.first &lt;&lt; Encoding::NONE</span><br><span class="line">                    &lt;&lt; <span class="string">L":&lt;/b&gt; "</span> &lt;&lt; Encoding::HTML &lt;&lt; get.second</span><br><span class="line">                    &lt;&lt; Encoding::NONE &lt;&lt; <span class="string">L"&lt;br /&gt;"</span>;</span><br><span class="line">                outPutFile &lt;&lt; get.first &lt;&lt; <span class="string">":"</span> &lt;&lt; get.second;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        out &lt;&lt; <span class="string">L"&lt;/p&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;/body&gt;"</span></span><br><span class="line">               <span class="string">L"&lt;/html&gt;"</span>;</span><br><span class="line">        <span class="comment">//! [Output]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//! [Return]</span></span><br><span class="line">        outPutFile &lt;&lt; <span class="string">"FFF"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        outPutFile.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fastcgi++/manager.hpp&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fastcgipp::Manager&lt;GetTest&gt; manager;</span><br><span class="line">    <span class="comment">//! [Manager]</span></span><br><span class="line">    <span class="comment">//! [Signals]</span></span><br><span class="line">    manager.setupSignals();</span><br><span class="line">    <span class="comment">//! [Signals]</span></span><br><span class="line">    <span class="comment">//! [Listen]</span></span><br><span class="line">    manager.listen();</span><br><span class="line">    <span class="comment">//! [Listen]</span></span><br><span class="line">    <span class="comment">//! [Start]</span></span><br><span class="line">    manager.start();</span><br><span class="line">    <span class="comment">//! [Start]</span></span><br><span class="line">    <span class="comment">//! [Join]</span></span><br><span class="line">    manager.join();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Use <em>environment().gets</em> to get all data passed by frontend through GET method.</p>
<h2 id="Compile-your-fcgi"><a href="#Compile-your-fcgi" class="headerlink" title="Compile your fcgi"></a>Compile your fcgi</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ fcgi_get.cpp -lfastcgipp -o cpp_get.fcgi</span><br></pre></td></tr></table></figure>

<p>Then copy it to <em>/var/www/fcgi-bin/cpp_get.fcgi</em>. Don’t forget add rights of execution for this fcgi file.</p>
<h2 id="Add-your-fcgi-into-lighttpd-conf"><a href="#Add-your-fcgi-into-lighttpd-conf" class="headerlink" title="Add your fcgi into lighttpd conf"></a>Add your fcgi into lighttpd conf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&#x2F;cpp_get.fcgi&quot; &#x3D;&gt; (</span><br><span class="line">  &quot;cpp_get.fastcgi.handler&quot; &#x3D;&gt; (</span><br><span class="line">    &quot;socket&quot; &#x3D;&gt; &quot;&#x2F;var&#x2F;run&#x2F;lighttpd&#x2F;lighttpd-cpp_get-&quot; + PID + &quot;.socket&quot;,,</span><br><span class="line">    &quot;check-local&quot; &#x3D;&gt; &quot;disable&quot;,</span><br><span class="line">    &quot;bin-path&quot; &#x3D;&gt; &quot;&#x2F;var&#x2F;www&#x2F;fcgi-bin&#x2F;cpp_get.fcgi&quot;,</span><br><span class="line">    &quot;max-procs&quot; &#x3D;&gt; 30,</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>This configuration allows you execute your fcgi by access localhost/cpp_get.fcgi.</p>
<h2 id="Apply-changes"><a href="#Apply-changes" class="headerlink" title="Apply changes"></a>Apply changes</h2><p>If lighttpd is already started on your device, you might need to restart lighttpd services to apply changes: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service lighttpd force-reload</span><br></pre></td></tr></table></figure>

<h2 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h2><p>Open <em><a href="http://localhost/test.html" target="_blank" rel="noopener">http://localhost/test.html</a></em>, input something in the form then click “提交”, if everything is ok, browser will jump to <em><a href="http://localhost/cpp_get.fcgi" target="_blank" rel="noopener">http://localhost/cpp_get.fcgi</a></em> and show what you have inputted. Meanwhile a file called <em>output.patch</em> will be generated at your page folder which contains the text you inputted as well.</p>
<p>Tips: If error occurred, you can find the path of error log by checking the value of <strong>server.errorlog</strong> in your <strong>lighttpd.conf</strong>.</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Webserver bring up (I): Install lighttpd and fastcgi++</title>
    <url>/2019-06-20/Webserver-bring-up-I-Install-lighttpd-and-fastcgi/</url>
    <content><![CDATA[<p>Webserver bring up(I): Install lighttpd and fastcgi++</p>
<a id="more"></a>

<h1 id="Install-Lighttpd"><a href="#Install-Lighttpd" class="headerlink" title="Install Lighttpd"></a>Install Lighttpd</h1><p><a href="https://www.lighttpd.net/" target="_blank" rel="noopener">Lighttpd</a> is a popular high performance webserver.</p>
<p>If you are using Debian based distributions, you can directly install it by apt install:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install lighttpd</span><br></pre></td></tr></table></figure>

<p>If you are using Yocto, you also can install it easily because poky already provided recipe for it. you can find it at <em>poky/meta/recipes-extended/lighttpd/</em>. </p>
<p>The default installed version(no matter PC or Yocto) only provides basic functions, fastcgi is not included. To enable support for fastcgi you need to :</p>
<ol>
<li>Modify file <strong>lighttpd.conf</strong>(On PC path is /etc/lighttpd/lighttpd.conf) to add <strong>mod_fcgi</strong> into <strong>server.modules</strong>. </li>
<li>If you are using Yocto, you also need to add <strong>lighttpd-module-fastcgi</strong> to <strong>IMAGE_INSTALL_append</strong> or declare dependencies of module fastcgi in your recipes:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IMAGE_INSTALL_append +&#x3D; &quot;lighttpd-module-fastcgi&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="Install-fastcgi"><a href="#Install-fastcgi" class="headerlink" title="Install fastcgi++"></a>Install fastcgi++</h1><p><a href="https://fastcgipp.isatec.ca" target="_blank" rel="noopener">fastcgi++(fastcgipp)</a> is a C++ FastCGI and Web development platform. I choose this library because it provides support for C++14 and the official site of <a href="http://www.fastcgi.com/" target="_blank" rel="noopener">fastcgi</a> which provides C/C++ libraries before has been closed for several years.  </p>
<p>Seems there is no yocto recipe for fastcgi++ on internet, but it’s easy to write a recipe by myself because it supports built by cmake. Here comes my recipe for fastcgi++:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUMMARY &#x3D; &quot;fastcgi++&quot;</span><br><span class="line">DESCRIPTION &#x3D; &quot;C++ FastCGI and Web development platform&quot;</span><br><span class="line">SECTION &#x3D; &quot;libs&quot;</span><br><span class="line">LICENSE &#x3D; &quot;GPL-2.0&quot;</span><br><span class="line">AUTHOR &#x3D; &quot;Alex.Don.Scofield(codingspirit)&quot;</span><br><span class="line">LIC_FILES_CHKSUM &#x3D; &quot;file:&#x2F;&#x2F;$&#123;COMMON_LICENSE_DIR&#125;&#x2F;GPL-2.0;md5&#x3D;801f80980d171dd6425610833a22dbe6&quot;</span><br><span class="line"></span><br><span class="line">$&#123;PN&#125;_REPO &#x3D; &quot;github.com&#x2F;eddic&#x2F;fastcgipp.git&quot;</span><br><span class="line">SRCREV_$&#123;PN&#125; &#x3D; &quot;5a5c3a263595a1792b2867188770bcf4f4df8b83&quot;</span><br><span class="line"></span><br><span class="line">TARGET_CC_ARCH +&#x3D; &quot;$&#123;LDFLAGS&#125;&quot;</span><br><span class="line"></span><br><span class="line">SRC_URI &#x3D; &quot; \</span><br><span class="line">  git:&#x2F;&#x2F;$&#123;$&#123;PN&#125;_REPO&#125;;name&#x3D;$&#123;PN&#125;;protocol&#x3D;https;nobranch&#x3D;1;destsuffix&#x3D;git&#x2F;$&#123;PN&#125; \</span><br><span class="line">  &quot;</span><br><span class="line"></span><br><span class="line">S &#x3D; &quot;$&#123;WORKDIR&#125;&#x2F;git&#x2F;$&#123;PN&#125;&quot;</span><br><span class="line">B &#x3D; &quot;$&#123;WORKDIR&#125;&#x2F;$&#123;BPN&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXTRA_OECMAKE &#x3D; &quot;-DCMAKE_BUILD_TYPE&#x3D;RELEASE&quot;</span><br><span class="line">inherit cmake</span><br></pre></td></tr></table></figure>

<p>BTW to pass cmake runtime parameters in Yocto, we can use <strong>EXTRA_OECMAKE</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXTRA_OECMAKE +&#x3D; &quot;-DBUILD_SAMPLE&#x3D;ON&quot;</span><br><span class="line">inherit cmake</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto: systemd</title>
    <url>/2019-06-07/Yocto-systemd/</url>
    <content><![CDATA[<p>As a replacement of System V init, systemd has been supported by Yocto long time ago. Let’s take a look at how to implement a Yocto recipe for systemd services.</p>
<a id="more"></a>

<h2 id="Prepare-service-file"><a href="#Prepare-service-file" class="headerlink" title="Prepare .service file"></a>Prepare .service file</h2><p>An example of service config file <strong>mydaemon.service</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;My Daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;root</span><br><span class="line">Group&#x3D;root</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;my_daemon&#x2F;my_daemon_start.sh</span><br><span class="line">StandardOutput&#x3D;null</span><br></pre></td></tr></table></figure>

<h2 id="Write-a-systemd-recipe"><a href="#Write-a-systemd-recipe" class="headerlink" title="Write a systemd recipe"></a>Write a systemd recipe</h2><p>First of all, don’t forget add your service file into source files:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SRC_URI &#x3D; &quot; \</span><br><span class="line">  git:&#x2F;&#x2F;$&#123;$&#123;PN&#125;_REPO&#125;;name&#x3D;$&#123;PN&#125;;protocol&#x3D;http;nobranch&#x3D;1;destsuffix&#x3D;git&#x2F;$&#123;PN&#125; \</span><br><span class="line">  file:&#x2F;&#x2F;mydaemon.service \</span><br><span class="line">  &quot;</span><br></pre></td></tr></table></figure>

<p>As you can see I put service file and application source code separately. You can put service file into your source code git repo as well.</p>
<p>Then to add systemd into Yocto recipe, you need to inherit your recipe from <strong>systemd</strong> class:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inherit systemd</span><br></pre></td></tr></table></figure>

<p>BTW Yocto support multiple inheritance, in my case I was trying to setup a cmake based application as a startup application when system booting up, so :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inherit cmake systemd</span><br></pre></td></tr></table></figure>

<p>Notice: Here is a short introduction from <a href="https://www.yoctoproject.org/docs/2.2/ref-manual/ref-manual.html" target="_blank" rel="noopener">Yocto reference manual</a></p>
<blockquote>
<p>The systemd class provides support for recipes that install systemd unit files.<br>The functionality for this class is disabled unless you have “systemd” in DISTRO_FEATURES.<br>Under this class, the recipe or Makefile (i.e. whatever the recipe is calling during the do_install task) installs unit files into ${D}${systemd_unitdir}/system. If the unit files being installed go into packages other than the main package, you need to set SYSTEMD_PACKAGES in your recipe to identify the packages in which the files will be installed.<br>You should set SYSTEMD_SERVICE to the name of the service file. You should also use a package name override to indicate the package to which the value applies. If the value applies to the recipe’s main package, use ${PN}. Here is an example from the connman recipe:</p>
</blockquote>
<blockquote>
<pre><code>SYSTEMD_SERVICE_${PN} = &quot;connman.service&quot;</code></pre></blockquote>
<blockquote>
<p>Services are set up to start on boot automatically unless you have set SYSTEMD_AUTO_ENABLE to “disable”.</p>
</blockquote>
<blockquote>
<p>For more information on systemd, see the “Selecting an Initialization Manager” section in the Yocto Project Development Manual.</p>
</blockquote>
<p>As you can see, we <em>should set SYSTEMD_SERVICE to the name of the service file</em>. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SYSTEMD_SERVICE_$&#123;PN&#125; &#x3D; &quot;mydaemon.service&quot;</span><br></pre></td></tr></table></figure>

<p>The last step is write a <strong>do_install</strong> task to install our services into target. The problem is in my scenario, cmake class already provided a <strong>do_install</strong> task, if we just override <strong>do_install</strong> task as below:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do_install() &#123;</span><br><span class="line">  install -D -p -m0644 $&#123;WORKDIR&#125;&#x2F;mydaemon.service \</span><br><span class="line">    $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;system&#x2F;mydaemon.service</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cmake install task will not be executed. To fix this, we need to add <strong>cmake_do_install</strong> into overridden <strong>do_install</strong> task:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do_install() &#123;</span><br><span class="line">  cmake_do_install</span><br><span class="line">  install -D -p -m0644 $&#123;WORKDIR&#125;&#x2F;mydaemon.service \</span><br><span class="line">    $&#123;D&#125;$&#123;systemd_unitdir&#125;&#x2F;system&#x2F;mydaemon.service</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then cmake install task will be executed, mydaemon.service will be installed and setup as well.</p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>i.MX setup auto login</title>
    <url>/2019-06-06/i-MX-setup-auto-login/</url>
    <content><![CDATA[<p>The default BSP provided by NXP requires login in UART after booting up, which seems “unfriendly” to some users.</p>
<a id="more"></a>

<p>In i.MX Yocto BSP, Login is provided by a systemd service called systemd-serialgetty:<br><strong>sources/poky/meta/recipes-core/systemd/systemd-serialgetty/serial-getty@.service</strong><br>This service will execute <strong>agetty</strong> when system booting up and require login.</p>
<p>So there are two ways to disable login:</p>
<h2 id="Replace-agetty-with-bin-login"><a href="#Replace-agetty-with-bin-login" class="headerlink" title="Replace agetty with /bin/login"></a>Replace agetty with <strong>/bin/login</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecStart&#x3D;&#x2F;bin&#x2F;login -f root</span><br></pre></td></tr></table></figure>

<h2 id="Provide-username-to-agetty"><a href="#Provide-username-to-agetty" class="headerlink" title="Provide username to agetty"></a>Provide username to agetty</h2><p>Add option <strong>-a</strong> to provide username to agetty.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment&#x3D;&quot;TERM&#x3D;xterm&quot;</span><br><span class="line">#ExecStart&#x3D;-&#x2F;sbin&#x2F;agetty -8 -L %I @BAUDRATE@ $TERM</span><br><span class="line">ExecStart&#x3D;-&#x2F;sbin&#x2F;agetty -8 -a root -L %I @BAUDRATE@ $TERM</span><br><span class="line">Type&#x3D;idle</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Android: Error when execute sdkmanager</title>
    <url>/2019-05-28/Android-Error-when-execute-sdkmanager/</url>
    <content><![CDATA[<p>Quick fix for error that <strong>sdkmanager</strong> throw exception when trying to call <strong>sdkmanager –license</strong> and <strong>sdkmanager –list</strong>.</p>
<a id="more"></a>

<h2 id="Error-messages"><a href="#Error-messages" class="headerlink" title="Error messages"></a>Error messages</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: javax&#x2F;xml&#x2F;bind&#x2F;annotation&#x2F;XmlSchema</span><br><span class="line">    at com.android.repository.api.SchemaModule$SchemaModuleVersion.&lt;init&gt;(SchemaModule.java:156)</span><br><span class="line">    at com.android.repository.api.SchemaModule.&lt;init&gt;(SchemaModule.java:75)</span><br><span class="line">    at com.android.sdklib.repository.AndroidSdkHandler.&lt;clinit&gt;(AndroidSdkHandler.java:81)</span><br><span class="line">    at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:73)</span><br><span class="line">    at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:48)</span><br><span class="line">    Caused by: java.lang.ClassNotFoundException: javax.xml.bind.annotation.XmlSchema</span><br><span class="line">    at java.base&#x2F;jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)</span><br><span class="line">    at java.base&#x2F;jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)</span><br><span class="line">    at java.base&#x2F;java.lang.ClassLoader.loadClass(ClassLoader.java:496)</span><br><span class="line">    ... 5 more</span><br></pre></td></tr></table></figure>

<h2 id="Quick-fix"><a href="#Quick-fix" class="headerlink" title="Quick fix"></a>Quick fix</h2><p>In Windows:</p>
<ol>
<li>Go to C:\Users\Alex.Li\AppData\Local\Android\Sdk\tools\bin</li>
<li>Open sdkmanager.bat with editor</li>
<li>Add <span style="color:blue">  -XX:+IgnoreUnrecognizedVMOptions –add-modules java.se.ee</span> after <span style="color:red">set DEFAULT_JVM_OPTS=”-Dcom.android.sdklib.toolsdir=%~dp0..”</span>:<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> DEFAULT_JVM_OPTS="-Dcom.android.sdklib.toolsdir=%~dp0\.." -XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>In Linux:</p>
<ol>
<li>Go to <strong><android_sdk_path>/tools/bin</android_sdk_path></strong>, <strong><android_sdk_path></android_sdk_path></strong> is the path where you unzip your Android SDK.</li>
<li>Open sdkmanger with editor</li>
<li>Add <span style="color:blue">  -XX:+IgnoreUnrecognizedVMOptions –add-modules java.se.ee</span> after <span style="color:red">DEFAULT_JVM_OPTS=’”-Dcom.android.sdklib.toolsdir=$APP_HOME”‘“</span>:<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">DEFAULT_JVM_OPTS='"-Dcom.android.sdklib.toolsdir=$APP_HOME" -XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas demo page</title>
    <url>/2019-05-27/canvas-demo-page/</url>
    <content><![CDATA[<p><span style="color:red">This is a demo page for cool html5 canvas demos. Try to click them!</span><br><span style="color:blue">Beware of performance issues if you trying to access those pages through mobile devices. :)</span><br><a href="/fireball.html">Fire Ball</a><br><a href="/blackhole.html">Black Hole</a></p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto recipe: Git</title>
    <url>/2019-05-27/Yocto-recipe-Git/</url>
    <content><![CDATA[<p>This is a short post give a sample of Yocto recipe which fetches source codes from git server.</p>
<a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUMMARY &#x3D; &quot;Example&quot;</span><br><span class="line">DESCRIPTION &#x3D; &quot;Recipes for Example&quot;</span><br><span class="line">LICENSE &#x3D; &quot;GPL-2.0&quot;</span><br><span class="line">AUTHOR &#x3D; &quot;Alex Li(Alex.Li@xxxx.com)&quot;</span><br><span class="line">#Path of your LICENSE file and checksum</span><br><span class="line">LIC_FILES_CHKSUM &#x3D; &quot;file:&#x2F;&#x2F;$&#123;COMMON_LICENSE_DIR&#125;&#x2F;GPL-2.0;md5&#x3D;801f80980d171dd6425610833a22dbe6&quot;</span><br><span class="line"></span><br><span class="line">#Build dependencies</span><br><span class="line">DEPENDS +&#x3D; &quot;boost ark-base ark-log&quot;</span><br><span class="line">#Run time dependencies</span><br><span class="line">RDEPENDS_$&#123;PN&#125; &#x3D; &quot;ark-base ark-log boost-program-options&quot;</span><br><span class="line"></span><br><span class="line">#Your git repo address, will be usedby $&#123;SRC_URI&#125;</span><br><span class="line">$&#123;PN&#125;_REPO &#x3D; &quot;github.com&#x2F;codingspirit&#x2F;example.git&quot;</span><br><span class="line">#Set to $&#123;AUTOREV&#125; to automatically fetch the newest commit, you can set specific commit id as well</span><br><span class="line">SRCREV_$&#123;PN&#125; &#x3D; &quot;$&#123;AUTOREV&#125;&quot;</span><br><span class="line"></span><br><span class="line">#Files need to be installed into target need to declare in recipe</span><br><span class="line">FILES_$&#123;PN&#125; +&#x3D; &quot;&#x2F;example&#x2F;*&quot;</span><br><span class="line"></span><br><span class="line">#Set git source, name, protocol, branch, git clone destination. You can use &quot;branch&#x3D;branchname&quot; to  specify branch to require bitbake check after fetching</span><br><span class="line">#&quot;nobranch&#x3D;1&quot; will skip branch check</span><br><span class="line">SRC_URI &#x3D; &quot; \</span><br><span class="line">  git:&#x2F;&#x2F;$&#123;$&#123;PN&#125;_REPO&#125;;name&#x3D;$&#123;PN&#125;;protocol&#x3D;https;nobranch&#x3D;1;destsuffix&#x3D;git&#x2F;$&#123;PN&#125; \ </span><br><span class="line">  &quot;</span><br><span class="line"># Path of source code. We set it to &quot;git&#x2F;$&#123;PN&#125;&quot; in SRC_URI</span><br><span class="line">S &#x3D; &quot;$&#123;WORKDIR&#125;&#x2F;git&#x2F;$&#123;PN&#125;&quot;</span><br><span class="line"># Build path, $&#123;BPN&#125; means &quot;The bare name of the recipe&quot;</span><br><span class="line">B &#x3D; &quot;$&#123;WORKDIR&#125;&#x2F;$&#123;BPN&#125;&quot;</span><br><span class="line"></span><br><span class="line">inherit cmake</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>i.MX setup TFTP and NFS</title>
    <url>/2019-05-26/i-MX-setup-TFTP-and-NFS/</url>
    <content><![CDATA[<p>Using TFTP(Trivial File Transfer Protocol) and NFS(Network File System) to load kernel and rootfs can help to reduce operations of flash write efficiently, which can make you EVK board live longer…</p>
<p>This summary is based on <a href="https://github.com/Alexey-Abdulov-Tymphany" target="_blank" rel="noopener">Alexey</a>‘s version, with some modifications according to my experiment.</p>
<a id="more"></a>

<h2 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2><h3 id="Install-necessary-tools"><a href="#Install-necessary-tools" class="headerlink" title="Install necessary tools"></a>Install necessary tools</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xinetd tftpd tftp</span><br></pre></td></tr></table></figure>

<h3 id="Setup-TFTP"><a href="#Setup-TFTP" class="headerlink" title="Setup TFTP"></a>Setup TFTP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/xinetd.d/</span><br><span class="line">nano /etc/xinetd.d/tftp</span><br><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">    protocol        = udp</span><br><span class="line">    port            = 69</span><br><span class="line">    socket_type     = dgram</span><br><span class="line">    <span class="built_in">wait</span>            = yes</span><br><span class="line">    user            = nobody</span><br><span class="line">    server          = /usr/sbin/in.tftpd</span><br><span class="line">    server_args     = /srv/tftp</span><br><span class="line">    <span class="built_in">disable</span>         = no</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>create folder to store tftp files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /srv/tftp</span><br><span class="line">sudo chmod -R 777 /srv/tftp</span><br><span class="line">sudo chown -R nobody /srv/tftp</span><br></pre></td></tr></table></figure>

<p>restart tftpd by xinetd:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/xinetd restart</span><br></pre></td></tr></table></figure>

<p>copy device trees/kernel image to tftp folder:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp Image /srv/tftp</span><br><span class="line">cp Image-fsl-imx8mq-evk.dtb /srv/tftp/fsl-imx8mq-evk.dtb</span><br></pre></td></tr></table></figure>

<h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h2><h3 id="Install-necessary-tools-1"><a href="#Install-necessary-tools-1" class="headerlink" title="Install necessary tools"></a>Install necessary tools</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server nfs-common portmap</span><br></pre></td></tr></table></figure>

<h3 id="Setup-NFS"><a href="#Setup-NFS" class="headerlink" title="Setup NFS"></a>Setup NFS</h3><p>Add below line at end of <em>/etc/exports</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F; *(rw,insecure,no_root_squash,no_subtree_check)</span><br></pre></td></tr></table></figure>

<p>restart nfs server:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/nfs-kernel-server restart</span><br></pre></td></tr></table></figure>
<p>create copy of your rootfs:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir imx8-evk-dummy</span><br><span class="line"><span class="comment"># goto your yocto image build dir, i.e. imx-yocto-bsp/imx8mmevk_build/tmp/work/imx8mmevk-poky-linux/fsl-image-validation-imx/1.0-r0</span></span><br><span class="line"><span class="built_in">cd</span> &lt;your_yocto_image_build_folder&gt;</span><br><span class="line">cp -r rootfs ~/imx8-evk-dummy</span><br></pre></td></tr></table></figure>

<p><span style="color:red">Notice:</span> Seems long path of rootfs will cause rootfs mounting error, suggest copy your rootfs to a short path</p>
<h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>Interrupt board booting up then type into u-boot terminal:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenv nfsroot &lt;path-to-your-rootfs&gt;</span><br><span class="line">setenv image &lt;kernel-image-name-in-tftp-folder&gt;</span><br><span class="line">setenv fdt_file &lt;devid-tree-file-name-in-tftp-folder&gt;</span><br><span class="line">setenv serverip &lt;pc-ip-address&gt;</span><br><span class="line">setenv bootcmd &#39;run netboot&#39;</span><br><span class="line">sav</span><br><span class="line">reset</span><br></pre></td></tr></table></figure>

<p>i.e.:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenv nfsroot &#x2F;home&#x2F;alex&#x2F;imx8-evk-dummy&#x2F;rootfs</span><br><span class="line">setenv image Image</span><br><span class="line">setenv fdt_file fsl-imx8mm-evk.dtb</span><br><span class="line">setenv serverip 10.0.1.17</span><br><span class="line">setenv bootcmd &#39;run netboot&#39;</span><br><span class="line">sav</span><br><span class="line">reset</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto QA Issue: Files/directories were installed but not shipped in any package</title>
    <url>/2019-05-02/Yocto-QA-Issue-Files-directories-were-installed-but-not-shipped-in-any-package/</url>
    <content><![CDATA[<p>Yocto has much more strict rules than buildroot, one more QA Issue I met today is when I trying to install some regular files into rootfs by cmake <strong>install</strong>.</p>
<a id="more"></a>
<h2 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h2><p>Yocto/bitbake need to record every file you trying to install into rootfs, so it can easily remove those files when you trying to remove a package. Special case is When you trying to install <strong>TARGET</strong> by cmake like this:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS <span class="variable">$&#123;PROJECT_NAME&#125;</span> DESTINATION bin)</span><br></pre></td></tr></table></figure>
<p>Yocto will automatically record <strong>TARGET</strong> in this case if your <strong>inherit cmake</strong> recipe even you didn’t declare it in recipe explicitly. However, if we trying to install some regular files(like some setting files,scripts etc.) by <strong>install(FILES</strong> or <strong>install(DIRECTORY</strong>, yocto will require us to declare those files explicitly.</p>
<h2 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h2><p>Declare those files in recipe:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FILES_$&#123;PN&#125; +&#x3D; &quot;&#x2F;test&#x2F;*&quot;</span><br><span class="line"># Change &quot;&#x2F;test&#x2F;*&quot; to where your regular file installed</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>Yocto QA Issue: -dev package contains non-symlink .so</title>
    <url>/2019-04-29/Yocto-QA-Issue-dev-package-contains-non-symlink-so/</url>
    <content><![CDATA[<p>Last week I met an issue when I trying to include a shared lib(built by cmake) written by me into Yocto project, which has already been verified in buildroot.<br>The root cause is recipe trying to directly install a *.so lib into target filesystem, which doesn’t meet Yocto QA request. Lib should be installed with version number(i.e. libabc.so.0.0.3), then use a soft link(i.e. libabc.so) link to it.</p>
<a id="more"></a>

<h2 id="Quick-fix"><a href="#Quick-fix" class="headerlink" title="Quick fix"></a>Quick fix</h2><h3 id="If-your-lib-is-using-cmake"><a href="#If-your-lib-is-using-cmake" class="headerlink" title="If your lib is using cmake"></a>If your lib is using cmake</h3><p>Add below line to add lib version information in cmake:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES VERSION <span class="number">0.0</span>.<span class="number">3</span> SOVERSION <span class="number">0.0</span>.<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>A better way:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span>_VERSION <span class="string">"0.0.3"</span>)</span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES VERSION <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_VERSION&#125; SOVERSION <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_VERSION&#125;)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"Version: $&#123;$&#123;PROJECT_NAME&#125;_VERSION&#125;"</span>)</span><br></pre></td></tr></table></figure>

<p>After that, when you build it with bitbake, version number will be added to extension automatically, a soft link we mentioned will be created as well.</p>
<h3 id="Force-Yocto-ignore-this-warning"><a href="#Force-Yocto-ignore-this-warning" class="headerlink" title="Force Yocto ignore this warning"></a>Force Yocto ignore this warning</h3><p>It’s not recommended but you can add below line into your lib recipe to force Yocto ignore this issue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSANE_SKIP_$&#123;PN&#125; &#x3D; &quot;dev-so&quot;</span><br></pre></td></tr></table></figure>

<p>As matter of fact, you can use this line to avoid almost all <em>QA Issues</em>, just replace <strong>“dev-so”</strong> into your error type.</p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>i.MX 8 getting started: cmake package</title>
    <url>/2019-03-28/i-MX-8-getting-started-cmake-package/</url>
    <content><![CDATA[<p>We already started to use cmake instead of writing Makefile by our own in buildroot. Let’s see how to have a cmake package in Yocto.</p>
<a id="more"></a>

<h2 id="Add-your-source-file-and-CMakeLists"><a href="#Add-your-source-file-and-CMakeLists" class="headerlink" title="Add your source file and CMakeLists"></a>Add your source file and CMakeLists</h2><p>Here we use a simple cpp source file to test c++11 and pthread.</p>
<p><strong>alexcmaketest.cpp</strong> :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> thread1 = <span class="built_in">std</span>::make_unique&lt;<span class="built_in">std</span>::thread&gt;([]() &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world from thread1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">auto</span> thread2 = <span class="built_in">std</span>::make_unique&lt;<span class="built_in">std</span>::thread&gt;([]() &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world from thread2"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (thread1-&gt;joinable())</span><br><span class="line">        thread1-&gt;join();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (thread2-&gt;joinable())</span><br><span class="line">        thread2-&gt;join();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then prepare your CMakeLists.txt:</p>
<p><strong>CMakeLists.txt</strong>:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span> FATAL_ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(alexcmaketest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_FILES <span class="string">"*.cpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SRC_FILES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> pthread)</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>(TARGETS <span class="variable">$&#123;PROJECT_NAME&#125;</span> DESTINATION bin)</span><br></pre></td></tr></table></figure>

<p>Notice : <strong>install</strong> should be added into your <strong>CMakeLists.txt</strong> if you want your binary to be installed into rootfs.</p>
<h2 id="Write-your-recipe"><a href="#Write-your-recipe" class="headerlink" title="Write your recipe"></a>Write your recipe</h2><p><strong>cmakeexample_0.1.bb</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUMMARY &#x3D; &quot;cmake example&quot;</span><br><span class="line">DESCRIPTION &#x3D; &quot;Recipe for cmake test&quot;</span><br><span class="line">LICENSE &#x3D; &quot;GPL-2.0&quot;</span><br><span class="line">LIC_FILES_CHKSUM &#x3D; &quot;file:&#x2F;&#x2F;$&#123;COMMON_LICENSE_DIR&#125;&#x2F;GPL-2.0;md5&#x3D;801f80980d171dd6425610833a22dbe6&quot;</span><br><span class="line"></span><br><span class="line">SRC_URI &#x3D; &quot;file:&#x2F;&#x2F;alexcmaketest.cpp \</span><br><span class="line">            file:&#x2F;&#x2F;CMakeLists.txt&quot;</span><br><span class="line"></span><br><span class="line">S &#x3D; &quot;$&#123;WORKDIR&#125;&quot;</span><br><span class="line"></span><br><span class="line">inherit cmake</span><br></pre></td></tr></table></figure>

<p>There is no need to override <strong>do_install</strong> nor <strong>do_config</strong> in this scenario. <strong>cmake.bbclass</strong> has already defined those tasks and we can just inherit from it.<br>If <strong>pkgconfig</strong> is required by your cmake, use <strong>inherit pkgconfig cmake</strong> instead.</p>
<p>Then add your packages into your layer, don’t forget config your package as <span style="color:red">IMAGE_INSTALL_append</span> in <span style="color:red">layer.conf</span>. After that, you should have a folder tree like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── bitbake-cookerdaemon.log</span><br><span class="line">├── conf</span><br><span class="line">│   └── layer.conf</span><br><span class="line">├── COPYING.MIT</span><br><span class="line">├── README</span><br><span class="line">├── recipes-cmakeexample</span><br><span class="line">│   └── cmakeexample</span><br><span class="line">│       ├── cmakeexample-0.1</span><br><span class="line">│       │   ├── alexcmaketest.cpp</span><br><span class="line">│       │   └── CMakeLists.txt</span><br><span class="line">│       └── cmakeexample_0.1.bb</span><br></pre></td></tr></table></figure>

<h2 id="Build-your-package"><a href="#Build-your-package" class="headerlink" title="Build your package!"></a>Build your package!</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bitbake cmakeexample</span><br></pre></td></tr></table></figure>
<h2 id="Build-your-image"><a href="#Build-your-image" class="headerlink" title="Build your image"></a>Build your image</h2><p>Of course don’t forget to re-build your image.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bitbake fsl-image-qt5-validation-imx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>i.MX 8 getting started: create your kernel module</title>
    <url>/2019-03-26/i-MX-8-getting-started-create-your-kernel-module/</url>
    <content><![CDATA[<p>The normal way that using yocto to do kernel development is really painful… Maybe try out-of-tree build is a better choice.</p>
<a id="more"></a>

<h2 id="Create-and-add-your-layer"><a href="#Create-and-add-your-layer" class="headerlink" title="Create and add your layer"></a>Create and add your layer</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bitbake-layers create-layer --example-recipe-name alexkernel meta-alexkernel</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bitbake-layers add-layer ../sources/meta-alexkernel/</span><br></pre></td></tr></table></figure>
<p>Or you can use exist layer instead, just create recipe files under your layer.</p>
<h2 id="Add-your-source-code-and-Makefile"><a href="#Add-your-source-code-and-Makefile" class="headerlink" title="Add your source code and Makefile"></a>Add your source code and Makefile</h2><p><strong>alex_module.c</strong>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/printk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">alex_module_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Hello from alex module!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">alex_module_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Bye from alex module!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(alex_module_init);</span><br><span class="line"></span><br><span class="line">module_exit(alex_module_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Coding Spirit &lt;coding@spirit.com&gt;"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL v2"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>Makefile</strong>:</p>
<figure class="highlight mk"><table><tr><td class="code"><pre><span class="line">obj-m := alex_module.o</span><br><span class="line"></span><br><span class="line">SRC := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNEL_SRC)</span> M=<span class="variable">$(SRC)</span></span><br><span class="line"></span><br><span class="line"><span class="section">modules_install:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNEL_SRC)</span> M=<span class="variable">$(SRC)</span> modules_install</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.o *~ core .depend .*.cmd *.ko *.mod.c</span><br><span class="line">	rm -f Module.markers Module.symvers modules.order</span><br><span class="line">	rm -rf .tmp_versions Modules.symvers</span><br></pre></td></tr></table></figure>

<h2 id="Modify-recipe-files-and-conf-file"><a href="#Modify-recipe-files-and-conf-file" class="headerlink" title="Modify recipe files and conf file"></a>Modify recipe files and conf file</h2><p><strong>alexkernel_0.1.bb</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUMMARY &#x3D; &quot;kernel module example&quot;</span><br><span class="line">DESCRIPTION &#x3D; &quot;Recipe created by bitbake-layers&quot;</span><br><span class="line">LICENSE &#x3D; &quot;GPL-2.0&quot;</span><br><span class="line">LIC_FILES_CHKSUM &#x3D; &quot;file:&#x2F;&#x2F;$&#123;COMMON_LICENSE_DIR&#125;&#x2F;GPL-2.0;md5&#x3D;801f80980d171dd6425610833a22dbe6&quot;</span><br><span class="line"></span><br><span class="line">inherit module</span><br><span class="line"></span><br><span class="line">SRC_URI &#x3D; &quot;file:&#x2F;&#x2F;Makefile \</span><br><span class="line">            file:&#x2F;&#x2F;alex_module.c&quot;</span><br><span class="line"></span><br><span class="line">S &#x3D; &quot;$&#123;WORKDIR&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>Notice: bitbake support inheritance. Inherit from a exist bbclass will be much easier than rewrite one all by yourself. Take a look at <a href="https://github.com/openembedded/openembedded-core/tree/master/meta/classes" target="_blank" rel="noopener">openembedded github</a> to check how did they implement a base bbclass. BTW <strong>cmake.bbclass</strong> might be useful if you trying to support cmake. </p>
<p><strong>layer.conf</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># We have a conf and classes directory, add to BBPATH</span><br><span class="line">BBPATH .&#x3D; &quot;:$&#123;LAYERDIR&#125;&quot;</span><br><span class="line"></span><br><span class="line"># We have recipes-* directories, add to BBFILES</span><br><span class="line">BBFILES +&#x3D; &quot;$&#123;LAYERDIR&#125;&#x2F;recipes-*&#x2F;*&#x2F;*.bb \</span><br><span class="line">            $&#123;LAYERDIR&#125;&#x2F;recipes-*&#x2F;*&#x2F;*.bbappend&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IMAGE_INSTALL_append +&#x3D; &quot;alexkernel&quot;</span><br><span class="line">KERNEL_MODULE_AUTOLOAD +&#x3D; &quot;alex_module&quot;</span><br><span class="line"></span><br><span class="line">BBFILE_COLLECTIONS +&#x3D; &quot;meta-alexkernel&quot;</span><br><span class="line">BBFILE_PATTERN_meta-alexkernel &#x3D; &quot;^$&#123;LAYERDIR&#125;&#x2F;&quot;</span><br><span class="line">BBFILE_PRIORITY_meta-alexkernel &#x3D; &quot;6&quot;</span><br><span class="line">LAYERSERIES_COMPAT_meta-alexkernel &#x3D; &quot;sumo&quot;</span><br></pre></td></tr></table></figure>

<p>Notice: Module will automatically get loaded when system booting up if <strong>KERNEL_MODULE_AUTOLOAD</strong> was set.</p>
<p>We should have a folder tree as below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   └── layer.conf</span><br><span class="line">├── COPYING.MIT</span><br><span class="line">├── README</span><br><span class="line">└── recipes-alexkernel</span><br><span class="line">    └── alexkernel</span><br><span class="line">        ├── alexkernel-0.1</span><br><span class="line">        │   ├── alex_module.c</span><br><span class="line">        │   └── Makefile</span><br><span class="line">        └── alexkernel_0.1.bb</span><br></pre></td></tr></table></figure>

<h2 id="rebuild-your-rootfs-and-image"><a href="#rebuild-your-rootfs-and-image" class="headerlink" title="rebuild your rootfs and image"></a>rebuild your rootfs and image</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake fsl-image-qt5-validation-imx</span><br></pre></td></tr></table></figure>

<h2 id="Check-your-environment-variables-by-bitbake-e"><a href="#Check-your-environment-variables-by-bitbake-e" class="headerlink" title="Check your environment variables by bitbake -e"></a>Check your environment variables by <strong>bitbake -e</strong></h2><p><strong>bitbake -e</strong> is a very useful command when you trying to debug build problem.</p>
<p>i.e. Check the rootfs folder of your image:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake -e &lt;image&gt; | grep ^IMAGE_ROOTFS=</span><br></pre></td></tr></table></figure>
<p>Check the ${WORKDIR} of your recipe:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake -e &lt;recipe&gt; | grep ^WORKDIR=</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>i.MX 8 getting started: create your general layer</title>
    <url>/2019-03-22/i-MX-8-getting-started-create-your-general-layer/</url>
    <content><![CDATA[<p>This post will tell you how to create your own general layer with a “hello world” app to be built into your EVK.</p>
<a id="more"></a>
<p>Before start, you should run <strong>setup-environment</strong> first.</p>
<h2 id="Create-your-layer"><a href="#Create-your-layer" class="headerlink" title="Create your layer"></a>Create your layer</h2><h3 id="Create-layer-example-by-bitbake-layers"><a href="#Create-layer-example-by-bitbake-layers" class="headerlink" title="Create layer example by bitbake-layers"></a>Create layer example by bitbake-layers</h3><p>Use <strong>bitbake-layers create-layer &lt;layer name&gt;</strong> to create a general layer example.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> imx-yocto-bsp/<span class="built_in">source</span> <span class="comment"># you also can create your layer in other path</span></span><br><span class="line">$ bitbake-layers create-layer meta-alexlayer</span><br></pre></td></tr></table></figure>

<p>Notice: <strong>yocto-layer</strong> has been deprecated after Yocto 2.5. See <a href="https://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html#detailed-supported-distros" target="_blank" rel="noopener">yocto ref manual</a> for more details.</p>
<blockquote>
<p>The yocto-bsp, yocto-kernel, and yocto-layer scripts previously shipped with poky but not in OpenEmbedded-Core have been removed. These scripts are not maintained and are outdated. In many cases, they are also limited in scope. The bitbake-layers create-layer command is a direct replacement for yocto-layer</p>
</blockquote>
<p>It will help you to create a layer with priority of 6. To change to other priority, add option “‐‐priority” or edit <strong>BBFILE_PRIORITY</strong> after creation.</p>
<h3 id="Modification"><a href="#Modification" class="headerlink" title="Modification"></a>Modification</h3><p>Go to your layer path, add some stuff into your <em>conf/layer.conf</em>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IMAGE_INSTALL_append +&#x3D; &quot;example&quot;</span><br><span class="line">LAYERSERIES_COMPAT_meta-alexlayer &#x3D; &quot;sumo&quot;</span><br></pre></td></tr></table></figure>

<p>IMAGE_INSTALL_append will tell bitbake to install your app into image.<br>Notice: It’s required by Yocto Project Compatible version 2 standard to set <strong>LAYERSERIES_COMPAT</strong>. There will be a warning if you didn’t do so. see <a href="https://www.yoctoproject.org/docs/latest/ref-manual/ref-manual.html" target="_blank" rel="noopener">yocto ref manual</a> for more details.</p>
<blockquote>
<p>Note</p>
<p>Setting LAYERSERIES_COMPAT is required by the Yocto Project Compatible version 2 standard. The OpenEmbedded build system produces a warning if the variable is not set for any given layer.</p>
</blockquote>
<p>Then add your source code:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> meta-alexlayer/recipes-example/example</span><br><span class="line">$ mkdir example-0.1</span><br><span class="line">$ <span class="built_in">cd</span> example-0.1</span><br><span class="line">$ touch alexhello.cpp</span><br></pre></td></tr></table></figure>
<p>my example here :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// alexhello.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world from alexlayer"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then modify your recipe file <strong>example_0.1.bb</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUMMARY &#x3D; &quot;bitbake-layers recipe&quot;</span><br><span class="line">DESCRIPTION &#x3D; &quot;Recipe created by bitbake-layers&quot;</span><br><span class="line">LICENSE &#x3D; &quot;MIT&quot;</span><br><span class="line">LIC_FILES_CHKSUM &#x3D; &quot;file:&#x2F;&#x2F;$&#123;COMMON_LICENSE_DIR&#125;&#x2F;MIT;md5&#x3D;0835ade698e0bcf8506ecda2f7b4f302&quot;</span><br><span class="line"></span><br><span class="line">TARGET_CC_ARCH +&#x3D; &quot;$&#123;LDFLAGS&#125;&quot;</span><br><span class="line"></span><br><span class="line">SRC_URI &#x3D; &quot;file:&#x2F;&#x2F;alexhello.cpp&quot;</span><br><span class="line"></span><br><span class="line">S &#x3D; &quot;$&#123;WORKDIR&#125;&quot;</span><br><span class="line"></span><br><span class="line">do_compile() &#123;</span><br><span class="line">    $&#123;CXX&#125; alexhello.cpp -o alexhello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do_install() &#123;</span><br><span class="line">    install -d $&#123;D&#125;$&#123;bindir&#125;</span><br><span class="line">    install -m 0755 alexhello $&#123;D&#125;$&#123;bindir&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">python do_build() &#123;</span><br><span class="line">    bb.plain(&quot;***********************************************&quot;);</span><br><span class="line">    bb.plain(&quot;*                                             *&quot;);</span><br><span class="line">    bb.plain(&quot;*  Example recipe created by bitbake-layers   *&quot;);</span><br><span class="line">    bb.plain(&quot;*                                             *&quot;);</span><br><span class="line">    bb.plain(&quot;***********************************************&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Notice: Here we use <span style="color:red"><strong>TARGET_CC_ARCH += “${LDFLAGS}”</strong></span> to avoid <strong>“No GNU_HASH in the elf binary”</strong> error when QA check, see <a href="https://www.yoctoproject.org/docs/current/mega-manual/mega-manual.html" target="_blank" rel="noopener">mega-manual</a> for more details.</p>
<blockquote>
<p>25.10.8. Default Linker Hash Style Changed</p>
<p>The default linker hash style for gcc-cross is now “sysv” in order to catch recipes that are building software without using the OpenEmbedded LDFLAGS. This change could result in seeing some “No GNU_HASH in the elf binary” QA issues when building such recipes. You need to fix these recipes so that they use the expected LDFLAGS. Depending on how the software is built, the build system used by the software (e.g. a Makefile) might need to be patched. However, sometimes making this fix is as simple as adding the following to the recipe:</p>
<pre><code>TARGET_CC_ARCH += &quot;${LDFLAGS}&quot;</code></pre></blockquote>
<p>After those steps, you should have a folder like this:<br><img src="/2019-03-22/i-MX-8-getting-started-create-your-general-layer/folder_tree.png" alt></p>
<h2 id="Add-your-layer-and-build"><a href="#Add-your-layer-and-build" class="headerlink" title="Add your layer and build"></a>Add your layer and build</h2><p>There are two ways to add your layer into build:</p>
<h3 id="Use-bitbake-layers-add-layer"><a href="#Use-bitbake-layers-add-layer" class="headerlink" title="Use bitbake-layers add-layer"></a>Use <strong>bitbake-layers add-layer</strong></h3><p>Use <strong>bitbake-layers add-layer &lt;layer name&gt;</strong> to add a layer and build it. Before this, you should source <strong>setup-environment</strong>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bitbake-layers add-layer meta-alexlayer</span><br><span class="line">$ bitbake example</span><br></pre></td></tr></table></figure>

<h3 id="Modify-script-provided-by-nxp"><a href="#Modify-script-provided-by-nxp" class="headerlink" title="Modify script provided by nxp"></a>Modify script provided by nxp</h3><p>Modify <strong>fsl-setup-release.sh</strong>, add your layer path to “BBLAYERS”:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"BBLAYERS += \" \$&#123;BSPDIR&#125;/sources/meta-qt5 \""</span> &gt;&gt; <span class="variable">$BUILD_DIR</span>/conf/bblayers.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"BBLAYERS += \" \$&#123;BSPDIR&#125;/sources/meta-alexlayer \""</span> &gt;&gt; <span class="variable">$BUILD_DIR</span>/conf/bblayers.conf <span class="comment"># new layer</span></span><br></pre></td></tr></table></figure>
<p>Then source it and <strong>bitbake</strong> your new layer:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ DISTRO=fsl-imx-xwayland MACHINE=imx8mmevk <span class="built_in">source</span> fsl-setup-release.sh -b build-xwayland</span><br><span class="line">$ bitbake example</span><br></pre></td></tr></table></figure>

<h2 id="Rebuild-your-image-file"><a href="#Rebuild-your-image-file" class="headerlink" title="Rebuild your image file"></a>Rebuild your image file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bitbake fsl-image-qt5-validation-imx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>i.MX 8 getting started: setup environment</title>
    <url>/2019-03-21/i-MX-8-getting-started-setup-environment/</url>
    <content><![CDATA[<p>This post will show you how to setup environment(Linux) for NXP i.MX 8 and build a image fot i.MX8 Mini EVK. If you trying to build a Android image, close this post.</p>
<a id="more"></a>

<h2 id="Before-start"><a href="#Before-start" class="headerlink" title="Before start"></a>Before start</h2><p>Check your host environment:</p>
<ul>
<li>Fedora, openSUSE, CentOS, Debian, or Ubuntu(newer then 14.04, I test with 18.04)</li>
<li>120G disk space if graphical support is need</li>
<li>Git is already setup on your machine</li>
</ul>
<h2 id="Install-tools"><a href="#Install-tools" class="headerlink" title="Install tools"></a>Install tools</h2><p>There are some packages you might haven’t installed but required by Yocto:</p>
<ul>
<li>chrpath</li>
<li>gawk</li>
<li>u-boot-tools</li>
</ul>
<p>use <strong>apt install</strong> install all of them.</p>
<p>Also for <strong>repo</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://storage.googleapis.com/git-repo-downloads/repo  &gt; /usr/<span class="built_in">local</span>/bin/repo</span><br><span class="line">$ chmod a+x /usr/<span class="built_in">local</span>/bin/repo</span><br></pre></td></tr></table></figure>
<p>You can choose your own repo install path, but make sure this path was added into <strong>PATH</strong>.</p>
<h2 id="Yocto-project-setup"><a href="#Yocto-project-setup" class="headerlink" title="Yocto project setup"></a>Yocto project setup</h2><p>We will use i.MX official repo to init.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir imx-yocto-bsp </span><br><span class="line">$ <span class="built_in">cd</span> imx-yocto-bsp </span><br><span class="line">$ repo init -u https://source.codeaurora.org/external/imx/imx-manifest  -b imx-linux-sumo -m imx-4.14.78-1.0.0_ga.xml </span><br><span class="line">$ repo sync</span><br></pre></td></tr></table></figure>
<p>Use <strong>-b &lt;branch-name&gt;</strong> to switch to use other branch if you want. Check on <a href="https://source.codeaurora.org/external/imx/imx-manifest" target="_blank" rel="noopener">https://source.codeaurora.org/external/imx/imx-manifest</a> to find all available branches.</p>
<h2 id="Start-build"><a href="#Start-build" class="headerlink" title="Start build"></a>Start build</h2><h3 id="Choose-one-graphical-backend-for-your-image"><a href="#Choose-one-graphical-backend-for-your-image" class="headerlink" title="Choose one graphical backend for your image"></a>Choose one graphical backend for your image</h3><ul>
<li>fsl-imx-x11 </li>
<li>fsl-imx-wayland</li>
<li>fsl-imx-xwayland</li>
<li>fsl-imx-fb<br>For i.MX8, only fsl-imx-wayland and fsl-imx-xwayland are supported.<br>Then run:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ DISTRO=fsl-imx-xwayland MACHINE=imx8mmevk <span class="built_in">source</span> fsl-setup-release.sh -b build-xwayland </span><br><span class="line">$ bitbake fsl-image-qt5-validation-imx</span><br></pre></td></tr></table></figure>
Set <strong>MACHINE</strong> to other variable if you are not using i.MX8 Mini EVK. Use <strong>-b</strong> in <strong>fsl-setup-release</strong> to specify build dir.</li>
</ul>
<p>Summaries of my build details:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Build Configuration:</span><br><span class="line">BB_VERSION           = <span class="string">"1.38.0"</span></span><br><span class="line">BUILD_SYS            = <span class="string">"x86_64-linux"</span></span><br><span class="line">NATIVELSBSTRING      = <span class="string">"ubuntu-18.04"</span></span><br><span class="line">TARGET_SYS           = <span class="string">"aarch64-poky-linux"</span></span><br><span class="line">MACHINE              = <span class="string">"imx8mmevk"</span></span><br><span class="line">DISTRO               = <span class="string">"fsl-imx-xwayland"</span></span><br><span class="line">DISTRO_VERSION       = <span class="string">"4.14-sumo"</span></span><br><span class="line">TUNE_FEATURES        = <span class="string">"aarch64"</span></span><br><span class="line">TARGET_FPU           = <span class="string">""</span></span><br><span class="line">meta                 </span><br><span class="line">meta-poky            = <span class="string">"HEAD:64a257fa22126c4a40ff7e03424a404e360ebe1e"</span></span><br><span class="line">meta-oe              </span><br><span class="line">meta-multimedia      = <span class="string">"HEAD:2bb21ef27c4b0c9d52d30b3b2c5a0160fd02b966"</span></span><br><span class="line">meta-freescale       = <span class="string">"HEAD:407c6cf408969445031a492e2d25e0e2749582ea"</span></span><br><span class="line">meta-freescale-3rdparty = <span class="string">"HEAD:88a29631809d1af0df618245430db29f2a7012b5"</span></span><br><span class="line">meta-freescale-distro = <span class="string">"HEAD:f7e2216e93aff14ac32728a13637a48df436b7f4"</span></span><br><span class="line">meta-bsp             </span><br><span class="line">meta-sdk             = <span class="string">"HEAD:9867dae67c158e0820bf226bd18b792623e99b25"</span></span><br><span class="line">meta-browser         = <span class="string">"HEAD:75640e14e325479c076b6272b646be7a239c18aa"</span></span><br><span class="line">meta-gnome           </span><br><span class="line">meta-networking      </span><br><span class="line">meta-python          </span><br><span class="line">meta-filesystems     = <span class="string">"HEAD:2bb21ef27c4b0c9d52d30b3b2c5a0160fd02b966"</span></span><br><span class="line">meta-qt5             = <span class="string">"HEAD:d4e7f73d04e8448d326b6f89908701e304e37d65"</span></span><br></pre></td></tr></table></figure>

<h2 id="Restart-a-build-environment"><a href="#Restart-a-build-environment" class="headerlink" title="Restart a build environment"></a>Restart a build environment</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> setup-environment &lt;build-dir&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h2><p>Using <a href="https://github.com/NXPmicro/mfgtools" target="_blank" rel="noopener">mfgtools</a> provided by nxp to flash.</p>
<p>Flash to emmc:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo uuu -b emmc_all imx-boot-imx8mmevk-sd.bin-flash_evk fsl-image-validation-imx-imx8mmevk.sdcard.bz2/*</span><br></pre></td></tr></table></figure>

<p>In develop stage, suggest to use TFTP and NFS for a longer flash life span. See <a href="https://lzqblog.top/2019-05-26/i-MX-setup-TFTP-and-NFS/">i.MX setup TFTP and NFS</a> for more details.</p>
]]></content>
      <categories>
        <category>系统构建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Yocto</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ mixed programming error: undefined reference</title>
    <url>/2019-03-18/C-C-mixed-programming-error-undefined-reference/</url>
    <content><![CDATA[<p>The solution for this issue is very sample, add <span style="color:red">#ifdef __cplusplus extern “C”</span> in your C header files. I have seen a lots of C header files with this code, I also know that those codes will help C code compatible with C++ code, but I had never try to dig in to find out why those codes works until few weeks ago I was trying to call a lib written by C but lib headers didn’t surround with <span style="color:red">#ifdef __cplusplus extern “C”</span>.(Shame on me) This post will tell you why.</p>
<a id="more"></a>

<h2 id="Why-“undefined-reference”"><a href="#Why-“undefined-reference”" class="headerlink" title="Why “undefined reference”?"></a>Why “undefined reference”?</h2><p>Normally, You can see this “undefined reference” error when compiler can’t find your functions’ definition. But if you click into this post, I’m pretty sure that you have checked your code more than once. The reason why you meet this error while mixing programming is C and C++ compilers have different name mangling rules while compiling. In C, one function only can have one definition, but in C++ polymorphism was added so method can have same name but different version definitions with different parameter lists.<br>i.e. you have a function named foo in C:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>Meanwhile you have 2 method in C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> a)</span></span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>C compiler might rename it as <strong>__foo</strong> in assembly. But C++ have to do some changes to make sure method name is unique in assembly, normally in C++ compiler it might be renamed with parameter list like <strong>__Z1_foo_int</strong> and <strong>__Z1_foo_char</strong>. There will be linking error like “undefined reference” when your trying to link a C lib which was compiled by C compiler and your C header files didn’t add <span style="color:red">#ifdef <strong>cplusplus extern “C”</strong></span>, because C++ compiler trying to find a symbol named **Z1_foo_int** but it can’t because it was renamed as <strong>__foo</strong> by C compiler.</p>
<h2 id="Why-extern-“C”-can-solve-this"><a href="#Why-extern-“C”-can-solve-this" class="headerlink" title="Why extern “C” can solve this?"></a>Why extern “C” can solve this?</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**** your declarations *****/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>C compiler will ignore those codes because of marco <strong>#ifdef __cplusplus</strong>, it’s easy to understand. But if you are using a C++ compiler, this <strong>extern “C”</strong> will be active and tell C++ compiler “you should link those functions with C name mangling rules”. In this case, C++ can find function definitions correctly in your C lib.</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake notes</title>
    <url>/2019-03-04/cmake-notes/</url>
    <content><![CDATA[<p>Take notes!</p>
<a id="more"></a>

<h2 id="Use-pkg-config-in-cmake"><a href="#Use-pkg-config-in-cmake" class="headerlink" title="Use pkg-config in cmake"></a>Use pkg-config in cmake</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#require gstreamer and check version, $&#123;GST&#125; is an user defined prefix for _LIBRARIES/_INCLUDE_DIRS/_CFLAGS_OTHER</span></span><br><span class="line">pkg_check_modules(GST REQUIRED gstreamer-<span class="number">1.0</span>&gt;=<span class="number">1.10</span></span><br><span class="line">                  gstreamer-app-<span class="number">1.0</span>&gt;=<span class="number">1.10</span>)</span><br><span class="line"><span class="comment">#Then we can get hidden variables $&#123;GST_LIBRARIES&#125; $&#123;GST_INCLUDE_DIRS&#125; $&#123;GST_CFLAGS_OTHER&#125;</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> boost_log pthread</span><br><span class="line">                  <span class="variable">$&#123;GST_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">target_include_directories</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC <span class="variable">$&#123;GST_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">target_compile_options</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC <span class="variable">$&#123;GST_CFLAGS_OTHER&#125;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Add-all-files-under-a-folder-i-e-add-all-source-files"><a href="#Add-all-files-under-a-folder-i-e-add-all-source-files" class="headerlink" title="Add all files under a folder(i.e. add all source files)"></a>Add all files under a folder(i.e. add all source files)</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#option 1: use file(), store files into variable SRC_FILES</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_FILES <span class="string">"*.cpp"</span>)</span><br><span class="line"><span class="comment">#if there are sub-dirs should be searched, use recursive</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_FILES <span class="string">"*.cpp"</span>)</span><br><span class="line"><span class="comment">#option 2: use aux_source_directory(), store source files into variable SRC_FILES</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC_FILES)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ standard exceptions</title>
    <url>/2019-02-28/C-standard-exceptions/</url>
    <content><![CDATA[<p>…</p>
<a id="more"></a>

<ul>
<li>logic_error(It reports errors that are a consequence of faulty logic within the program such as violating logical preconditions or class invariants and may be preventable.)<ul>
<li>invalid_argument</li>
<li>domain_error</li>
<li>length_error</li>
<li>out_of_range</li>
<li>future_error(C++11)</li>
</ul>
</li>
<li>bad_optional_access(C++17)</li>
<li>runtime_error(It reports errors that are due to events beyond the scope of the program and can not be easily predicted.)<ul>
<li>range_error</li>
<li>overflow_error</li>
<li>underflow_error</li>
<li>regex_error(C++11)</li>
<li>nonexistent_local_time(C++20)</li>
<li>ambiguous_local_time(C++20)</li>
<li>tx_exception(TM TS)</li>
<li>system_error(C++11)</li>
<li>ios_base::failure(C++11)</li>
<li>filesystem::filesystem_error(C++17)</li>
</ul>
</li>
<li>bad_typeid</li>
<li>bad_cast<ul>
<li>bad_any_cast(C++17)</li>
</ul>
</li>
<li>bad_weak_ptr(C++11)</li>
<li>bad_function_call(C++11)</li>
<li>bad_alloc(report failure to allocate storage)<ul>
<li>bad_array_new_length(C++11)</li>
</ul>
</li>
<li>bad_exception</li>
<li>ios_base::failure(until C++11)</li>
<li>bad_variant_access(C++17)</li>
</ul>
<p>For more details, refer to <a href="https://en.cppreference.com/w/cpp/error/exception" target="_blank" rel="noopener">cppreference</a></p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux C/C++ debugging: using adb and gdb</title>
    <url>/2019-02-16/Linux-C-C-debugging-using-adb-and-gdb/</url>
    <content><![CDATA[<p>在大学的时候就一直用gdb + gdbserver 来远程调试C++， 前年开始用VS Code后在板上部署程序后配合VS Code调试更是爽到不行（根本停不下来），有种本地开发的感觉， 再也不用在蛋疼的GDB里面敲‘b’ ‘r’ ‘c’， 哈哈。<br>最近的项目对adb的支持非常不错，usb上传下载速度比ssh不知道高到哪里去了。今天突然想到之前写Android app的时候都能通过usb和adb进行调试， 现在在Linux下调C++应该也可以通过usb+adb实现， 为什么不试一下呢？</p>
<a id="more"></a>

<h2 id="gdb-gdbserver"><a href="#gdb-gdbserver" class="headerlink" title="gdb + gdbserver"></a>gdb + gdbserver</h2><p>既然要调C/C++， 这两兄弟基本上是必备了(VC++程序员表示并不需要)。 在target device上部署待调试程序并启动gdbserver，然后再在host上使用gdb target remote连接， 跨平台调试变得非常容易， 配合VS Code使用的例子可以参考<a href="https://github.com/codingspirit/VoiceSpirit/tree/develop/.vscode" target="_blank" rel="noopener">这里</a></p>
<h2 id="adb-forward"><a href="#adb-forward" class="headerlink" title="adb forward"></a>adb forward</h2><p>gdb和gdbserver可以提供调试的server和client， 只要client能够访问到server的指定端口，调试就能够进行。通常我们使用gdb+gdbserver， target device和host在一个局域网内， 通过socket能很轻松地实现连接。 如果我们要通过usb实现这个连接， 可以通过adb forward实现。 如果你在Android上写过通过socket通信的app（不禁想起了做毕设的时候）， 基本上都会用到这个cmd， 只需一行命令 <strong>adb forward tcp:1234 tcp:5678</strong>, 所有在host端1234端口的通信都会被重定向到target端的5678端口，调试socket时轻松愉快！ 有了它的帮助， 就能通过usb线实现socket连接了</p>
<h2 id="Step-By-Step"><a href="#Step-By-Step" class="headerlink" title="Step By Step"></a>Step By Step</h2><p>Let’s have a quick step by step instruction:</p>
<p>First of all, build your C/C++ app and upload your app binary to target device.</p>
<p>Then we start <strong>gdbserver</strong> on target device:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#target device</span></span><br><span class="line">gdbserver :<span class="variable">$&#123;TARGET_PORT&#125;</span> <span class="variable">$&#123;EXEC_FILE&#125;</span></span><br></pre></td></tr></table></figure>
<p>i.e. :  <strong>gdbserver :1234 /usr/bin/test_app</strong>. gdbserver will listening at port 1234 and waiting for client to connect.</p>
<p>After that we can use <strong>adb forward</strong> on host PC(make sure usb connection is good and adb shell works well):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#host</span></span><br><span class="line">adb forward tcp:<span class="variable">$&#123;HOST_PORT&#125;</span> tcp:<span class="variable">$&#123;TARGET_PORT&#125;</span></span><br></pre></td></tr></table></figure>
<p>All the communication data on specific host port will be redirected to target server port.<br>i.e. : <strong>adb forward tcp:4567 tcp:1234</strong>. Then all the data send to <strong>localhost:4567</strong> on host PC will be redirected to target device <strong>1234</strong> port.</p>
<p>Last step, start gdb on host PC then connect to target gdbserver:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#host</span></span><br><span class="line">$ gdb</span><br><span class="line"><span class="comment">#make sure your gdb and your gdbserver are from one set of toolchain</span></span><br><span class="line">GNU gdb (Debian 7.12-6) 7.12.0.20161007-git</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>.</span><br><span class="line">(gdb) target remote :<span class="variable">$&#123;HOST_PORT&#125;</span></span><br></pre></td></tr></table></figure>
<p>i.e. : <strong>(gdb) target remote :4567</strong></p>
<p>Now we can start hunting bug!</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux kernel module(3)</title>
    <url>/2018-12-23/Linux-kernel-module-3/</url>
    <content><![CDATA[<p>This post will give a simple introduction to Linux kernel module(Part III.).</p>
<p>Linux kernel module简介(三)</p>
<a id="more"></a>
<p>In this post we will discuss how to call kernel driver in user space.</p>
<h2 id="Access-IIO-devices-from-user-space"><a href="#Access-IIO-devices-from-user-space" class="headerlink" title="Access IIO devices from user space"></a>Access IIO devices from user space</h2><p>In last two posts we use a IIO(Linux Industrial I/O Subsystem) device st_uvis25 as a example to show how to write a kernel module. There are a lot of devices fall into this subsystem:</p>
<ul>
<li>ADCs</li>
<li>Accelerometers</li>
<li>Gyros</li>
<li>IMUs</li>
<li>Capacitance to Digital Converters (CDCs)</li>
<li>Pressure Sensors</li>
<li>Color, Light and Proximity Sensors</li>
<li>Temperature Sensors</li>
<li>Magnetometers</li>
<li>DACs</li>
<li>DDS (Direct Digital Synthesis)</li>
<li>PLLs (Phase Locked Loops)</li>
<li>Variable/Programmable Gain Amplifiers (VGA, PGA)</li>
</ul>
<p>In st_uvis25_core.c, a <strong>iio_info</strong> has been defined and assigned to a <strong>iio_dev</strong> in probe function:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// st_uvis25_core.c, Line 267</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">iio_info</span> <span class="title">st_uvis25_info</span> = &#123;</span></span><br><span class="line">	.read_raw = st_uvis25_read_raw,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_uvis25_probe</span><span class="params">(struct device *dev, <span class="keyword">int</span> irq, struct regmap *regmap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">st_uvis25_hw</span> *<span class="title">hw</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">iio_dev</span> *<span class="title">iio_dev</span>;</span></span><br><span class="line">	<span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">	iio_dev = devm_iio_device_alloc(dev, <span class="keyword">sizeof</span>(*hw));</span><br><span class="line">	<span class="keyword">if</span> (!iio_dev)</span><br><span class="line">		<span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">	dev_set_drvdata(dev, (<span class="keyword">void</span> *)iio_dev);</span><br><span class="line"></span><br><span class="line">	hw = iio_priv(iio_dev);</span><br><span class="line">	hw-&gt;irq = irq;</span><br><span class="line">	hw-&gt;regmap = regmap;</span><br><span class="line"></span><br><span class="line">	err = st_uvis25_check_whoami(hw);</span><br><span class="line">	<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">	iio_dev-&gt;modes = INDIO_DIRECT_MODE;</span><br><span class="line">	iio_dev-&gt;dev.parent = dev;</span><br><span class="line">	iio_dev-&gt;channels = st_uvis25_channels;</span><br><span class="line">	iio_dev-&gt;num_channels = ARRAY_SIZE(st_uvis25_channels);</span><br><span class="line">	iio_dev-&gt;name = ST_UVIS25_DEV_NAME;</span><br><span class="line">	iio_dev-&gt;info = &amp;st_uvis25_info;</span><br><span class="line"></span><br><span class="line">	err = st_uvis25_init_sensor(hw);</span><br><span class="line">	<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (hw-&gt;irq &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		err = st_uvis25_allocate_buffer(iio_dev);</span><br><span class="line">		<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">		err = st_uvis25_allocate_trigger(iio_dev);</span><br><span class="line">		<span class="keyword">if</span> (err)</span><br><span class="line">			<span class="keyword">return</span> err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> devm_iio_device_register(dev, iio_dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If <strong>devm_iio_device_register</strong> success and iio_info.read_raw has been registered, a file will be created at :<br>/sys/bus/iio/devices/iio:device0/xxx_raw<br>In terminal, you can read it by <strong>cat</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /sys/bus/iio/devices/iio:device0/xxx_raw</span><br></pre></td></tr></table></figure>
<p>In C/C++ applications, you can use <strong>fopen</strong> because it’s a file.</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Comments system has been added</title>
    <url>/2018-12-22/Comments-system-has-been-added/</url>
    <content><![CDATA[<p>现在blog支持使用Github帐号评论啦！<br>You can use your github account to add comments now!<br><img src="/2018-12-22/Comments-system-has-been-added/Screenshot&#32;from&#32;2018-12-22&#32;09-46-07.png" alt></p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux kernel module(2)</title>
    <url>/2018-12-16/Linux-kernel-module-2/</url>
    <content><![CDATA[<p>This post will give a simple introduction to Linux kernel module(Part II.).</p>
<p>Linux kernel module简介(二)</p>
<a id="more"></a>
<p>Let’s continue the unfinished parts we left in <a href="https://lzqblog.top/2018-12-08/Linux-kernel-module-1/">Part I.</a>.</p>
<h2 id="A-I2C-module"><a href="#A-I2C-module" class="headerlink" title="A I2C module"></a>A I2C module</h2><h3 id="What-is-regmap"><a href="#What-is-regmap" class="headerlink" title="What is regmap"></a>What is regmap</h3><p><strong>regmap</strong> is a new API added in kernel 3.1. It helps to provide a abstraction for I2C/SPI/IRQ etc. operations. If chips provide both I2C and SPI interfaces, using regmap also can help to reuse part of code. In this example(st_uvis25, a UVI sensor), it provides another SPI driver(st_uvis25_spi.c), and a interfaces-nonrelevant file(st_uvis25_core.c) as well. st_uvis25_core.c will not care which kind of interfaces you are using, every I2C/SPI read/write will be done through regmap. If you put your device on I2C bus in dts file, regmap will call I2C operate functions when you use <strong>regmap_write</strong>, if it’s on SPI bus, regmap will call SPI operate functions instead.</p>
<p>Tos use regmap API, a <strong>regmap_config</strong> should be defined. <strong>reg_bits</strong> and <strong>val_bits</strong> defined the register address length and data length inside this device. write_flag_mask and read_flag_mask will do OR operation with the data you trying to send/read(they are optional):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// linux-4.9/drivers/base/regmap/regmap.c, Line 2002</span></span><br><span class="line">	u8 = buf;</span><br><span class="line">	*u8 |= <span class="built_in">map</span>-&gt;write_flag_mask;</span><br></pre></td></tr></table></figure>
<p>Then use <strong>devm_regmap_init_i2c</strong> or <strong>devm_regmap_init_spi</strong> to initialize your regmap. It will help you to allocate memory for your regmap and release it when module remove.</p>
<h3 id="How-to-use-regmap-to-control-device"><a href="#How-to-use-regmap-to-control-device" class="headerlink" title="How to use regmap to control device"></a>How to use regmap to control device</h3><p>Let’s take a look at <strong>st_uvis25.h</strong> and <strong>st_uvis25_core.c</strong>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// st_uvis25.h, Line 26</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st_uvis25_hw</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">regmap</span> *<span class="title">regmap</span>;</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">iio_trigger</span> *<span class="title">trig</span>;</span></span><br><span class="line">	<span class="keyword">bool</span> enabled;</span><br><span class="line">	<span class="keyword">int</span> irq;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// st_uvis25_core.c Line 55</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">st_uvis25_check_whoami</span><span class="params">(struct st_uvis25_hw *hw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> err, data;</span><br><span class="line"></span><br><span class="line">	err = regmap_read(hw-&gt;regmap, ST_UVIS25_REG_WHOAMI_ADDR, &amp;data);</span><br><span class="line">	<span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		dev_err(regmap_get_device(hw-&gt;regmap),</span><br><span class="line">			<span class="string">"failed to read whoami register\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> err;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (data != ST_UVIS25_REG_WHOAMI_VAL) &#123;</span><br><span class="line">		dev_err(regmap_get_device(hw-&gt;regmap),</span><br><span class="line">			<span class="string">"wrong whoami &#123;%02x vs %02x&#125;\n"</span>,</span><br><span class="line">			data, ST_UVIS25_REG_WHOAMI_VAL);</span><br><span class="line">		<span class="keyword">return</span> -ENODEV;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This <strong>st_uvis25_check_whoami</strong> uses regmap_read to read value from register <strong>ST_UVIS25_REG_WHOAMI_ADDR</strong> and compares it to <strong>ST_UVIS25_REG_WHOAMI_VAL</strong>.</p>
<h3 id="i2c-probe-and-probe"><a href="#i2c-probe-and-probe" class="headerlink" title="i2c_probe and probe"></a>i2c_probe and probe</h3><p>In last post we already know that <strong>module_i2c_driver</strong> actually are encapsulations of module_init/exit, so it’s easy to understand that st_uvis25_i2c_probe will be called when install mod. But how about <strong>st_uvis25_probe</strong>, where does it come from?</p>
<h3 id="EXPORT-SYMBOL"><a href="#EXPORT-SYMBOL" class="headerlink" title="EXPORT_SYMBOL"></a>EXPORT_SYMBOL</h3><p>As I mentioned in last section, there are two more files, this <strong>st_uvis25_probe</strong> is export from one of them(st_uvis25_core.c):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_uvis25_probe</span><span class="params">(struct device *dev, <span class="keyword">int</span> irq, struct regmap *regmap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(st_uvis25_probe);</span><br></pre></td></tr></table></figure>
<p><strong>EXPORT_SYMBOL</strong> is a marco defined in linux-4.9/include/linux/export.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// linux-4.9/include/linux/export.h, Line 56</span></span><br><span class="line"><span class="comment">/* For every exported symbol, place a struct in the __ksymtab section */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ___EXPORT_SYMBOL(sym, sec)					\</span></span><br><span class="line">	<span class="function"><span class="keyword">extern</span> <span class="title">typeof</span><span class="params">(sym)</span> sym</span>;						\</span><br><span class="line">	__CRC_SYMBOL(sym, sec)						\</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> __kstrtab_#<span class="meta">#sym[]				\</span></span><br><span class="line">	__attribute__((section(<span class="string">"__ksymtab_strings"</span>), aligned(<span class="number">1</span>)))	\</span><br><span class="line">	= VMLINUX_SYMBOL_STR(sym);					\</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">kernel_symbol</span> __<span class="title">ksymtab_</span>##<span class="title">sym</span>		\</span></span><br><span class="line"><span class="class">	__<span class="title">used</span>								\</span></span><br><span class="line"><span class="class">	__<span class="title">attribute__</span>((<span class="title">section</span>("___<span class="title">ksymtab</span>" <span class="title">sec</span> "+" #<span class="title">sym</span>), <span class="title">used</span>))	\</span></span><br><span class="line"><span class="class">	= &#123;</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span>)&amp;sym, __kstrtab_#<span class="meta">#sym &#125;</span></span><br></pre></td></tr></table></figure>

<p>In newer kernel 4.19.9, this marco has been simplified to:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* For every exported symbol, place a struct in the __ksymtab section */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ___EXPORT_SYMBOL(sym, sec)					\</span></span><br><span class="line">	<span class="function"><span class="keyword">extern</span> <span class="title">typeof</span><span class="params">(sym)</span> sym</span>;						\</span><br><span class="line">	__CRC_SYMBOL(sym, sec)						\</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> __kstrtab_#<span class="meta">#sym[]				\</span></span><br><span class="line">	__attribute__((section(<span class="string">"__ksymtab_strings"</span>), used, aligned(<span class="number">1</span>)))	\</span><br><span class="line">	= #sym;								\</span><br><span class="line">	__KSYMTAB_ENTRY(sym, sec)</span><br></pre></td></tr></table></figure>

<p>When you use it as <strong>EXPORT_SYMBOL(my_export, GPL)</strong>,it will be expanded like this:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">typeof</span><span class="params">(my_export)</span> my_export</span>;						\</span><br><span class="line">__CRC_SYMBOL(my_export, GPL)						\</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> __kstrtab_my_export[]				\</span><br><span class="line">__attribute__((section(<span class="string">"__ksymtab_strings"</span>), aligned(<span class="number">1</span>)))	\</span><br><span class="line">= VMLINUX_SYMBOL_STR(my_export);					\</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">kernel_symbol</span> __<span class="title">ksymtab_my_export</span>		\</span></span><br><span class="line"><span class="class">__<span class="title">used</span>								\</span></span><br><span class="line"><span class="class">__<span class="title">attribute__</span>((<span class="title">section</span>("___<span class="title">ksymtab</span>" <span class="title">GPL</span> "+" <span class="title">my_export</span>), <span class="title">used</span>))	\</span></span><br><span class="line"><span class="class">= &#123;</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span>)&amp;my_export, __kstrtab_my_export &#125;</span><br></pre></td></tr></table></figure>
<p>It will be simpler if ignore <strong>attribute</strong> and __used(there are gcc attributes) and expand again:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> __kstrtab_my_export[] =” my_export”;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">kernel_symbol__ksymtab_my_export</span>=&#123;</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>)&amp;my_export,_kstrab_my_export&#125;</span><br></pre></td></tr></table></figure>
<p>This part of code declared a static const char array to store symbol name and a static const struct to store address and name of this symbol.</p>
<p>If we add <strong>attribute</strong> back again, this char array will be put into section <strong>__ksymtab_strings</strong> and struct will be put into section <strong>__ksymatab_gpl</strong>.</p>
<p>How to call drivers in user space will be discussed in Part III.<br>To be continued…</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux kernel module(1)</title>
    <url>/2018-12-09/Linux-kernel-module-1/</url>
    <content><![CDATA[<p>This post will give a simple introduction to Linux kernel module(Part I.).</p>
<p>Linux kernel module简介(一)</p>
<a id="more"></a>
<p>When your system has a new external chip connected(I2C,SPI,GPIO etc.), you might need to write a driver for it by yourself. Normally this driver will be implemented as a kernel module. </p>
<p>Kernel module development is a complex task and it’s hard to make it clear in one simple post. If you want to learn more, a good choice is taking a look at Linux kernel source code.</p>
<h2 id="The-simplest-example-of-kernel-module"><a href="#The-simplest-example-of-kernel-module" class="headerlink" title="The simplest example of kernel module"></a>The simplest example of kernel module</h2><h3 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file:simple_module.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/printk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">sample_module_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	printk(KERN_INFO <span class="string">"Hello world!\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">sample_module_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	printk(KERN_INFO <span class="string">"Bye!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(sample_module_init);</span><br><span class="line"></span><br><span class="line">module_exit(sample_module_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Coding Spirit &lt;coding@spirit.com&gt;"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL v2"</span>);</span><br></pre></td></tr></table></figure>

<p>This simple example shows basic structure of kernel module. A <strong>init</strong> function and a <strong>exit</strong> function must be declared, to avoid warnings, <strong>MODULE_AUTHOR</strong> and <strong>MODULE_LICENSE</strong> is needed as well.</p>
<h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><p>To compile it to kernel module(.ko) file, we need to write a Makefile for it.</p>
<figure class="highlight mk"><table><tr><td class="code"><pre><span class="line">simple-module-objs := simple_module.o</span><br><span class="line"></span><br><span class="line">obj-m := simple-module.o</span><br></pre></td></tr></table></figure>
<p>In this Makefile <strong>$(<executable>-objs)</executable></strong> lists all objects used to link the final executable, <strong>obj-m</strong> means loadable module goals, it will generate a standalone .ko file, then we can use <strong>insmod</strong> to install it. If change it to <strong>obj-y</strong>, it will be compiled into kernel.</p>
<h3 id="Test-this-module"><a href="#Test-this-module" class="headerlink" title="Test this module"></a>Test this module</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clear debug message first</span></span><br><span class="line">dmesg -c</span><br><span class="line"><span class="comment"># see modules already installed</span></span><br><span class="line">lsmod</span><br><span class="line"><span class="comment"># install simple module</span></span><br><span class="line">insmod simple-module.ko</span><br><span class="line"><span class="comment"># check debug message</span></span><br><span class="line">dmesg</span><br><span class="line"><span class="comment"># remove simple module</span></span><br><span class="line">rmmod simple-module.ko</span><br><span class="line">dmesg</span><br></pre></td></tr></table></figure>

<h3 id="What-are-module-init-exit-and-init-exit"><a href="#What-are-module-init-exit-and-init-exit" class="headerlink" title="What are module_init/exit and __init/exit"></a>What are module_init/exit and __init/exit</h3><p>module_init and module_exit are macros to help register module init and exit functions. Use your F12, go to definition:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __define_initcall(fn, id) \</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">initcall_t</span> __initcall_#<span class="meta">#fn##id __used \</span></span><br><span class="line">	__attribute__((__section__(<span class="string">".initcall"</span> #id <span class="string">".init"</span>))) = fn;</span><br></pre></td></tr></table></figure>

<p><em>fn</em> is your function name, <em>id</em> stand for priority, for module_init, this level will be set as 6.</p>
<p>After using this marco, your init function will be called when <strong>do_initcalls</strong> was called(<em>init/main.c</em>)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function">init <span class="title">do_initcalls</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (level = <span class="number">0</span>; level &lt; ARRAY_SIZE(initcall_levels) - <span class="number">1</span>; level++)</span><br><span class="line">		do_initcall_level(level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>as for marco <strong>__init</strong> , It tells the compiler to put this function in a special section, which is declared in vmlinux.lds. <strong>__init</strong> puts the function in the “.init.text” section.</p>
<p>Take a look at where it defined(/linux-4.9/include/linux/init.h):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* These macros are used to mark some functions or</span></span><br><span class="line"><span class="comment"> * initialized data (doesn't apply to uninitialized data)</span></span><br><span class="line"><span class="comment"> * as `initialization' functions. The kernel can take this</span></span><br><span class="line"><span class="comment"> * as hint that the function is used only during the initialization</span></span><br><span class="line"><span class="comment"> * phase and free up used memory resources after*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* These are for everybody (although not all archs will actually</span></span><br><span class="line"><span class="comment">   discard it in modules) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __init		__section(.init.text)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __initdata	__section(.init.data)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __exitdata	__section(.exit.data)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __exit_call	__used __section(.exitcall.exit)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MODULE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __exit		__section(.exit.text)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __exit		__used __section(.exit.text)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>As we can see in comment, if you use <strong>__init</strong> to mark it, memory will be released after initialization.</p>
<h2 id="A-I2C-module"><a href="#A-I2C-module" class="headerlink" title="A I2C module"></a>A I2C module</h2><p>This simple module is useless, let’s take a look at a more useful one: <a href="https://github.com/torvalds/linux/blob/6f0d349d922ba44e4348a17a78ea51b7135965b1/drivers/iio/light/st_uvis25_i2c.c" target="_blank" rel="noopener"><em>linux/drivers/iio/light/st_uvis25_i2c.c</em></a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * STMicroelectronics uvis25 i2c driver</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2017 STMicroelectronics Inc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Lorenzo Bianconi &lt;lorenzo.bianconi83@gmail.com&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the GPL-2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/acpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"st_uvis25.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UVIS25_I2C_AUTO_INCREMENT	BIT(7)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">regmap_config</span> <span class="title">st_uvis25_i2c_regmap_config</span> = &#123;</span></span><br><span class="line">	.reg_bits = <span class="number">8</span>,</span><br><span class="line">	.val_bits = <span class="number">8</span>,</span><br><span class="line">	.write_flag_mask = UVIS25_I2C_AUTO_INCREMENT,</span><br><span class="line">	.read_flag_mask = UVIS25_I2C_AUTO_INCREMENT,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">st_uvis25_i2c_probe</span><span class="params">(struct i2c_client *client,</span></span></span><br><span class="line"><span class="function"><span class="params">			       <span class="keyword">const</span> struct i2c_device_id *id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">regmap</span> *<span class="title">regmap</span>;</span></span><br><span class="line"></span><br><span class="line">	regmap = devm_regmap_init_i2c(client, &amp;st_uvis25_i2c_regmap_config);</span><br><span class="line">	<span class="keyword">if</span> (IS_ERR(regmap)) &#123;</span><br><span class="line">		dev_err(&amp;client-&gt;dev, <span class="string">"Failed to register i2c regmap %d\n"</span>,</span><br><span class="line">			(<span class="keyword">int</span>)PTR_ERR(regmap));</span><br><span class="line">		<span class="keyword">return</span> PTR_ERR(regmap);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> st_uvis25_probe(&amp;client-&gt;dev, client-&gt;irq, regmap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">st_uvis25_i2c_of_match</span>[] = &#123;</span></span><br><span class="line">	&#123; .compatible = <span class="string">"st,uvis25"</span>, &#125;,</span><br><span class="line">	&#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">MODULE_DEVICE_TABLE(of, st_uvis25_i2c_of_match);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">st_uvis25_i2c_id_table</span>[] = &#123;</span></span><br><span class="line">	&#123; ST_UVIS25_DEV_NAME &#125;,</span><br><span class="line">	&#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">MODULE_DEVICE_TABLE(i2c, st_uvis25_i2c_id_table);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">st_uvis25_driver</span> = &#123;</span></span><br><span class="line">	.driver = &#123;</span><br><span class="line">		.name = <span class="string">"st_uvis25_i2c"</span>,</span><br><span class="line">		.pm = &amp;st_uvis25_pm_ops,</span><br><span class="line">		.of_match_table = of_match_ptr(st_uvis25_i2c_of_match),</span><br><span class="line">	&#125;,</span><br><span class="line">	.probe = st_uvis25_i2c_probe,</span><br><span class="line">	.id_table = st_uvis25_i2c_id_table,</span><br><span class="line">&#125;;</span><br><span class="line">module_i2c_driver(st_uvis25_driver);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Lorenzo Bianconi &lt;lorenzo.bianconi83@gmail.com&gt;"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"STMicroelectronics uvis25 i2c driver"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL v2"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="What-are-module-i2c-driver-and-MODULE-DEVICE-TABLE"><a href="#What-are-module-i2c-driver-and-MODULE-DEVICE-TABLE" class="headerlink" title="What are module_i2c_driver and MODULE_DEVICE_TABLE"></a>What are module_i2c_driver and MODULE_DEVICE_TABLE</h3><p>Like module_init we mentioned, they are marcos as well. Use your holy F12:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * module_i2c_driver() - Helper macro for registering a modular I2C driver</span></span><br><span class="line"><span class="comment"> * @__i2c_driver: i2c_driver struct</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Helper macro for I2C drivers which do not do anything special in module</span></span><br><span class="line"><span class="comment"> * init/exit. This eliminates a lot of boilerplate. Each module may only</span></span><br><span class="line"><span class="comment"> * use this macro once, and calling it replaces module_init() and module_exit()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> module_i2c_driver(__i2c_driver) \</span></span><br><span class="line">	module_driver(__i2c_driver, i2c_add_driver, \</span><br><span class="line">			i2c_del_driver)</span><br></pre></td></tr></table></figure>
<p>As for <strong>module_driver</strong>, marco AGAIN:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * module_driver() - Helper macro for drivers that don't do anything</span></span><br><span class="line"><span class="comment"> * special in module init/exit. This eliminates a lot of boilerplate.</span></span><br><span class="line"><span class="comment"> * Each module may only use this macro once, and calling it replaces</span></span><br><span class="line"><span class="comment"> * module_init() and module_exit().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @__driver: driver name</span></span><br><span class="line"><span class="comment"> * @__register: register function for this driver type</span></span><br><span class="line"><span class="comment"> * @__unregister: unregister function for this driver type</span></span><br><span class="line"><span class="comment"> * @...: Additional arguments to be passed to __register and __unregister.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use this macro to construct bus specific macros for registering</span></span><br><span class="line"><span class="comment"> * drivers, and do not use it on its own.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> module_driver(__driver, __register, __unregister, ...) \</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __init __driver##_init(<span class="keyword">void</span>) \</span><br><span class="line">&#123; \</span><br><span class="line">	<span class="keyword">return</span> __register(&amp;(__driver) , ##__VA_ARGS__); \</span><br><span class="line">&#125; \</span><br><span class="line">module_init(__driver##_init); \</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __exit __driver##_exit(<span class="keyword">void</span>) \</span><br><span class="line">&#123; \</span><br><span class="line">	__unregister(&amp;(__driver) , ##__VA_ARGS__); \</span><br><span class="line">&#125; \</span><br><span class="line">module_exit(__driver##_exit);</span><br></pre></td></tr></table></figure>

<p>As you can see, those marcos actually are encapsulations of module_init/exit.</p>
<p>And for <strong>MODULE_DEVICE_TABLE</strong>, it’s just help to create an alias, if there is any nodes in <strong>dts</strong> has the same <strong>compatible</strong> with your drivers, <strong>probe</strong> function will be called.<br>As a driver writer, you have no idea how will user enumerate it(By of or i2c), so provide both of them is necessary.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MODULE</span></span><br><span class="line"><span class="comment">/* Creates an alias so file2alias.c can find device table. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_DEVICE_TABLE(type, name)					\</span></span><br><span class="line">extern typeof(name) __mod_##type##__##name##_device_table		\</span><br><span class="line">  __attribute__ ((unused, alias(__stringify(name))))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  <span class="comment">/* !MODULE */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_DEVICE_TABLE(type, name)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p><strong>regmap</strong> etc. will be discussed in Part II. </p>
<p>To be continued…</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown frequently used syntax</title>
    <url>/2018-11-24/Markdown-frequently-used-syntax/</url>
    <content><![CDATA[<p>Markdown 常用语法小结</p>
<p>写了这么久的md, 偶尔还是会忘记一些细节，干脆写篇日志总结一下，以备不时之需</p>
<a id="more"></a>

<h2 id="Highlight-突出显示"><a href="#Highlight-突出显示" class="headerlink" title="Highlight(突出显示)"></a>Highlight(突出显示)</h2><table>
<thead>
<tr>
<th align="center">Item</th>
<th align="center">How to use</th>
<th align="center">Preview</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Bold(加粗)</td>
<td align="center">**Bold Text**</td>
<td align="center"><strong>Bold Text</strong></td>
</tr>
<tr>
<td align="center">Italic(斜体)</td>
<td align="center">*Italic Text*</td>
<td align="center"><em>Italic Text</em></td>
</tr>
<tr>
<td align="center">Strike Through(删除线)</td>
<td align="center">~~Strike Through Text~~</td>
<td align="center"><del>Strike Through Text</del></td>
</tr>
<tr>
<td align="center">Font Color(字体颜色)</td>
<td align="center">&lt;span style=&quot;color:red&quot;&gt;Red Text&lt;/span&gt;</td>
<td align="center"><span style="color:red">Red Text</span></td>
</tr>
</tbody></table>
<p>Markdown本身不支持更改字体颜色，但是支持插入HTML, 上面的&lt;span&gt;其实是HTML的标签。 如果还有其他奇奇怪怪的要求(如更改字体，更改大小，设置指针样式)，也可以使用&lt;span&gt;实现:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:blue;font-family:Impact;font-style:italic;cursor:crosshair;font-size:30px"</span>&gt;</span>Impact font blue italic 30px with crosshair pointer<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下（鼠标移到上面试试）：</p>
<p><span style="color:blue;font-family:Impact;font-style:italic;cursor:crosshair;font-size:30px">Impact font blue italic 30px with crosshair pointer</span></p>
<h2 id="Table-表格"><a href="#Table-表格" class="headerlink" title="Table(表格)"></a>Table(表格)</h2><p>Markdown 支持插入简单的表格:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">| Default   | left aligned | right aligned | mid aligned |</span><br><span class="line">| --------- | :----------- | ------------: | :---------: |</span><br><span class="line">| short     | short        | short         | short       |</span><br><span class="line">| long text | long text    | long text     | long text   |</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>Default</th>
<th align="left">left aligned</th>
<th align="right">right aligned</th>
<th align="center">mid aligned</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td align="left">short</td>
<td align="right">short</td>
<td align="center">short</td>
</tr>
<tr>
<td>long text</td>
<td align="left">long text</td>
<td align="right">long text</td>
<td align="center">long text</td>
</tr>
</tbody></table>
<p>表格内容的对齐方式可以通过更改”&minus;&minus;&minus;”进行调整：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">-----    //默认，标题居中，内容左对齐</span><br><span class="line">:----    //标题和内容都左对齐</span><br><span class="line">-----:   //标题和内容都右对齐</span><br><span class="line">:----:   //标题和内容都居中对齐</span><br></pre></td></tr></table></figure>

<h2 id="Insert-image-or-super-link-图片和超链接"><a href="#Insert-image-or-super-link-图片和超链接" class="headerlink" title="Insert image or super link(图片和超链接)"></a>Insert image or super link(图片和超链接)</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>  使用<strong>![Background Text](image_path ‘Title’)</strong>可以插入图片, 其中:</p>
<ul>
<li>Background Text: 显示在图片下层的文字，也就是说如果图片显示正常的话一般会被挡住看不见</li>
<li>image_path: 图像源文件的路径。可以是网络链接，也可以是本地路径</li>
<li>Title: 显示在图片下方的标题</li>
</ul>
<p>如：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![](Markdown-frequently-used-syntax/IMG<span class="emphasis">_20170621_</span>154100.jpg 'Flying Spirit')</span><br></pre></td></tr></table></figure>

<p><img src="/2018-11-24/Markdown-frequently-used-syntax/IMG_20170621_154100.jpg" alt title="Flying Spirit"></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>使用<strong>[Suerp_Link](url)</strong>的方式插入超链接, 其中:</p>
<ul>
<li>Suerp_Link: 超链接显示的文本</li>
<li>url: 指向的链接</li>
</ul>
<p>如:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">一位程序员，比较帅的那种</span>](<span class="link">https://www.lzqblog.top</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.lzqblog.top" target="_blank" rel="noopener">一位程序员，比较帅的那种</a></p>
<h2 id="Check-box"><a href="#Check-box" class="headerlink" title="Check box"></a>Check box</h2><p>Markdown也支持带check box的样式，用户可以通过单击来框选，但是这种样式在静态页面中没什么用</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[x] item1</span><br><span class="line"><span class="bullet">- </span>[ ] item2</span><br><span class="line"><span class="bullet">- </span>[x] item3</span><br></pre></td></tr></table></figure>

<ul>
<li><input checked disabled type="checkbox"> item1</li>
<li><input disabled type="checkbox"> item2</li>
<li><input checked disabled type="checkbox"> item3</li>
</ul>
<h2 id="Flow-流程图"><a href="#Flow-流程图" class="headerlink" title="Flow(流程图)"></a>Flow(流程图)</h2><p>Markdown 甚至支持直接画流程图</p>
<p><img src="/2018-11-24/Markdown-frequently-used-syntax/006HJgYYgy1fex00ntxymg308c08c74b.png" alt></p>
<p>要创建流程图只需两步：1.声明元素 2.连接元素<br>一个简单的例子：</p>
<p>```flow<br>flow<br>st=&gt;start: Main Start:&gt;<a href="http://www.lzqblog.top" target="_blank" rel="noopener">www.lzqblog.top</a><br>input=&gt;inputoutput: input a<br>op=&gt;operation: a–<br>sb=&gt;subroutine: a = a!<br>cond=&gt;condition: a &gt; 100?<br>output=&gt;inputoutput: print a<br>e=&gt;end<br>st-&gt;input-&gt;op-&gt;cond<br>cond(no,right)-&gt;sb(right)-&gt;output(right)-&gt;op<br>cond(yes,down)-&gt;e<br>```<br>效果如下：</p>
<div id="flowchart-0" class="flow-chart"></div>

<h3 id="流程图的基本语法"><a href="#流程图的基本语法" class="headerlink" title="流程图的基本语法"></a>流程图的基本语法</h3><p><strong>声明元素</strong>:</p>
<p>tag=&gt;type: content:&gt;url</p>
<p>tag 为标签，在连接元素的时候会用到<br>type为元素类型，常用的有 start condition operation inputoutput subroutine end几种<br>content 为显示在元素中的内容<br>url为可添加的超链接</p>
<p><strong>连接元素</strong>：<br>对于非条件元素:<br>tag1-&gt;tag2<br>默认的箭头方向是向下(down)，也可以指定箭头方向：<br>tag1(right)-&gt;tag2<br>对于条件元素(condition)，多了一个yes or no参数:<br>condition_tag(no,right)-&gt;tag2<br>condition_tag(yes,down)-&gt;tag2</p>
<p>注： hexo默认不支持Markdown流程图，要在hexo上显示流程图需要安装hexo-filter-flowchart</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>

<p>常用的差不多就这些，有想到的以后再补充吧</p>
<p><img src="/2018-11-24/Markdown-frequently-used-syntax/75aecbdeb48f8c5448e454b638292df5e1fe7f70.gif" alt></p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">flow
st=>start: Main Start:>http://www.lzqblog.top
input=>inputoutput: input a
op=>operation: a--
sb=>subroutine: a = a!
cond=>condition: a > 100?
output=>inputoutput: print a
e=>end
st->input->op->cond
cond(no,right)->sb(right)->output(right)->op
cond(yes,down)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux: ‘adb devices’ can&#39;t find devices</title>
    <url>/2018-11-23/Linux-%E2%80%98adb-devices%E2%80%99-can-t-find-devices/</url>
    <content><![CDATA[<p>A strange issue was found on my Debian PC that <strong>adb devices</strong> can’t find any device meanwhile <strong>lsusb</strong> can find the device I need.</p>
<a id="more"></a>
<h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsusb</span><br><span class="line">Bus 002 Device 006: ID 18d1:4e26 Google Inc. </span><br><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Copy the first 4 characters of your device ID when you type <strong>lsusb</strong> (mark it as red):</p>
<p>Bus 002 Device 006: ID <span style="color:red">18d1</span>:4e26 Google Inc. </p>
<p>Add it into file <em>~/.android/adb_usb.ini</em> or create it if it doesn’t exist:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ANDROID 3RD PARTY USB VENDOR ID LIST -- DO NOT EDIT.</span><br><span class="line"># USE &#39;android update adb&#39; TO GENERATE.</span><br><span class="line"># 1 USB VENDOR ID PER LINE.</span><br><span class="line">0x18d1</span><br></pre></td></tr></table></figure>
<p>After that, you need to restart your adb server:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ adb <span class="built_in">kill</span>-server </span><br><span class="line">$ adb start-server</span><br><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">0123456789ABCDEF	device</span><br></pre></td></tr></table></figure>
<p>Now it can be detected by <strong>adb devices</strong></p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian: nvidia display card driver install</title>
    <url>/2018-11-20/Debian-nvidia-display-card-driver-install/</url>
    <content><![CDATA[<p>Bumblebee aims to provide support for NVIDIA Optimus laptops for GNU/Linux distributions(<a href="https://www.bumblebee-project.org/" target="_blank" rel="noopener">Bumblebee porject</a>, <a href="https://wiki.debian.org/Bumblebee/" target="_blank" rel="noopener">Debian wiki</a>). It can help to solve the overheat problem caused by dual dispaly card, also provide a easy way to install nvidia close source driver as well.</p>
<a id="more"></a>

<h2 id="Update-your-source-list"><a href="#Update-your-source-list" class="headerlink" title="Update your source.list"></a>Update your source.list</h2><p>To install nvidia close source driver, you need to add contrib non-free at every “main” item in your source.list:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i.bak <span class="string">'s/stretch[^ ]* main$/&amp; contrib non-free/g'</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>This command will help you to do that meanwhile create a .bak file to backup your origin source.list.<br>Don’t forget to do apt update after that:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<h2 id="Install-Bumblebee"><a href="#Install-Bumblebee" class="headerlink" title="Install Bumblebee"></a>Install Bumblebee</h2><p>If you have installed nvidia driver before, you should remove them to continue:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove nvidia*</span><br></pre></td></tr></table></figure>
<p>Then you can start to install bumblebee now:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install bumblebee-nvidia primus</span><br></pre></td></tr></table></figure>
<p>Don’t worry about <strong>nouveau</strong> driver, bumblebee will help you to handle it.<br>Then we need to add your user account to bumlebee group:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser <span class="variable">$USER</span> bumlebee</span><br></pre></td></tr></table></figure>
<p>After that you might need to restart your computer. Application will use your intel card by default. If you want some application use your nvidia card, use</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">optirun $(YOURAPP)</span><br></pre></td></tr></table></figure>

<h2 id="Verify-your-driver"><a href="#Verify-your-driver" class="headerlink" title="Verify your driver"></a>Verify your driver</h2><p>A easy way to verify this is to use <strong>glxspheres</strong>. It’s a part of <a href="https://virtualgl.org/" target="_blank" rel="noopener">virtualgl project</a>. <strong>glxgears</strong> is not recommended because it’s not a tool for benchmarking.<br>We can use Intel display card to run it first:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vblank_mode=0 /opt/VirtualGL/bin/glxspheres64</span><br></pre></td></tr></table></figure>
<p><strong>vblank_mode=0</strong> will temporarily disable vertical synchronization. If you don’t add it, you might only can get 60 fps which is same as your monitor refresh rate. The result I got:</p>
<p><img src="/2018-11-20/Debian-nvidia-display-card-driver-install/1.png" alt></p>
<p>Then run it with nvidia card:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vblank_mode=0 optirun /opt/VirtualGL/bin/glxspheres64</span><br></pre></td></tr></table></figure>

<p><img src="/2018-11-20/Debian-nvidia-display-card-driver-install/2.png" alt></p>
<p>It’s much faster than Intel card.</p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Issue:No such file or directory</title>
    <url>/2018-11-14/Issue-No-such-file-or-directory/</url>
    <content><![CDATA[<h1 id="Clarify-this-issue"><a href="#Clarify-this-issue" class="headerlink" title="Clarify this issue"></a>Clarify this issue</h1><p>If you trying to execute a executable binary, but you see this error “No such file or directory”, it’s normally caused by you trying to run a 32-bits binary on a 64-bits OS.</p>
<a id="more"></a>

<p>First of all you should check your OS:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>
<p>If you see <strong>x86_64</strong>, we can make sure you are using a 64-bits OS.<br>Then we should check file type of executable binary:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file <span class="variable">$&#123;THE_EXECUTABLE_BIN&#125;</span></span><br></pre></td></tr></table></figure>
<p>If you see <strong>ELF 32-bit LSB executable, Intel 80386</strong>, basically we can make sure you are trying to run a 32-bits binary on a 64-bits OS meanwhile your OS haven’t add <strong>i386</strong> architecture yet.</p>
<h1 id="How-to-fix-it"><a href="#How-to-fix-it" class="headerlink" title="How to fix it"></a>How to fix it</h1><p>We need to add <strong>i386</strong> architecture support on your 64-bits OS.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install multiarch-support</span><br><span class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386</span><br></pre></td></tr></table></figure>
<p>After that, try to run it again :)</p>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Cross compile gRPC for ARM</title>
    <url>/2018-11-08/Cross-compile-gRPC-for-ARM/</url>
    <content><![CDATA[<p> This post will tell you how to cross compile gPRC static lib for ARM.<br> 前段时间尝试交叉编译gRPC遇到了不少的麻烦，写篇post记录一下。</p>
<a id="more"></a>
<p>gRPC</p>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>First of all, you should have gRPC source code. git clone it from github. Then update submodules:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> grpc</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure>
<h2 id="Install-zlib-for-your-arm-compiler-Optional"><a href="#Install-zlib-for-your-arm-compiler-Optional" class="headerlink" title="Install zlib for your arm compiler[Optional]"></a>Install zlib for your arm compiler[Optional]</h2><p>libz is one of gRPC dependencies. If you haven’t installed it for your arm compiler yet, you may need to install it. You can get zlib at <a href="http://www.zlib.net/" target="_blank" rel="noopener">zlib Home Site</a>. After download and unzip it, set cross compiler and build it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CC=arm-linux-gnueabihf-gcc</span><br><span class="line"><span class="built_in">export</span> AR=arm-linux-gnueabihf-ar</span><br><span class="line">./configure</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure>
<p>then install it if build succeed:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install prefix=/usr/arm-linux-gnueabihf</span><br></pre></td></tr></table></figure>

<h2 id="Compile-and-install-protobuf-amp-gRPC-for-HOST"><a href="#Compile-and-install-protobuf-amp-gRPC-for-HOST" class="headerlink" title="Compile and install protobuf &amp; gRPC for HOST"></a>Compile and install protobuf &amp; gRPC for HOST</h2><p>protobuf:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> grpc/third_party/protobuf</span><br><span class="line">./autogen.sh &amp;&amp; ./configure &amp;&amp; make -j4</span><br><span class="line">sudo make install -j4</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<p>gRPC:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">make -j4 &amp;&amp; sudo make install -j4 &amp;&amp; sudo ldconfig</span><br></pre></td></tr></table></figure>

<h2 id="Cross-compile-static-lib-for-ARM"><a href="#Cross-compile-static-lib-for-ARM" class="headerlink" title="Cross compile static lib for ARM"></a>Cross compile static lib for ARM</h2><p>make plugins first:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">make plugins CC=arm-linux-gnueabihf-gcc -j4</span><br></pre></td></tr></table></figure>
<p>Cross compile gRPC:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GRPC_CROSS_COMPILE=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> GRPC_CROSS_AROPTS=<span class="string">"cr --target=elf32-little"</span></span><br><span class="line">make -j4 HAS_PKG_CONFIG=<span class="literal">false</span> \</span><br><span class="line">    CC=arm-linux-gnueabihf-gcc \</span><br><span class="line">    CXX=arm-linux-gnueabihf-g++ \</span><br><span class="line">    RANLIB=arm-linux-gnueabihf-ranlib \</span><br><span class="line">    LD=arm-linux-gnueabihf-ld \</span><br><span class="line">    LDXX=arm-linux-gnueabihf-g++ \</span><br><span class="line">    AR=arm-linux-gnueabihf-ar \</span><br><span class="line">    PROTOBUF_CONFIG_OPTS=<span class="string">"--host=arm-linux-gnueabihf --with-protoc=/usr/local/bin/protoc"</span> static</span><br></pre></td></tr></table></figure>
<p><strong>static</strong> is important. I tried to build shared lib but there will be a lot of errors because arm-linux-gnueabihf-ld doesn’t take “-Wl” as a parameter. If build succeed, you can find your static lib at “grpc/libs/opt”.</p>
<p>reference: <a href="https://github.com/grpc/grpc/issues/9719" target="_blank" rel="noopener">https://github.com/grpc/grpc/issues/9719</a></p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C++</tag>
        <tag>gPRC</tag>
      </tags>
  </entry>
  <entry>
    <title>git command备忘录</title>
    <url>/2018-10-21/git-command%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>…</p>
<a id="more"></a>

<h2 id="全局配置用户名和邮箱"><a href="#全局配置用户名和邮箱" class="headerlink" title="全局配置用户名和邮箱:"></a>全局配置用户名和邮箱:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Alex.Li"</span></span><br><span class="line">git config --global user.email <span class="string">"Alex.Li@xxxx.com"</span></span><br></pre></td></tr></table></figure>

<h2 id="ssh密钥生成"><a href="#ssh密钥生成" class="headerlink" title="ssh密钥生成:"></a>ssh密钥生成:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"Alex.Li@xxxx.com"</span></span><br></pre></td></tr></table></figure>

<h2 id="储存https-http方式用户名密码"><a href="#储存https-http方式用户名密码" class="headerlink" title="储存https/http方式用户名密码:"></a>储存https/http方式用户名密码:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>

<h2 id="添加tag并推送到远端"><a href="#添加tag并推送到远端" class="headerlink" title="添加tag并推送到远端:"></a>添加tag并推送到远端:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a 1.0.0 -m <span class="string">'add version 1.0.0'</span></span><br><span class="line">git push origin master --tags</span><br></pre></td></tr></table></figure>

<h2 id="更改一个https仓库为ssh仓库："><a href="#更改一个https仓库为ssh仓库：" class="headerlink" title="更改一个https仓库为ssh仓库："></a>更改一个https仓库为ssh仓库：</h2><p><em>.git/config</em>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url &#x3D; https:&#x2F;&#x2F;xxxx.com&#x2F;somebody&#x2F;abcdef.git</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url &#x3D; git@gxxxx.com:somebody&#x2F;abcdef.git</span><br></pre></td></tr></table></figure>
<p>反之则反</p>
<h2 id="删除remotes-origin-branch"><a href="#删除remotes-origin-branch" class="headerlink" title="删除remotes/origin/{branch}"></a>删除remotes/origin/{branch}</h2><p>远端分支已经删除， 但本地仍可见remotes/origin/{branch}</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>

<h2 id="repo-操作"><a href="#repo-操作" class="headerlink" title="repo 操作"></a>repo 操作</h2><p>对每个子repo进行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repo forall -vc <span class="string">"git cmd"</span></span><br></pre></td></tr></table></figure>
<p>i.e.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repo forall -vc <span class="string">"git reset --hard"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Design Patterns: Singleton</title>
    <url>/2018-09-12/Cpp-Design-Patterns-Singleton/</url>
    <content><![CDATA[<p>Singleton is a widely used design patterns in software engineering. This post will tell you when should we use Singleton and how to design a universal,template based Singleton base class.</p>
<a id="more"></a>

<h2 id="Why-Singleton"><a href="#Why-Singleton" class="headerlink" title="Why Singleton"></a>Why Singleton</h2><p>For some special cases, we want one class only can be instantiated only once to avoid unexpected behavior, for example threadpool and logger. Threadpool and logger normally should be instantiated when we start the program and it should have the same lifetime as program. So we need to make sure those class will not be instantiated more than once and also should not be destroyed until program end.</p>
<h2 id="Differences-Between-Static-Class-And-Singleton"><a href="#Differences-Between-Static-Class-And-Singleton" class="headerlink" title="Differences Between Static Class And Singleton"></a>Differences Between Static Class And Singleton</h2><p>Static class basically is a bunch of static functions, it’s not an OOP design. Singleton can implement interfaces and it’s more OOP like.</p>
<h2 id="How-To-Design-A-Singleton-Base-Class"><a href="#How-To-Design-A-Singleton-Base-Class" class="headerlink" title="How To Design A Singleton Base Class"></a>How To Design A Singleton Base Class</h2><p>One of the most important feature of singleton class is non-copyable. To make it non-copyable, delete copy constructor and override operator “=”:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Singleton(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure>
<p>Another part is singleton’s constructor and destructor should be private or protected to avoid user call constructor and destructor accidentally. :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Singleton() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Singleton() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure>
<p>set destructor as virtual because it’s base class.The only public method is getInstance() which will return static instance of singleton class.</p>
<h2 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h2><p>Full source code <a href="https://github.com/codingspirit/VoiceSpirit/blob/develop/include/Singleton.h" target="_blank" rel="noopener"><strong>Singleton.h</strong></a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BaseClass &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T&amp; <span class="title">getInstance</span><span class="params">(Args&amp;&amp;... args)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> T instance&#123;<span class="built_in">std</span>::forward&lt;Args&gt;(args)...&#125;;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    Singleton() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Singleton() = <span class="keyword">default</span>;</span><br><span class="line">    Singleton(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;  <span class="comment">// class Singleton</span></span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace BaseClass</span></span><br></pre></td></tr></table></figure>

<p>In this design, return value of getInstance() is a reference and use template to make it universal. When inherit this class, need to define subclass like this:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> :</span> <span class="keyword">public</span> BaseClass::Singleton&lt;MySingleton&gt; &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span>:</span>:Singleton&lt;MySingleton&gt;;</span><br><span class="line">    <span class="comment">//declare as friend class of Singleton to give authority to base class can access private method</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    MySingleton();</span><br><span class="line">    ~MySingleton();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/codingspirit/VoiceSpirit/blob/develop/include/Singleton.h" target="_blank" rel="noopener"><strong>BasicLogger.h</strong></a>: is also a good example for this.</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>现在支持HTTPS啦</title>
    <url>/2018-06-11/%E7%8E%B0%E5%9C%A8%E6%94%AF%E6%8C%81HTTPS%E5%95%A6/</url>
    <content><![CDATA[<p>从今天开始，本站支持HTTPS访问啦！</p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>makefile summarize</title>
    <url>/2018-06-05/makefile-summarize/</url>
    <content><![CDATA[<p>  …</p>
<a id="more"></a>

<h2 id="Variable-Assignment-变量赋值"><a href="#Variable-Assignment-变量赋值" class="headerlink" title="Variable Assignment(变量赋值)"></a>Variable Assignment(变量赋值)</h2><h3 id="comparison-of-“-“-“-“-“-“-and-“-“"><a href="#comparison-of-“-“-“-“-“-“-and-“-“" class="headerlink" title="comparison of “=“, “:=“ , “?=“ and “+=“"></a>comparison of “<strong>=</strong>“, “<strong>:=</strong>“ , “<strong>?=</strong>“ and “<strong>+=</strong>“</h3><h4 id="“-“"><a href="#“-“" class="headerlink" title="“=“"></a>“<strong>=</strong>“</h4><p>Variables defined with ‘=’ are recursively expanded variables. It means that value of this variable will be the last value gived by ‘=’ in makefile. For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">a = foo</span><br><span class="line">b = <span class="variable">$(a)</span> abc</span><br><span class="line">a = oof</span><br></pre></td></tr></table></figure>
<p>In this case, the value of <strong>b</strong> will be <strong>oof abc</strong>.</p>
<h4 id="“-“-1"><a href="#“-“-1" class="headerlink" title="“:=“"></a>“<strong>:=</strong>“</h4><p>Variables defined with ‘:=’ are simply expanded variables. Just like “<strong>=</strong>“ in other language(C/C++/C#/Java). For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">a := foo</span><br><span class="line">b := <span class="variable">$(a)</span> abc</span><br><span class="line">a := oof</span><br></pre></td></tr></table></figure>
<p>In this case, the value of <strong>b</strong> will be <strong>foo abc</strong>.</p>
<h4 id="“-“-2"><a href="#“-“-2" class="headerlink" title="“?=“"></a>“<strong>?=</strong>“</h4><p>We can use ‘?=’ to set a value to a variable only if this variable is not set yet. For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">a ?= foo</span><br></pre></td></tr></table></figure>
<p>It is similar to:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(<span class="built_in">origin</span> a)</span>, undefined)</span><br><span class="line">a = bar</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<h4 id="“-“-3"><a href="#“-“-3" class="headerlink" title="“+=“"></a>“<strong>+=</strong>“</h4><p>‘+=’ is using for appending text. It will appending a <strong>space</strong> between two text.For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">a = first</span><br><span class="line">a += second</span><br></pre></td></tr></table></figure>
<p>In this case, the value of <strong>a</strong> will be <strong>first second</strong>.</p>
<h2 id="Useful-Makefile-Functions"><a href="#Useful-Makefile-Functions" class="headerlink" title="Useful Makefile Functions"></a>Useful Makefile Functions</h2><p>  In makefile, functions should be called like this:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">var = <span class="variable">$(functionname arg1,arg2,arg3...)</span></span><br></pre></td></tr></table></figure>

<h3 id="wildcard"><a href="#wildcard" class="headerlink" title="wildcard"></a>wildcard</h3><p><strong>wildcard</strong> will help you get specific file name list in a dir.For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SRC_DIR := src</span><br><span class="line">SOURCES := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(SRC_DIR)</span>/*.cpp)</span></span><br></pre></td></tr></table></figure>
<p>In this case, SUORCES will be set like this(if *.cpp exists in SRC_DIR):</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">src/a.cpp src/b.cpp src/c.cpp</span><br></pre></td></tr></table></figure>
<h3 id="addprefix"><a href="#addprefix" class="headerlink" title="addprefix"></a>addprefix</h3><p><strong>addprefix</strong> is using for add one value to the front of another value. For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">a = <span class="variable">$(<span class="built_in">addsuffix</span> .o,foo bar)</span></span><br></pre></td></tr></table></figure>
<p><strong>a</strong> will be set as ‘<strong>foo.o bar.o</strong>‘</p>
<h3 id="patsubst"><a href="#patsubst" class="headerlink" title="patsubst"></a>patsubst</h3><p><strong>$(patsubst pattern,replacement,text)</strong>:Finds whitespace-separated words in text that match pattern and replaces them with replacement(<a href="https://www.gnu.org/software/make/manual/html_node/Text-Functions.html#index-_0025_002c-quoting-in-patsubst" target="_blank" rel="noopener">gnu.org</a>)<br>For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">a = <span class="variable">$(<span class="built_in">patsubst</span> %.cpp,%.o,a.cpp b.h c.cpp)</span></span><br></pre></td></tr></table></figure>
<p><strong>a</strong> will be set as ‘<strong>a.o b.h c.o</strong>‘</p>
<h3 id="notdir"><a href="#notdir" class="headerlink" title="notdir"></a>notdir</h3><p><strong>$(notdir names…)</strong>:remove dir in names.For example:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">a = <span class="variable">$(<span class="built_in">notdir</span> src/foo.c src/bar.c)</span></span><br></pre></td></tr></table></figure>
<p><strong>a</strong> will be set as ‘<strong>foo.c bar.c</strong>‘</p>
<h3 id="Using-those-functions-to-genreate-o-file-and-exec-files-in-specific-dir"><a href="#Using-those-functions-to-genreate-o-file-and-exec-files-in-specific-dir" class="headerlink" title="Using those functions to genreate *.o file and exec files in specific dir"></a>Using those functions to genreate *.o file and exec files in specific dir</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SRC_DIR:=src</span><br><span class="line">OBJ_DIR:=obj</span><br><span class="line">OUT_DIR:=out</span><br><span class="line">SOURCES:=<span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(SRC_DIR)</span>/*.cpp)</span></span><br><span class="line">OBJECTS:=<span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(OBJ_DIR)</span>/,$(<span class="built_in">patsubst</span> %.cpp,%.o,$(<span class="built_in">notdir</span> <span class="variable">$(SOURCES)</span>)</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Phony-Targets-伪目标"><a href="#Phony-Targets-伪目标" class="headerlink" title="Phony Targets(伪目标)"></a>Phony Targets(伪目标)</h2><p>If we have a recipe :</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(OBJ_DIR)</span> <span class="variable">$(OUT_DIR)</span></span><br></pre></td></tr></table></figure>
<p>It will works well until one day you add one file called <strong>clean</strong>. In this case, you need add .PHONY:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(OBJ_DIR)</span> <span class="variable">$(OUT_DIR)</span></span><br></pre></td></tr></table></figure>
<p>If we do this, ‘make clean’ will run the recipe regardless of whether there is a file named clean.</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>make: warning: Clock skew detected</title>
    <url>/2018-05-24/make-warning-Clock-skew-detected/</url>
    <content><![CDATA[<p>Sometimes <strong>make</strong> will output warning like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make: warning:  Clock skew detected.  Your build may be incomplete.</span><br></pre></td></tr></table></figure>

<p>It was caused by file time-stamps are ahead of clients’ clock.</p>
<a id="more"></a>

<p>It can be fixed by update time-stamps:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">exec</span> touch &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>Then <strong>make clean</strong> and <strong>make</strong> again</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置默认声卡</title>
    <url>/2018-05-02/Linux%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%A3%B0%E5%8D%A1/</url>
    <content><![CDATA[<p>树莓派多声卡，尝试配置声卡0为默认输出设备，声卡1为默认输入设备。</p>
<a id="more"></a>

<h2 id="List-all-play-record-device"><a href="#List-all-play-record-device" class="headerlink" title="List all play/record device"></a>List all play/record device</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ aplay -l</span><br><span class="line">**** List of PLAYBACK Hardware Devices ****</span><br><span class="line">card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA]</span><br><span class="line">  Subdevices: 7/7</span><br><span class="line">  Subdevice <span class="comment">#0: subdevice #0</span></span><br><span class="line">  Subdevice <span class="comment">#1: subdevice #1</span></span><br><span class="line">  Subdevice <span class="comment">#2: subdevice #2</span></span><br><span class="line">  Subdevice <span class="comment">#3: subdevice #3</span></span><br><span class="line">  Subdevice <span class="comment">#4: subdevice #4</span></span><br><span class="line">  Subdevice <span class="comment">#5: subdevice #5</span></span><br><span class="line">  Subdevice <span class="comment">#6: subdevice #6</span></span><br><span class="line">card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI]</span><br><span class="line">  Subdevices: 1/1</span><br><span class="line">  Subdevice <span class="comment">#0: subdevice #0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ arecord -l</span><br><span class="line">**** List of CAPTURE Hardware Devices ****</span><br><span class="line">card 1: Device [USB PnP Sound Device], device 0: USB Audio [USB Audio]</span><br><span class="line">  Subdevices: 1/1</span><br><span class="line">  Subdevice <span class="comment">#0: subdevice #0</span></span><br></pre></td></tr></table></figure>
<h2 id="Set-card-0-as-playback-card-1-as-capture"><a href="#Set-card-0-as-playback-card-1-as-capture" class="headerlink" title="Set card 0 as playback, card 1 as capture"></a>Set card 0 as playback, card 1 as capture</h2><p>Open <strong>.asoundrc</strong> file under <strong>$HOME</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line">vim .asoundrc</span><br></pre></td></tr></table></figure>
<p>Modify <strong>.asoundrc</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pcm.!default &#123;</span><br><span class="line">    type asym</span><br><span class="line">    playback.pcm &quot;plughw:0,0&quot;</span><br><span class="line">    capture.pcm  &quot;plughw:1,0&quot;</span><br><span class="line">&#125;</span><br><span class="line">ctl.!default &#123;</span><br><span class="line">        type hw</span><br><span class="line">        card 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>*”plughw:1,0”* means card 1, device 0</p>
<p>Then <strong>save file</strong> and <strong>reboot</strong></p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspberry Pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu切换python版本</title>
    <url>/2018-04-02/Ubuntu%E5%88%87%E6%8D%A2python%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>  Ubuntu17.10默认的python version是2.7，如果安装了3.6默认的执行版本仍是2.7。如果想要切换python version，可以通过选择alternatives的方式切换版本。</p>
<a id="more"></a>

<h2 id="检查当前安装的python版本"><a href="#检查当前安装的python版本" class="headerlink" title="检查当前安装的python版本"></a>检查当前安装的python版本</h2><p>  之前遇到一个奇怪的现象，Ubuntu突然不能使用python –version检查版本:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">The program <span class="string">'python'</span> can be found <span class="keyword">in</span> the following packages:</span><br><span class="line"> * python-minimal</span><br><span class="line"> * python3</span><br><span class="line">Try: apt install &lt;selected package&gt;</span><br></pre></td></tr></table></figure>
<p>使用sudo apt install python3后依然出现上述问题。解决办法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install python-minimal</span><br></pre></td></tr></table></figure>
<p>之后可以使用python –version得到目前系统默认的版本为2.7.14.</p>
<h2 id="切换python版本"><a href="#切换python版本" class="headerlink" title="切换python版本"></a>切换python版本</h2><p>首先使用下面的命令检查当前是否为python设置了alternatives：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update-alternatives --list python</span><br></pre></td></tr></table></figure>
<p>如果输出:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update-alternatives: error: no alternatives <span class="keyword">for</span> python</span><br></pre></td></tr></table></figure>
<p>则需要手动添加alternatives。如果我们要切换版本到python3.x，首先我们要使用whereis得到python3的安装位置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">whereis python3</span><br></pre></td></tr></table></figure>
<p>从输出可以看到，当前安装了多个版本的python3，安装位置都在/usr/bin/python3.x：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python3: /usr/bin/python3.6m /usr/bin/python3 /usr/bin/python3.6 /usr/lib/python3.7 /usr/lib/python3 /usr/lib/python3.6 /etc/python3 /etc/python3.6 /usr/<span class="built_in">local</span>/lib/python3.6 /usr/include/python3.6m /usr/share/python3 /usr/share/man/man1/python3.1.gz</span><br></pre></td></tr></table></figure>
<p>在知道python安装位置后就可以添加alternatives,以python3.6为例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span><br><span class="line"><span class="comment">#the last "2" stand for priority level</span></span><br></pre></td></tr></table></figure>
<p>其中最后的”2”表示优先级为2。同理，我们也可以把其他版本的python加入alternatives:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br></pre></td></tr></table></figure>
<p>现在使用update-alternatives –config python就可以看到当前python所有的alternatives并进行版本切换：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">There are 2 choices <span class="keyword">for</span> the alternative python (providing /usr/bin/python).</span><br><span class="line"></span><br><span class="line">  Selection    Path                Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">  0            /usr/bin/python3.6   2         auto mode</span><br><span class="line">* 1            /usr/bin/python2.7   1         manual mode</span><br><span class="line">  2            /usr/bin/python3.6   2         manual mode</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or <span class="built_in">type</span> selection number:</span><br></pre></td></tr></table></figure>
<p>输入Selection number就可以切换版本啦！</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+Gerrit: 自动commit//code review//submit</title>
    <url>/2018-03-20/Jenkins-Gerrit-%E8%87%AA%E5%8A%A8commit-code-review-submit/</url>
    <content><![CDATA[<p>  Jenkins+Gerrit的一般工作模式：user commit code to Gerrit-&gt;Jenkins test build success-&gt;other user code review +2-&gt;user submit-&gt;Jenkins release build-&gt;release SW. 我之前写了个release notes generator, 在Jenasdkins server上release build的时候， 可以自动生成release notes并打包并发给开发者。但是这个release notes在下一次build的时候会因为workspace的清空而被删除，因此希望Jenkins能够将release notes commit到Gerrit并保留下来，最后再自动上传到sharepoint上。实现上述过程后，自动化构建的自动化程度会更高一点，开发者只需在Jenkins上press a button, release就自动完成了。</p>
<a id="more"></a>

<h2 id="新建branch"><a href="#新建branch" class="headerlink" title="新建branch"></a>新建branch</h2><p>  通常Gerrit trigger jenkins build的时候, jenkins 只会抓取某一次commit，这会导致抓取的code不在任何一个branch上。此时需要新建一个临时的branch，才能在后面进行push:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch <span class="string">"jenkins_temp"</span></span><br><span class="line">git checkout jenkins_temp</span><br></pre></td></tr></table></figure>
<h2 id="Jenkins检测改动并提交"><a href="#Jenkins检测改动并提交" class="headerlink" title="Jenkins检测改动并提交"></a>Jenkins检测改动并提交</h2><p>  首先需要检测文件改动,以一个名为test.txt的文件为例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$(git diff test.txt)</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#if file has been modfied, do something</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Release_Notes.xlsx has been modfied"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Release_Notes.xlsx hasn't been modfied"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>  Staged changes并commit:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add test.txt</span><br><span class="line"><span class="comment">#if have two files: git add test1.txt text2.txt</span></span><br><span class="line">git commit -m <span class="string">"jenkins update test.txt</span></span><br></pre></td></tr></table></figure>
<p>另：如果提交时没有生成commit id, 可以通过git hooks实现自动添加commit id。</p>
<h2 id="Push-changes"><a href="#Push-changes" class="headerlink" title="Push changes"></a>Push changes</h2><p>  然后需要把改动Push到git远端。之前在Jenkins server上配置过git ssh key，因此我可以在server上直接push changes而不会报错。但是如果在Jenkins execute shell中执行脚本会遇到Permission denied的问题，因为execute shell的运行环境是独立的，并没有配置过ssh key。这时可以通过临时添加key的方式进行push：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-agent sh -c <span class="string">'ssh-add C:/Users/jenkins1/.ssh/id_rsa; git push origin</span></span><br><span class="line"><span class="string">jenkins_temp:refs/for/master'</span></span><br></pre></td></tr></table></figure>
<h2 id="verified-code-review-submit"><a href="#verified-code-review-submit" class="headerlink" title="verified,code review,submit"></a>verified,code review,submit</h2><p>  通常来讲，Push到git remote的commit都需要通过test build,如果成功，将会由jenkins verified +1。只后再通过其他人code review, 在code review +2后才能submit，也就是真正合并到remote branch上。由于jenkins只更改了relase notes这种非代码文件，我们希望jenkins能够自动将changes合并到remote branch上。这里就需要通过shell操作Gerrit。从<a href="https://gerrit-documentation.storage.googleapis.com/Documentation/2.5.1/cmd-review.html" target="_blank" rel="noopener">Gerrit官方文档</a>上，我们可以找到一些可以通过ssh连接完成的操作，包括verified,code review,submit等等。注意，这里同样需要指定ssh key，否则Permission denied。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -i C:/Users/jenkins1/.ssh/id_rsa -p 29418 jenkins1@sw.domian.com gerrit review --verified +1 <span class="string">"<span class="variable">$(git rev-parse --short HEAD)</span>"</span></span><br><span class="line">ssh -i C:/Users/jenkins1/.ssh/id_rsa -p 29418 jenkins1@sw.domian.com gerrit review --code-review +2 <span class="string">"<span class="variable">$(git rev-parse --short HEAD)</span>"</span></span><br><span class="line">ssh -i C:/Users/jenkins1/.ssh/id_rsa -p 29418 jenkins1@sw.domian.com gerrit review -s <span class="string">"<span class="variable">$(git rev-parse --short HEAD)</span>"</span></span><br></pre></td></tr></table></figure>
<p>至此，jenkins完成了自动构建。<br>其他可能有用的git command:<br>git 获取当前branch name</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git symbolic-ref --short -q HEAD</span><br></pre></td></tr></table></figure>
<p>git 获取上一次提交的commit id</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#short</span></span><br><span class="line">git rev-parse --short HEAD</span><br><span class="line"><span class="comment">#long</span></span><br><span class="line">git rev-parse HEAD</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CI</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>Continuous Integration</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：常用的正则表达式</title>
    <url>/2018-03-12/%E8%BD%AC%E8%BD%BD%EF%BC%9A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="http://www.jb51.net/article/72867.htm" target="_blank" rel="noopener">原文地址</a></p>
<a id="more"></a>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">一、校验数字的表达式</span><br><span class="line"> <span class="number">1</span> 数字：^[<span class="number">0</span><span class="number">-9</span>]*$</span><br><span class="line"> <span class="number">2</span> n位的数字：^\d&#123;n&#125;$</span><br><span class="line"> <span class="number">3</span> 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line"> <span class="number">4</span> m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line"> <span class="number">5</span> 零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)$</span><br><span class="line"> <span class="number">6</span> 非零开头的最多带两位小数的数字：^([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"> <span class="number">7</span> 带<span class="number">1</span><span class="number">-2</span>位小数的正数或负数：^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br><span class="line"> <span class="number">8</span> 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line"> <span class="number">9</span> 有两位小数的正实数：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line"><span class="number">10</span> 有<span class="number">1</span>~<span class="number">3</span>位小数的正实数：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line"><span class="number">11</span> 非零的正整数：^[<span class="number">1</span><span class="number">-9</span>]\d*$ 或 ^([<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$</span><br><span class="line"><span class="number">12</span> 非零的负整数：^\-[<span class="number">1</span><span class="number">-9</span>][]<span class="number">0</span><span class="number">-9</span><span class="string">"*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string">17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string">18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br><span class="line"><span class="string">二、校验字符的表达式</span></span><br><span class="line"><span class="string"> 1 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</span></span><br><span class="line"><span class="string"> 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span></span><br><span class="line"><span class="string"> 3 长度为3-20的所有字符：^.&#123;3,20&#125;$</span></span><br><span class="line"><span class="string"> 4 由26个英文字母组成的字符串：^[A-Za-z]+$</span></span><br><span class="line"><span class="string"> 5 由26个大写英文字母组成的字符串：^[A-Z]+$</span></span><br><span class="line"><span class="string"> 6 由26个小写英文字母组成的字符串：^[a-z]+$</span></span><br><span class="line"><span class="string"> 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span></span><br><span class="line"><span class="string"> 8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</span></span><br><span class="line"><span class="string"> 9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span></span><br><span class="line"><span class="string">10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span></span><br><span class="line"><span class="string">11 可以输入含有^%&amp;',;=?$\"等字符：[^%&amp;',;=?$\x22]+</span></span><br><span class="line"><span class="string">12 禁止输入含有~的字符：[^~\x22]+</span></span><br><span class="line"><span class="string">三、特殊需求表达式</span></span><br><span class="line"><span class="string"> 1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span></span><br><span class="line"><span class="string"> 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span></span><br><span class="line"><span class="string"> 3 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span></span><br><span class="line"><span class="string"> 4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span></span><br><span class="line"><span class="string"> 5 电话号码("</span>XXX-XXXXXXX<span class="string">"、"</span>XXXX-XXXXXXXX<span class="string">"、"</span>XXX-XXXXXXX<span class="string">"、"</span>XXX-XXXXXXXX<span class="string">"、"</span>XXXXXXX<span class="string">"和"</span>XXXXXXXX)：^(\(\d&#123;<span class="number">3</span>,<span class="number">4</span>&#125;-)|\d&#123;<span class="number">3.4</span>&#125;-)?\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;$ </span><br><span class="line"> <span class="number">6</span> 国内电话号码(<span class="number">0511</span><span class="number">-4405222</span>、<span class="number">021</span><span class="number">-87888822</span>)：\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;</span><br><span class="line"> <span class="number">7</span> 身份证号(<span class="number">15</span>位、<span class="number">18</span>位数字)：^\d&#123;<span class="number">15</span>&#125;|\d&#123;<span class="number">18</span>&#125;$</span><br><span class="line"> <span class="number">8</span> 短身份证号码(数字、字母x结尾)：^([<span class="number">0</span><span class="number">-9</span>])&#123;<span class="number">7</span>,<span class="number">18</span>&#125;(x|X)?$ 或 ^\d&#123;<span class="number">8</span>,<span class="number">18</span>&#125;|[<span class="number">0</span><span class="number">-9</span>x]&#123;<span class="number">8</span>,<span class="number">18</span>&#125;|[<span class="number">0</span><span class="number">-9</span>X]&#123;<span class="number">8</span>,<span class="number">18</span>&#125;?$</span><br><span class="line"> <span class="number">9</span> 帐号是否合法(字母开头，允许<span class="number">5</span><span class="number">-16</span>字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0<span class="number">-9</span>_]&#123;<span class="number">4</span>,<span class="number">15</span>&#125;$</span><br><span class="line"><span class="number">10</span> 密码(以字母开头，长度在<span class="number">6</span>~<span class="number">18</span>之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;<span class="number">5</span>,<span class="number">17</span>&#125;$</span><br><span class="line"><span class="number">11</span> 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="number">8</span><span class="number">-10</span>之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$  </span><br><span class="line"><span class="number">12</span> 日期格式：^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">13</span> 一年的<span class="number">12</span>个月(<span class="number">01</span>～<span class="number">09</span>和<span class="number">1</span>～<span class="number">12</span>)：^(<span class="number">0</span>?[<span class="number">1</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>])$</span><br><span class="line"><span class="number">14</span> 一个月的<span class="number">31</span>天(<span class="number">01</span>～<span class="number">09</span>和<span class="number">1</span>～<span class="number">31</span>)：^((<span class="number">0</span>?[<span class="number">1</span><span class="number">-9</span>])|((<span class="number">1</span>|<span class="number">2</span>)[<span class="number">0</span><span class="number">-9</span>])|<span class="number">30</span>|<span class="number">31</span>)$ </span><br><span class="line"><span class="number">15</span> 钱的输入格式：</span><br><span class="line"><span class="number">16</span>    <span class="number">1.</span>有四种钱的表示形式我们可以接受:<span class="string">"10000.00"</span> 和 <span class="string">"10,000.00"</span>, 和没有 <span class="string">"分"</span> 的 <span class="string">"10000"</span> 和 <span class="string">"10,000"</span>：^[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$ </span><br><span class="line"><span class="number">17</span>    <span class="number">2.</span>这表示任意一个不以<span class="number">0</span>开头的数字,但是,这也意味着一个字符<span class="string">"0"</span>不通过,所以我们采用下面的形式：^(<span class="number">0</span>|[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)$ </span><br><span class="line"><span class="number">18</span>    <span class="number">3.</span>一个<span class="number">0</span>或者一个不以<span class="number">0</span>开头的数字.我们还可以允许开头有一个负号：^(<span class="number">0</span>|-?[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)$ </span><br><span class="line"><span class="number">19</span>    <span class="number">4.</span>这表示一个<span class="number">0</span>或者一个可能为负的开头不为<span class="number">0</span>的数字.让用户以<span class="number">0</span>开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]+)?$ </span><br><span class="line"><span class="number">20</span>    <span class="number">5.</span>必须说明的是,小数点后面至少应该有<span class="number">1</span>位数,所以<span class="string">"10."</span>是不通过的,但是 <span class="string">"10"</span> 和 <span class="string">"10.2"</span> 是通过的：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)?$ </span><br><span class="line"><span class="number">21</span>    <span class="number">6.</span>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$ </span><br><span class="line"><span class="number">22</span>    <span class="number">7.</span>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(,[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">3</span>&#125;)*(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$ </span><br><span class="line"><span class="number">23</span>    <span class="number">8.1</span>到<span class="number">3</span>个数字,后面跟着任意个 逗号+<span class="number">3</span>个数字,逗号成为可选,而不是必须：^([<span class="number">0</span><span class="number">-9</span>]+|[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(,[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">3</span>&#125;)*)(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$ </span><br><span class="line"><span class="number">24</span>    备注：这就是最终结果了,别忘了<span class="string">"+"</span>可以用<span class="string">"*"</span>替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line"><span class="number">25</span> xml文件：^([a-zA-Z]+-?)+[a-zA-Z0<span class="number">-9</span>]+\\.[x|X][m|M][l|L]$</span><br><span class="line"><span class="number">26</span> 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line"><span class="number">27</span> 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计<span class="number">2</span>，ASCII字符计<span class="number">1</span>))</span><br><span class="line"><span class="number">28</span> 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span><br><span class="line"><span class="number">29</span> HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\<span class="number">1</span>&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line"><span class="number">30</span> 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line"><span class="number">31</span> 腾讯QQ号：[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>,&#125;    (腾讯QQ号从<span class="number">10000</span>开始)</span><br><span class="line"><span class="number">32</span> 中国邮政编码：[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">5</span>&#125;(?!\d)    (中国邮政编码为<span class="number">6</span>位数字)</span><br><span class="line"><span class="number">33</span> IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C Sharp</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令行字符串操作指令</title>
    <url>/2018-02-09/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>不定期更新。。</p>
<a id="more"></a>

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在指定文件中查找字符串：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">findstr</span> "#define BUILD_VERSION" main.c</span><br></pre></td></tr></table></figure>
<p>将某条指令返回值的第一行存在一个名为temp的变量中：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /f "delims=" <span class="variable">%%1</span> <span class="keyword">in</span> ('<span class="built_in">findstr</span> "#define BUILD_VERSION" main.c')<span class="keyword">do</span> <span class="built_in">set</span> temp=<span class="variable">%%1</span></span><br></pre></td></tr></table></figure>
<p>将temp中”BUILD_VERSION “左侧字符替换为空字符串，然后保留到version中：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> "version=%temp:*BUILD_VERSION =%"</span><br></pre></td></tr></table></figure>

<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>在指定文件中查找字符串：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep <span class="string">"#define BUILD_VERSION"</span> main.c</span><br></pre></td></tr></table></figure>
<p>将某条指令返回值的第一行存在一个名为temp的变量中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">temp=$(grep <span class="string">"#define BUILD_VERSION"</span> main.c)</span><br></pre></td></tr></table></figure>
<p>将temp中”BUILD_VERSION “左侧字符替换为空字符串，然后保留到version中(从左到右非贪婪匹配使用#,从右到左非贪婪匹配使用%)：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version=<span class="variable">$&#123;temp#*BUILD_VERSION &#125;</span></span><br></pre></td></tr></table></figure>
<p>3/19/2018更新：<br>判断字符串变量sw_version的长度：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;#sw_version&#125;</span>"</span> = <span class="string">"5"</span> ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>读取文件某一行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat url.txt|sed -n <span class="string">'1p'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows下安装gpu版的TensorFlow</title>
    <url>/2018-01-23/%E5%9C%A8Windows%E4%B8%8B%E5%AE%89%E8%A3%85gpu%E7%89%88%E7%9A%84TensorFlow/</url>
    <content><![CDATA[<p>  使用非gpu版本的TensorFlow进行训练实在是太慢了，于是尝试在Windows下安装gpu版本的TensorFlow，写篇日志记录一下。</p>
<a id="more"></a>
<h2 id="工作环境"><a href="#工作环境" class="headerlink" title="工作环境"></a>工作环境</h2><p>  OS：Win10<br>  Python:3.5(目前TensorFlow仍不支持3.6)</p>
<h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><p>  首先确定想要安装的TensorFlow版本需要哪个版本的CUDA支持。我这里安装的TF版本是1.5.0，需要CUDA 9.0的支持。</p>
<h3 id="下载并安装CUDA"><a href="#下载并安装CUDA" class="headerlink" title="下载并安装CUDA"></a>下载并安装CUDA</h3><p>  前往<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">developer.nvidia.com</a>下载CUDA 9.0。一直下一步就行。<br>  完成之后验证一下是否已经正确安装，运行cmd：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc  -V</span><br></pre></td></tr></table></figure>
<p>如果正确安装，将会显示版本信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;nvcc  -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2017 NVIDIA Corporation</span><br><span class="line">Built on Fri_Sep__1_21:08:32_Central_Daylight_Time_2017</span><br><span class="line">Cuda compilation tools, release 9.0, V9.0.176</span><br></pre></td></tr></table></figure>
<h2 id="安装CUDNN"><a href="#安装CUDNN" class="headerlink" title="安装CUDNN"></a>安装CUDNN</h2><p>  同样需要确认需要哪个版本的CUDNN。我这里需要CUDNN 9.0。前往<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">developer.nvidia.com</a>下载指定版本，下载完成是一个压缩包，解压到C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0</p>
<h2 id="安装TensorFlow"><a href="#安装TensorFlow" class="headerlink" title="安装TensorFlow"></a>安装TensorFlow</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-gpu==1.5.0</span><br></pre></td></tr></table></figure>
<p>此处使用==指定版本。另外可以在<a href="https://pypi.python.org/pypi" target="_blank" rel="noopener">pypi.python.org</a>查询到某个包的版本信息。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.__version__</span><br><span class="line">sess = tf.Session()</span><br><span class="line">a = tf.constant(<span class="number">20</span>)</span><br><span class="line">b = tf.constant(<span class="number">99</span>)</span><br><span class="line">print(sess.run(a + b))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;python</span><br><span class="line">Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt; tf.__version__</span><br><span class="line"><span class="string">'1.5.0'</span></span><br><span class="line">&gt;&gt;&gt; sess = tf.Session()</span><br><span class="line">2018-02-05 10:21:19.674014: I C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\platform\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2</span><br><span class="line">2018-02-05 10:21:20.177086: I C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\common_runtime\gpu\gpu_device.cc:1105] Found device 0 with properties:</span><br><span class="line">name: GeForce 940MX major: 5 minor: 0 memoryClockRate(GHz): 1.2415</span><br><span class="line">pciBusID: 0000:02:00.0</span><br><span class="line">totalMemory: 2.00GiB freeMemory: 1.66GiB</span><br><span class="line">2018-02-05 10:21:20.177537: I C:\tf_jenkins\workspace\rel-win\M\windows-gpu\PY\35\tensorflow\core\common_runtime\gpu\gpu_device.cc:1195] Creating TensorFlow device (/device:GPU:0) -&gt; (device: 0, name: GeForce 940MX, pci bus id: 0000:02:00.0, compute capability: 5.0)</span><br><span class="line">&gt;&gt;&gt; a = tf.constant(20)</span><br><span class="line">&gt;&gt;&gt; b = tf.constant(99)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(sess.run(a + b))</span><br><span class="line">119</span><br></pre></td></tr></table></figure>
<h2 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade tensorflow-gpu</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>使用TensorFlow训练自己的语音识别AI</title>
    <url>/2018-01-11/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABAI/</url>
    <content><![CDATA[<p>  这次来训练一个基于CNN的语音识别模型。训练完成后，我们将尝试将此模型用于Hotword detection。</p>
<a id="more"></a>
<p>  人类是怎样听懂一句话的呢？以汉语为例，当听到“wo shi”的录音时，我们会想，有哪两个字是读作“wo shi”的，有人想到的是“我是”，也有人觉得是“我市”。<br>我们可以通过”wo shi”的频率的特征，匹配到一些结果，我们这次要训练的模型，也是基于频率特征的CNN模型。单纯的基于频率特征的识别有很大的局限性，比如前面提到的例子，光是听到“wo shi”可能会导致产生歧义，但是如果能有上下文，我们就可以大大提高“识别”的成功率。因此，类似Google Assistant那样的识别，不光是考虑到字词的发音，还联系了语义，就算有一两个字发音不清，我们还是能得到正确的信息。<br>但是基于频率特征的模型用作Hotword detection还是比较合适的，因为Horword通常是一两个特定的词，不需要联系语境进行语义分析。</p>
<h2 id="准备训练数据集"><a href="#准备训练数据集" class="headerlink" title="准备训练数据集"></a>准备训练数据集</h2><p>  开源的语言数据集比较少，这里我们使用TensorFlow和AIY团队推出的一个数据集，包含30个基本的英文单词的大量录音：<br><a href="https://download.tensorflow.org/data/speech_commands_v0.01.tar.gz" target="_blank" rel="noopener">下载地址</a><br>这个数据集只有1G多，非常小的语音数据集，不过用来实验是完全够的。</p>
<h2 id="运行docker并挂载工作目录"><a href="#运行docker并挂载工作目录" class="headerlink" title="运行docker并挂载工作目录"></a>运行docker并挂载工作目录</h2><p>新建一个speech_train文件夹，并在其中创建子文件夹dataset,logs,train,它们将用于存放数据集，log和训练文件。解压数据集到dataset，然后运行docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v $(<span class="built_in">pwd</span>)/speech_train:/speech_train \</span><br><span class="line">  gcr.io/tensorflow/tensorflow:latest-devel</span><br></pre></td></tr></table></figure>
<h2 id="使用默认的conv模型开始训练"><a href="#使用默认的conv模型开始训练" class="headerlink" title="使用默认的conv模型开始训练"></a>使用默认的conv模型开始训练</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tensorflow/</span><br><span class="line">python tensorflow/examples/speech_commands/train.py \</span><br><span class="line">--data_dir=/speech_train/dataset/ \</span><br><span class="line">--summaries_dir=/speech_train/logs/ \</span><br><span class="line">--train_dir=/speech_train/train/ \</span><br><span class="line">--wanted_words=one,two,three,four,five,marvin</span><br></pre></td></tr></table></figure>
<p>在这里我们指定希望识别的label: one,two,three,four,five,marvin。数据集的其他部分将被归为<em>unknown</em></p>
<h2 id="使用TensorBoard使训练可视化"><a href="#使用TensorBoard使训练可视化" class="headerlink" title="使用TensorBoard使训练可视化"></a>使用TensorBoard使训练可视化</h2><p>我们可以通过分析生成的log使训练过程可视化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir /speech_train/logs</span><br></pre></td></tr></table></figure>
<p>运行指令后，可以通过浏览器访问本地的6006端口进入TensorBoard。下图是使用conv模型完成18000 steps 训练的过程图：<br><img src="/2018-01-11/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABAI/2018-01-16-08-48-12.png" alt><br>训练花了差不多15个小时。</p>
<h2 id="生成pb文件"><a href="#生成pb文件" class="headerlink" title="生成pb文件"></a>生成pb文件</h2><p>训练完成后，我们需要将其转化为pb文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python tensorflow/examples/speech_commands/freeze.py \</span><br><span class="line">--start_checkpoint=/speech_train/train/conv.ckpt-18000 \</span><br><span class="line">--output_file=/speech_train/conv.pb \</span><br><span class="line">--wanted_words=one,two,three,four,five,marvin</span><br></pre></td></tr></table></figure>
<p>完成后，我们将得到一个名为conv.pb的文件，配合包含可识别label的txt文件就可以直接使用了。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用测试脚本进行测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python tensorflow/examples/speech_commands/label_wav.py \</span><br><span class="line">--graph=/speech_train/conv.pb \</span><br><span class="line">--labels=/speech_train/conv_labels.txt \</span><br><span class="line">--wav=/speech_train/dataset/marvin/0b40aa8e_nohash_0.wav</span><br></pre></td></tr></table></figure>
<p>训练的模型应能正确识别出marvin。</p>
<h2 id="使用准确度较低但是预测更快的low-latency-conv模型"><a href="#使用准确度较低但是预测更快的low-latency-conv模型" class="headerlink" title="使用准确度较低但是预测更快的low_latency_conv模型"></a>使用准确度较低但是预测更快的low_latency_conv模型</h2><p>  我们可以使用另外一种准确度较低但是预测更快的low_latency_conv模型进行训练：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python tensorflow/examples/speech_commands/train.py \</span><br><span class="line">--data_dir=/speech_train/dataset/ \</span><br><span class="line">--summaries_dir=/speech_train/logs/ \</span><br><span class="line">--train_dir=/speech_train/train/ \</span><br><span class="line">--model_architecture=low_latency_conv \</span><br><span class="line">--how_many_training_steps=20000,6000 \</span><br><span class="line">--learning_rate=0.01,0.001 \</span><br><span class="line">--wanted_words=one,two,three,four,marvin,wow</span><br></pre></td></tr></table></figure>
<p>当使用该模型时，可以适当增加training steps和learning rate。在这种情况下，训练的时间大大缩短了：<br><img src="/2018-01-11/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABAI/2018-01-12-08-57-07.png" alt><br>只花了不到3小时.</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>也可以使用gpu版本的tensorflow进行训练，速度可以提升不少哦。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2018-01-09/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Docker常用命令小结<br>Update: Translate to EN</p>
<a id="more"></a>

<h2 id="Gather-info"><a href="#Gather-info" class="headerlink" title="Gather info"></a>Gather info</h2><p>List all containers <br> 列出所有容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>Get container IP <br> 获取容器IP：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 2d0142bd65a7 | grep IPAddress</span><br></pre></td></tr></table></figure>
<p><em>2d0142bd65a7</em> is a container id. <br> 其中 <em>2d0142bd65a7</em> 为容器ID。 </p>
<p>List all loadable images <br> 列出可以装载的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h2 id="Save-Load-Tag-and-cp"><a href="#Save-Load-Tag-and-cp" class="headerlink" title="Save,Load,Tag and cp"></a>Save,Load,Tag and cp</h2><p>Save image to local file <br> 导出镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save 1865b6805867 &gt; image.tar</span><br></pre></td></tr></table></figure>
<p><em>1865b6805867</em> is a image id. <br> 其中 <em>1865b6805867</em> 为镜像ID。 </p>
<p>Create docker image based on a container <br> 基于容器创建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit <span class="variable">$&#123;container_id&#125;</span> <span class="variable">$&#123;image_name&#125;</span>:<span class="variable">$&#123;image_tag&#125;</span></span><br></pre></td></tr></table></figure>

<p>Load image from local file <br> 导入镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load &lt; image.tar</span><br></pre></td></tr></table></figure>

<p>Tag a image which id is <em>1865b6805867</em>(Only first 4 digits of ID is acceptable) <br><br>为ID为<em>1865b6805867</em>的镜像打上TAG(没错，只需要ID前几位就可以)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag 1865 gcr.io/tensorflow/tensorflow:latest-devel</span><br></pre></td></tr></table></figure>

<p>Copy a file or folder from container to local host:<br><br>从容器复制文件到主机(如果你忘了从主机挂载文件夹):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp <span class="variable">$&#123;containerID&#125;</span>:<span class="variable">$&#123;file_path_in_container&#125;</span> <span class="variable">$&#123;host_path&#125;</span></span><br></pre></td></tr></table></figure>
<p>It’s basically same when you trying to copy a file from host to container, just swap two parameters.</p>
<h2 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h2><p>Stop all containers <br> 停止所有容器 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>Delete all containers <br> 删除所有容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>
<p>Change <em>$(docker ps -aq)</em> to container id to stop or delete the specific container.</p>
<p>Delete all images <br> 删除所有镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>
<p>Change <em>$(docker images -q)</em> to image id to delete the specific image.</p>
<p>Remove unused data to free disk space <br> 删除未使用的数据以释放磁盘空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>使用TensorFlow训练自己的图像识别AI</title>
    <url>/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/</url>
    <content><![CDATA[<p>  摸索了几天，终于用TensorFlow成功训练了一个能够识别三种动漫人物的AI。写篇post记录一下。由于训练是在虚拟机上跑的，没有办法使用显卡，所以这次的训练只用到了CPU。GPU版本的训练下次再写。</p>
<a id="more"></a>
<p>训练环境：<br>  OS: Ubuntu 17.10(VMWare)<br>  CPU:i5-6300HQ(开了两个核给虚拟机)<br>  RAM:4G(16G只开了4G给虚拟机)</p>
<h2 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h2><p>  安装TensorFlow是一件十分麻烦的事情。你需要python(推荐python3以上)及各种扩展模块，bazel等等，这些安装操作会频繁地更改环境变量，稍有不慎就可能导致崩溃，还极难恢复。因此推荐使用Docker来进行环境搭建。</p>
<h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>  Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。你可以把容器看成一个沙箱。Docker提供了一些已经装完TensorFlow开发所需的各种依赖包的image。我们只需要使用Docker下载这些image，就可以在Docker的容器中进行开发，而不用担心安装各种扩展包导致系统崩溃。更重要的是，你可以基于一个image创建多个互不干扰的容器，我们可以在容器里进行各种变态的实验而不需要反复下载image。(特别是这些image由于某些众所周知的原因在大陆下载极其缓慢甚至不能下载)</p>
<h3 id="如何安装Docker"><a href="#如何安装Docker" class="headerlink" title="如何安装Docker"></a>如何安装Docker</h3><p>  参考Docker的<a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#extra-steps-for-aufs" target="_blank" rel="noopener">官方安装指南</a>可以非常轻松地完成Docker安装。</p>
<h3 id="下载集成TensorFlow开发环境的镜像"><a href="#下载集成TensorFlow开发环境的镜像" class="headerlink" title="下载集成TensorFlow开发环境的镜像"></a>下载集成TensorFlow开发环境的镜像</h3><p>  接下来的步骤需要root权限并需要访问Google服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it gcr.io/tensorflow/tensorflow:latest-devel</span></span><br></pre></td></tr></table></figure>
<p>执行该指令，Docker会自动下载镜像。你也可以选择下载不同版本的镜像：<br>CPU版：gcr.io/tensorflow/tensorflow<br>CPU版带开发环境：gcr.io/tensorflow/tensorflow:latest-devel<br>GPU版：gcr.io/tensorflow/tensorflow:latest-gpu<br>GPU版带开发环境：gcr.io/tensorflow/tensorflow:latest-devel-gpu</p>
<h3 id="搭建完成"><a href="#搭建完成" class="headerlink" title="搭建完成"></a>搭建完成</h3><p>  经过漫长的等待，如果命令行变成root@xxxxxxxxxxxx 说明下载安装完成，用户已经在Docker容器中了(xxxxxxxxx为当前容器ID)。</p>
<h2 id="准备训练样本"><a href="#准备训练样本" class="headerlink" title="准备训练样本"></a>准备训练样本</h2><p>  机器学习需要大量样本。这里我直接使用了Google图片的搜索结果作为样本，这样的方式方便快捷，但样本质量不一定高。当你尝试在Google图片中搜索“蜡笔小新”，搜索结果很有可能出现一幅没有包含蜡笔小新的图，该图可能只包含有动感超人甚至小白。这些错误的“正样本”会对训练结果产生影响。<br>  分别在Google图片中搜索“Crayon Shin-chan”、“spongebob”、“minions”可以找到大量图片。可以使用Chrome的一个名为“Fatkun Batch Download Image”的扩展程序进行图片批量下载。新建一个cartoon文件夹，将图片分别放在其子文件夹cartoon/crayon cartoon/minions cartoon/spongebob下。每个目录有800~900张图。</p>
<h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><p>  接下来的步骤需要root权限并需要访问Google服务器。</p>
<h3 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h3><p>  新建一个名为tf_files的文件夹，并将cartoon文件夹copy进来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir tf_files</span><br><span class="line">cp cartoon tf_files</span><br></pre></td></tr></table></figure>
<h3 id="运行容器并挂载工作目录"><a href="#运行容器并挂载工作目录" class="headerlink" title="运行容器并挂载工作目录"></a>运行容器并挂载工作目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v $(<span class="built_in">pwd</span>)/tf_files:/tf_files \</span><br><span class="line">  gcr.io/tensorflow/tensorflow:latest-devel</span><br></pre></td></tr></table></figure>
<h3 id="使用迁移学习进行训练"><a href="#使用迁移学习进行训练" class="headerlink" title="使用迁移学习进行训练"></a>使用迁移学习进行训练</h3><h4 id="什么是迁移学习"><a href="#什么是迁移学习" class="headerlink" title="什么是迁移学习"></a>什么是迁移学习</h4><p>  迁移学习(Transfer Learning)试图使用已经训练好的模型参数帮助新模型训练新的数据集。当数个训练任务及数据有一定程度的相关性，使用迁移学习可以加快新模型的学习而不用花费大量时间和样本从头开始训练。我们的任务是一个图像识别任务，这与Google训练好的Inception模型有较大的相关性，而我们的样本又较少，因此基于Inception模型进行迁移学习是个不错的选择。</p>
<h4 id="什么是Inception模型"><a href="#什么是Inception模型" class="headerlink" title="什么是Inception模型"></a>什么是Inception模型</h4><p>  Inception模型是一种用于图像分类的卷积神经网络模型。这是一个多层、有着极其复杂结构的卷积神经网络。该模型可以识别超过1000种物品，但并不包括我们想要的动漫人物。Github上有提到Inception模型训练是在一台有128GB RAM和8块Tesla K40的电脑上进行的(We targeted a desktop with 128GB of CPU ram connected to 8 NVIDIA Tesla K40 GPU)。如果你想在你的个人电脑上尝试从零开始训练一个这种量级的神经网络，你可能需要数个星期才能完成训练，还有很大的可能性出现run out of GPU memory或run out of CPU memory导致训练失败。在这里我们将尝试使用Tensorflow提供的retrain.py训练整个神经网络的最后一层，即决策层/分类层，而倒数第二层被称为Bottlenecks(瓶颈层)。我们将利用Bottlenecks产生的有效数据，供给最后的决策层/分类层做出最后的分类预测。</p>
<h4 id="开始训练-1"><a href="#开始训练-1" class="headerlink" title="开始训练"></a>开始训练</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tensorflow/</span><br><span class="line">python tensorflow/tensorflow/examples/image_retraining/retrain.py \</span><br><span class="line">  --bottleneck_dir=/tf_files/bottlenecks \</span><br><span class="line">  --how_many_training_steps 4000 \</span><br><span class="line">  --model_dir=/tf_files/inception \</span><br><span class="line">  --output_graph=/tf_files/cartoon.pb \</span><br><span class="line">  --output_labels=/tf_files/cartoon.txt \</span><br><span class="line">  --image_dir /tf_files/cartoon</span><br></pre></td></tr></table></figure>
<p>在这里我们设置了bottleneck的输出目录，training_steps，模型位置，pb文件及label输出位置，样本图片位置。一般而言training_steps越多，训练时间越长，效果越好，反之则反。如果模型位置没有需要的模型，该脚本会尝试自动下载。pb文件就是训练完成的模型，label是一个txt文件，里面包含了我们训练完成的模型能识别的对象名称。不出意外的话，几十分钟后训练就可以完成。</p>
<p><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/0.png" alt></p>
<p>可以看到我们的模型的测试识别准确率达到了95.5%。</p>
<p>tf_files下生成了我们训练的模型cartoon.pb以及label文件cartoon.txt。打开cartoon.txt可以看到，该模型可以识别的对象有crayon(蜡笔小新)、minions(小黄人)、spongebob(海绵宝宝)三种(就是cartoon文件夹下子文件夹的名字)。我这里生成的pb文件有87.4MB。</p>
<p><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/1.png" alt></p>
<h2 id="优化与压缩"><a href="#优化与压缩" class="headerlink" title="优化与压缩"></a>优化与压缩</h2><h3 id="为什么要进行优化和压缩"><a href="#为什么要进行优化和压缩" class="headerlink" title="为什么要进行优化和压缩"></a>为什么要进行优化和压缩</h3><p>  对于移动设备(例如智能手机)和嵌入式设备(例如跑Android Things或Linux的设备)来说，这个模型文件太大了。如果你尝试把其打包为apk文件，你可能会得到一个将近100MB的apk，这对用户来说可能体验并不太友好。因此我们需要对该模型进行优化和压缩以减小其体积。<br>如果你尝试直接将该pb文件压缩为zip文件，你会发现压缩文件大小只比原来小了几MB。我尝试使用优化脚本对pb文件进行优化，优化后的压缩效果还不错。</p>
<h3 id="使用optimize-for-inference优化工具"><a href="#使用optimize-for-inference优化工具" class="headerlink" title="使用optimize_for_inference优化工具"></a>使用optimize_for_inference优化工具</h3><p>  optimize_for_inference脚本将会帮助我们删除当前模型中输入输出之前不需要的节点，并进行一些其他优化以提高运行性能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python tensorflow/python/tools/optimize_for_inference.py \</span><br><span class="line">  --input=/tf_files/cartoon.pb \</span><br><span class="line">  --output=/tf_files/optimized_cartoon.pb \</span><br><span class="line">  --input_names=<span class="string">"Mul"</span> \</span><br><span class="line">  --output_names=<span class="string">"final_result"</span></span><br></pre></td></tr></table></figure>
<p>优化完成后我们可以得到一个名为optimized_cartoon.pb的优化过的模型文件。但是只比原来小了0.2MB。压缩为zip文件也小不了多少:(</p>
<h3 id="使用quantize-graph工具进行进一步优化"><a href="#使用quantize-graph工具进行进一步优化" class="headerlink" title="使用quantize_graph工具进行进一步优化"></a>使用quantize_graph工具进行进一步优化</h3><p>  看来是时候放大招了。我们将使用quantize_graph对模型文件中的权重参数进行四舍五入。这一方式将会降低预测准确率(但是通常只降低1%左右)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python tensorflow/tools/quantization/quantize_graph.py \</span><br><span class="line">  --input=/tf_files/optimized_cartoon.pb \</span><br><span class="line">  --output=/tf_files/rounded_cartoon.pb \</span><br><span class="line">  --output_node_names=<span class="string">"final_result"</span> \</span><br><span class="line">  --mode=weights_rounded</span><br></pre></td></tr></table></figure>
<p>  通常来说，新生成的rounded_cartoon.pb大小并不会发生太大变化，但是当我尝试将其压缩为zip文件时，我得到了一个令人满意的压缩包大小：23.9MB</p>
<p><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/2.png" alt></p>
<p>  现在如果我们尝试将其作为资源文件打包进apk，可以得到一个小得多的安装包，用户下载的时间大大减少了。</p>
<h2 id="测试与验证"><a href="#测试与验证" class="headerlink" title="测试与验证"></a>测试与验证</h2><p>  首先我们将测试经过optimize_for_inference优化的optimized_cartoon.pb。为了方便测试，我使用了TensorFlow在Android上的demo app，你可以在Github上找到其源码。要让我们的模型文件能够在这个demo上正常工作，我们需要做一点微小的工作。<br>1.复制optimized_cartoon.pb及cartoon.txt文件至app/src/main/assets<br>2.在ClassifierActivity.java中修改如下部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INPUT_SIZE = <span class="number">299</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMAGE_MEAN = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> IMAGE_STD = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT_NAME = <span class="string">"Mul"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OUTPUT_NAME = <span class="string">"final_result"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODEL_FILE = <span class="string">"file:///android_asset/optimized_cartoon.pb"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LABEL_FILE = <span class="string">"file:///android_asset/cartoon.txt"</span>;</span><br></pre></td></tr></table></figure>
<p>这里我们限制输入图像为299x299, 并更改INPUT_NAME和OUTPUT_NAME。当然还有MODEL_FILE和LABEL_FILE的位置。测试样例我直接用手机拍的，由于限制了输入图像大小为299x299，所以图片质量比较差，但是还是得到了不错的运行结果：<br><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/res1.png" alt><br><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/res2.png" alt><br><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/res3.png" alt><br>再看看经过quantize_graph优化的：<br><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/res4.png" alt><br><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/res5.png" alt><br><img src="/2018-01-03/%E4%BD%BF%E7%94%A8TensorFlow%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%ABAI/res6.png" alt></p>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>  接下来我们可以尝试进行音频方向的机器学习探索。目前还在研究中，等有了有趣的发现后再写篇post吧。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Gparted扩展分区</title>
    <url>/2018-01-03/%E4%BD%BF%E7%94%A8Gparted%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<p>  前段时间跑机器学习，使用docker下了几个tensorflow的镜像，突然发现磁盘不够用了。相关的命令行不太熟，就想找找是不是有类似于分区精灵的带GUI的分区工具，还真找到一个Gparted。</p>
<a id="more"></a>
<p>  首先安装Gparted，然后运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install gparted</span></span><br><span class="line"><span class="comment"># gparted</span></span><br></pre></td></tr></table></figure>
<p>  如果是Ubuntu 17.10或以上版本，可能会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gparted</span></span><br><span class="line">Created symlink /run/systemd/system/-.mount → /dev/null.</span><br><span class="line">Created symlink /run/systemd/system/run-user-1000.mount → /dev/null.</span><br><span class="line">Created symlink /run/systemd/system/run-user-121.mount → /dev/null.</span><br><span class="line">Created symlink /run/systemd/system/run-vmblock\x2dfuse.mount → /dev/null.</span><br><span class="line">Created symlink /run/systemd/system/tmp.mount → /dev/null.</span><br><span class="line">Created symlink /run/systemd/system/var-lib-docker-overlay2.mount → /dev/null.</span><br><span class="line">Created symlink /run/systemd/system/var-lib-docker-plugins.mount → /dev/null.</span><br><span class="line">No protocol specified</span><br><span class="line"></span><br><span class="line">(gpartedbin:3041): Gtk-WARNING **: cannot open display: :0</span><br><span class="line">Removed /run/systemd/system/-.mount.</span><br><span class="line">Removed /run/systemd/system/run-user-1000.mount.</span><br><span class="line">Removed /run/systemd/system/run-user-121.mount.</span><br><span class="line">Removed /run/systemd/system/run-vmblock\x2dfuse.mount.</span><br><span class="line">Removed /run/systemd/system/tmp.mount.</span><br><span class="line">Removed /run/systemd/system/var-lib-docker-overlay2.mount.</span><br><span class="line">Removed /run/systemd/system/var-lib-docker-plugins.mount.</span><br></pre></td></tr></table></figure>
<p>  google了一下，原因是应用没有完全支持Wayland。但是有workaround:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xhost +SI:localuser:root</span><br></pre></td></tr></table></figure>
<p>  之后就可以正常运行了。首先将当前分区扩容。之后添加一个扩展分区，再在扩展分区下添加linux-swap。最后别忘了应用修改。<br>  <img src="/2018-01-03/%E4%BD%BF%E7%94%A8Gparted%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/gparted.png" alt></p>
]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在树莓派上使用Google Assistant</title>
    <url>/2017-12-28/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E4%BD%BF%E7%94%A8Google-Assistant/</url>
    <content><![CDATA[<p>前段时间尝试在树莓派上使用Google Assistant, 系统能够捕捉音频并识别，使用USB声卡也能正常工作，但使用3.5mm jack时没有音频输出。经过摸索终于有输出了！写篇post记录一下关键步骤吧！</p>
<a id="more"></a>
<p>  首先配置输入输出设备：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">audioInputDevice = findAudioDevice(AudioManager.GET_DEVICES_INPUTS, AudioDeviceInfo.TYPE_USB_DEVICE);</span><br><span class="line">audioOutputDevice = findAudioDevice(AudioManager.GET_DEVICES_OUTPUTS, AudioDeviceInfo.TYPE_BUILTIN_SPEAKER);</span><br></pre></td></tr></table></figure>
<p>此处TYPE_BUILTIN_SPEAKER即为3.5mm输出口。之前尝试TYPE_AUX_LINE、TYPE_LINE_ANALOG、TYPE_WIRED_HEADPHONES等全都不能发现设备返回null;<br>  然后生成凭据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    userCredentials =</span><br><span class="line">            EmbeddedAssistant.generateCredentials(<span class="keyword">this</span>, R.raw.credentials);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | JSONException e) &#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"error getting user credentials"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  最后使用mEmbeddedAssistant = new EmbeddedAssistant.Builder(), 绑定完RequestCallback、ConversationCallback、凭据、初始音量、采样率、输入输出设备就可以啦！<br>  现在的sample还有点蠢，不能使用HotWord唤醒。而且在没有前置语言处理模块的情况下，识别稍微有点慢。</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Raspberry Pi</tag>
        <tag>Android Things</tag>
      </tags>
  </entry>
  <entry>
    <title>在Android Things上使用TTS及使用Google Assistant遇到的问题</title>
    <url>/2017-12-06/%E5%9C%A8Android-Things%E4%B8%8A%E4%BD%BF%E7%94%A8TTS%E5%8F%8A%E4%BD%BF%E7%94%A8Google-Assistant%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>  智能音响有两个重要功能:“说”和“听”。在Android Things上我们可以通过TextToSpeech和Google Assistant来实现上述功能。TTS的实现比较容易，而Google Assistant就比较麻烦了，目前我遇到的问题是Google Assistant能听懂我说什么，却不能给出答案。。还是写个日志记录一下吧。</p>
<a id="more"></a>
<h2 id="TTS的实现"><a href="#TTS的实现" class="headerlink" title="TTS的实现"></a>TTS的实现</h2><p>  TTS实现起来十分容易，创建TextToSpeech并重写OnInitListener的onInit方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ttsEngine = <span class="keyword">new</span> TextToSpeech(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> TextToSpeech.OnInitListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status==TextToSpeech.SUCCESS)&#123;</span><br><span class="line">            ttsEngine.setLanguage(Locale.US);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Log.w(TAG,<span class="string">"Can not init tts engine"</span>);</span><br><span class="line">            ttsEngine = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>再通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ttsEngine != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ttsEngine.speak(<span class="string">"Hi master. What can I do for you?"</span>, TextToSpeech.QUEUE_ADD, <span class="keyword">null</span>, <span class="string">"UTTERANCE_ID"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即可实现音频输出。完整的代码已上传到github：<a href="https://github.com/codingspirit/Android_Things_TTS" target="_blank" rel="noopener">Roach</a></p>
<h2 id="Google-Assistant"><a href="#Google-Assistant" class="headerlink" title="Google Assistant"></a>Google Assistant</h2><p>  要使用Google Assistant，必须要使用Google Assistant API并创建相应的加密凭据。同时，申请的Google账号还要给予app权限以允许访问一些敏感内容。先贴张测试结果图：<br><img src="/2017-12-06/%E5%9C%A8Android-Things%E4%B8%8A%E4%BD%BF%E7%94%A8TTS%E5%8F%8A%E4%BD%BF%E7%94%A8Google-Assistant%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt><br>在测试中，app似乎成功上传了录音并能正确识别，但是却不能根据问题进行正确的解答，初步怀疑可能还有一些权限没有申请。</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Android Things</tag>
      </tags>
  </entry>
  <entry>
    <title>使用@IntDef替代Enum</title>
    <url>/2017-11-27/%E4%BD%BF%E7%94%A8-IntDef%E6%9B%BF%E4%BB%A3Enum/</url>
    <content><![CDATA[<p>  <a href="https://developer.android.com/topic/performance/memory.html#Overhead" target="_blank" rel="noopener">有篇Android官方文档</a>提到：”For example, enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.” 于是我们使用自定义annotation来代替Enum。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="meta">@IntDef</span>(&#123;RATE_120HZ, RATE_64HZ, RATE_32HZ, RATE_16HZ, RATE_8HZ, RATE_4HZ, RATE_2HZ, RATE_1HZ&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SamplingRate &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_120HZ = <span class="number">0b0000</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_64HZ  = <span class="number">0b0001</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_32HZ  = <span class="number">0b0010</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_16HZ  = <span class="number">0b0011</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_8HZ   = <span class="number">0b0100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_4HZ   = <span class="number">0b0101</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_2HZ   = <span class="number">0b0110</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE_1HZ   = <span class="number">0b0111</span>;</span><br></pre></td></tr></table></figure>
<p>@Retention 表示在什么级别保存该注解信息。可选的 RetentionPolicy 参数包括：<br>    RetentionPolicy.SOURCE 注解将被编译器丢弃<br>    RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃<br>    RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。<br>@IntDef内输入原来的枚举变量，最后使用@interface声明注解名称。当需要使用时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SamplingRate</span> <span class="keyword">int</span> rate = RATE_64HZ;</span><br></pre></td></tr></table></figure>
<p>真是不方便啊。。。</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>在Android Things上使用远程屏幕</title>
    <url>/2017-11-25/%E5%9C%A8Android-Things%E4%B8%8A%E4%BD%BF%E7%94%A8%E8%BF%9C%E7%A8%8B%E5%B1%8F%E5%B9%95/</url>
    <content><![CDATA[<p>当完成连接的配置后，我们可以通过Vysor在远程屏幕上显示和控制Things Device。</p>
<a id="more"></a>

<p>  1.<a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="noopener">Vysor</a>是一款基于Chrome的扩展程序，下载后在Chorme中启用。<br>  2.使用adb连接到Things<br>  3.启动Vysor并连接，第一次使用需要在Things上安装apk。<br>  4.Enjoy(还可以截图和录像哦！)</p>
<p>  <img src="/2017-11-25/%E5%9C%A8Android-Things%E4%B8%8A%E4%BD%BF%E7%94%A8%E8%BF%9C%E7%A8%8B%E5%B1%8F%E5%B9%95/screenshot-1511577772947.jpg" alt></p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Android Things</tag>
      </tags>
  </entry>
  <entry>
    <title>在Raspberry Pi上初试Android Things</title>
    <url>/2017-11-24/%E5%9C%A8Raspberry-Pi%E4%B8%8A%E5%88%9D%E8%AF%95Android-Things/</url>
    <content><![CDATA[<p>  Google推出Android Things都快一年了，现在还在preview阶段，而且现在支持的平台也很少，但是这些都无法阻挡我们试水的热情…</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>  1.Raspberry Pi 3<br>  2.HDMI cable and monitor(据说有类似于VNC的工具，但是显示分辨率有问题)<br>  3.Ethernet cable(第一次连接需要)<br>  4.Micro SD card</p>
<h2 id="生成IMAGE"><a href="#生成IMAGE" class="headerlink" title="生成IMAGE"></a>生成IMAGE</h2><p>  首先在<a href="https://partner.android.com/things/console/" target="_blank" rel="noopener">Android Things Console</a>上生成Image。新建一个product,输入Product name,选择SOM Type。之后可以添加Bundle自定义开机动画等设置，也可以直接使用Empty bundle。之后选择一个Android Things versions, Create build configuration后，可以进行在线的build和Image生成(之前据说最开始本地build用服务器级的至强cpu都要build 5个小时)，下载生成的zip file。</p>
<h2 id="烧录Image"><a href="#烧录Image" class="headerlink" title="烧录Image"></a>烧录Image</h2><p>  解压下载的zip file，解压得到使用烧录工具(比如Etcher)将iot_rpi3.img烧录至SD card。</p>
<h2 id="启动并连接设备"><a href="#启动并连接设备" class="headerlink" title="启动并连接设备"></a>启动并连接设备</h2><p>  接好HDMI和Ethernet，插入SD card就可以开机了！</p>
<p>  <img src="/2017-11-24/%E5%9C%A8Raspberry-Pi%E4%B8%8A%E5%88%9D%E8%AF%95Android-Things/1.jpg" alt></p>
<p>  接下来我们测试一下Ethernet的连接性。如果连接正常，屏幕上是会显示当前的ip地址的。使用adb尝试连接一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.1.66</span><br></pre></td></tr></table></figure>
<p>当你看见如下内容，表明adb连接成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connected to 192.168.1.66:5555</span><br></pre></td></tr></table></figure>
<p>在连接上adb后，我们可以设置通过wifi连接以摆脱网线的束缚</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">am startservice \</span><br><span class="line">    -n com.google.wifisetup/.WifiSetupService \</span><br><span class="line">    -a WifiSetupService.Connect \</span><br><span class="line">    -e ssid network_ssid \</span><br><span class="line">    -e passphrase network_pass \</span><br></pre></td></tr></table></figure>
<p>其中network_ssid尝试连接的wifi ssid，network_pass为密码（开放网络中该参数可以不填）。然后我们需要验证一下无线连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logcat -d | grep Wifi</span><br></pre></td></tr></table></figure>
<p>当看见WifiWatcher: Network state changed to CONNECTED时，表明连接成功。这时可以尝试断开adb,拔掉网线,使用adb连接无线ip,连接成功后可以ping一下百度：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure>
<p>如果想清除所有保存的wifi连接设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">am startservice \</span><br><span class="line">    -n com.google.wifisetup/.WifiSetupService \</span><br><span class="line">    -a WifiSetupService.Reset</span><br></pre></td></tr></table></figure>

<h2 id="UI-DEMO"><a href="#UI-DEMO" class="headerlink" title="UI DEMO"></a>UI DEMO</h2><p>  这里以官方的UI DEMO(om.example.androidthings.simpleui)为例，跑个带UI的app试一下。</p>
<h3 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h3><p>  Things工程的结构和普通Android app结构很相似，Things的更加简单。还是熟悉的AndroidManifest.xml + java + res。</p>
<p>  <img src="/2017-11-24/%E5%9C%A8Raspberry-Pi%E4%B8%8A%E5%88%9D%E8%AF%95Android-Things/2.png" alt></p>
<p>  在Manifest中声明主题、入口Activity、权限等，在layout中，Android基本的控件都有。。。总而言之，和普通Android开发相似度极高，以致于我都不想写下去了。。。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>  贴段几段代码，分析下值得注意的地方。首先import了几个在Android开发中没见过的包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.android.things.pio.Gpio;</span><br><span class="line"><span class="keyword">import</span> com.google.android.things.pio.PeripheralManagerService;</span><br></pre></td></tr></table></figure>
<p>非常明显的things包，提供了gpio类，以及一个很重要的PeripheralManagerService. 我们通过PeripheralManager来操作外设。树莓派3的gpio name可以通过getGpioList获得，要对某个gpio进行控制，需要先openGpio(init)，然后可以通过setDirection设置io方向及初始电平，setEdgeTriggerType设置边缘触发模式(中断)，setActiveType设置高电平为true还是低电平为true，setValue来更改电平。当setActiveType(Gpio.ACTIVE_LOW)时，setValue(true)会输出低电平，反之亦然。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleUiActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = SimpleUiActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Gpio&gt; mGpioMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        LinearLayout gpioPinsView = (LinearLayout) findViewById(R.id.gpio_pins);</span><br><span class="line">        LayoutInflater inflater = getLayoutInflater();</span><br><span class="line">        PeripheralManagerService pioService = <span class="keyword">new</span> PeripheralManagerService();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : pioService.getGpioList()) &#123;</span><br><span class="line">            View child = inflater.inflate(R.layout.list_item_gpio, gpioPinsView, <span class="keyword">false</span>);</span><br><span class="line">            Switch button = (Switch) child.findViewById(R.id.gpio_switch);</span><br><span class="line">            button.setText(name);</span><br><span class="line">            gpioPinsView.addView(button);</span><br><span class="line">            Log.d(TAG, <span class="string">"Added button for GPIO: "</span> + name);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> Gpio ledPin = pioService.openGpio(name);</span><br><span class="line">                ledPin.setEdgeTriggerType(Gpio.EDGE_NONE);</span><br><span class="line">                ledPin.setActiveType(Gpio.ACTIVE_HIGH);</span><br><span class="line">                ledPin.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</span><br><span class="line"></span><br><span class="line">                button.setOnCheckedChangeListener(<span class="keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            ledPin.setValue(isChecked);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            Log.e(TAG, <span class="string">"error toggling gpio:"</span>, e);</span><br><span class="line">                            buttonView.setOnCheckedChangeListener(<span class="keyword">null</span>);</span><br><span class="line">                            <span class="comment">// reset button to previous state.</span></span><br><span class="line">                            buttonView.setChecked(!isChecked);</span><br><span class="line">                            buttonView.setOnCheckedChangeListener(<span class="keyword">this</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                mGpioMap.put(name, ledPin);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"Error initializing GPIO: "</span> + name, e);</span><br><span class="line">                <span class="comment">// disable button</span></span><br><span class="line">                button.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Gpio&gt; entry : mGpioMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                entry.getValue().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"Error closing GPIO "</span> + entry.getKey(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mGpioMap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>  <img src="/2017-11-24/%E5%9C%A8Raspberry-Pi%E4%B8%8A%E5%88%9D%E8%AF%95Android-Things/3.jpg" alt></p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Raspberry Pi</tag>
        <tag>Android Things</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 生成Log文件</title>
    <url>/2017-11-16/CSharp-%E7%94%9F%E6%88%90Log%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>写了个Log类实现带时间戳的Log out, 代码如下：</p>
<a id="more"></a>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">My_Space</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> System;</span><br><span class="line">    <span class="keyword">using</span> System.IO;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Log</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> logFile;</span><br><span class="line">        <span class="keyword">private</span> StreamWriter writer;</span><br><span class="line">        <span class="keyword">private</span> FileStream fileStream = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Log</span>(<span class="params"><span class="keyword">string</span> fileName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            logFile = fileName;</span><br><span class="line">            CreateDirectory(logFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogOut</span>(<span class="params"><span class="keyword">string</span> info</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                FileInfo fileInfo = <span class="keyword">new</span> FileInfo(logFile);</span><br><span class="line">                <span class="keyword">if</span> (!fileInfo.Exists)</span><br><span class="line">                &#123;</span><br><span class="line">                    fileStream = fileInfo.Create();</span><br><span class="line">                    writer = <span class="keyword">new</span> StreamWriter(fileStream);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    fileStream = fileInfo.Open(FileMode.Append, FileAccess.Write);</span><br><span class="line">                    writer = <span class="keyword">new</span> StreamWriter(fileStream);</span><br><span class="line">                &#125;</span><br><span class="line">                writer.WriteLine(<span class="string">"@"</span> + DateTime.Now + <span class="string">"#"</span> + info + <span class="string">";"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (writer != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    writer.Close();</span><br><span class="line">                    writer.Dispose();</span><br><span class="line">                    fileStream.Close();</span><br><span class="line">                    fileStream.Dispose();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateDirectory</span>(<span class="params"><span class="keyword">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DirectoryInfo directoryInfo = Directory.GetParent(filePath);</span><br><span class="line">            <span class="keyword">if</span> (!directoryInfo.Exists)</span><br><span class="line">            &#123;</span><br><span class="line">                directoryInfo.Create();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadLog</span>(<span class="params"><span class="keyword">string</span> logPath, <span class="keyword">out</span> <span class="keyword">string</span> dataRead</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            StreamReader sR1 = <span class="keyword">new</span> StreamReader(logPath);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                dataRead = sR1.ReadToEnd();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C Sharp</tag>
      </tags>
  </entry>
  <entry>
    <title>使用qemu运行Linux-kernel</title>
    <url>/2017-11-12/%E4%BD%BF%E7%94%A8qemu%E8%BF%90%E8%A1%8CLinux-kernel/</url>
    <content><![CDATA[<p>之前想买块MTK的开发板，结果根本没有卖。。。 树莓派今年又不会出4，于是想用qemu边学边玩。</p>
<a id="more"></a>
<p>宿主OS：Ubuntu 17.04</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>由于某些众所周知的原因，访问一些国外的服务器非常慢，因此推荐使用国内的镜像，我这里用的是阿里的：<br><img src="/2017-11-12/%E4%BD%BF%E7%94%A8qemu%E8%BF%90%E8%A1%8CLinux-kernel/a.png" alt><br>换完更新源后，个人习惯装一个vim：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>
<h2 id="安装arm交叉编译链"><a href="#安装arm交叉编译链" class="headerlink" title="安装arm交叉编译链"></a>安装arm交叉编译链</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-arm-linux-gnueabi</span><br></pre></td></tr></table></figure>
<p>也可以装一个arm-linux-gnueabihf，如果硬件带fpu，可以使用该工具。</p>
<h2 id="安装qemu"><a href="#安装qemu" class="headerlink" title="安装qemu"></a>安装qemu</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qemu</span><br></pre></td></tr></table></figure>
<h2 id="下载Linux-kernal并编译"><a href="#下载Linux-kernal并编译" class="headerlink" title="下载Linux kernal并编译"></a>下载Linux kernal并编译</h2><p>从<a href="https://www.kernel.org/" target="_blank" rel="noopener">kernel.org</a>下载源码包。下载完成后解包到任意目录。cd过去后，使用vim新建一个build脚本build.sh,内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span>  ARCH=arm </span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=arm-linux-gnueabi- </span><br><span class="line">make vexpress_defconfig</span><br><span class="line">make zImage -j8</span><br><span class="line">make modules -j8</span><br><span class="line">make dtbs</span><br><span class="line">mkdir extra_folder</span><br><span class="line">cp arch/arm/boot/zImage extra_folder/</span><br><span class="line">cp arch/arm/boot/dts/*ca9.dtb extra_folder/</span><br><span class="line">cp .config extra_folder/</span><br></pre></td></tr></table></figure>
<p>运行脚本会使用arm-linux-gnueabi进行编译，并把生成的zImage和dtb文件copy到extra_folder（不然的话每次都手动copy好累。。）</p>
<h2 id="下载busybox"><a href="#下载busybox" class="headerlink" title="下载busybox"></a>下载busybox</h2><p>busybox能够提供一些基本的指令，如umount,sh,vi等等。在<a href="https://busybox.net/" target="_blank" rel="noopener">busybox.net</a>下载源代码包，当然使用wget或者git clone也是可以的。解包后，cd到代码目录，再写一个build.sh：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make defconfig</span><br><span class="line">make CROSS_COMPILE=arm-linux-gnueabi-</span><br><span class="line">make install CROSS_COMPILE=arm-linux-gnueabi-</span><br></pre></td></tr></table></figure>
<p>运行脚本将在该目录下生成一个_install文件夹。</p>
<h2 id="制作根文件系统和镜像"><a href="#制作根文件系统和镜像" class="headerlink" title="制作根文件系统和镜像"></a>制作根文件系统和镜像</h2><h3 id="创建rootfs"><a href="#创建rootfs" class="headerlink" title="创建rootfs"></a>创建rootfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir rootfs</span><br><span class="line">sudo mkdir rootfs/lib</span><br></pre></td></tr></table></figure>
<h3 id="复制busybox命令"><a href="#复制busybox命令" class="headerlink" title="复制busybox命令"></a>复制busybox命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp _install/* -r rootfs/</span><br></pre></td></tr></table></figure>
<h3 id="复制运行库"><a href="#复制运行库" class="headerlink" title="复制运行库"></a>复制运行库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp -P /usr/arm-linux-gnueabi/lib/* rootfs/lib/</span><br></pre></td></tr></table></figure>
<h3 id="创建字符设备用于测试"><a href="#创建字符设备用于测试" class="headerlink" title="创建字符设备用于测试"></a>创建字符设备用于测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p rootfs/dev</span><br><span class="line">sudo mknod rootfs/dev/tty1 c 4 1</span><br><span class="line">sudo mknod rootfs/dev/tty2 c 4 2</span><br><span class="line">sudo mknod rootfs/dev/tty2 c 4 3</span><br><span class="line">sudo mknod rootfs/dev/tty2 c 4 4</span><br></pre></td></tr></table></figure>
<p>c：字符型<br>4：主设备号<br>1，2：次设备号</p>
<h3 id="生成镜像并格式化生成ext3文件系统"><a href="#生成镜像并格式化生成ext3文件系统" class="headerlink" title="生成镜像并格式化生成ext3文件系统"></a>生成镜像并格式化生成ext3文件系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=a9rootfs.ext3 bs=1M count=32</span><br><span class="line">mkfs.ext3 a9rootfs.ext3</span><br></pre></td></tr></table></figure>
<h3 id="复制文件到镜像中"><a href="#复制文件到镜像中" class="headerlink" title="复制文件到镜像中"></a>复制文件到镜像中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir tmpfs</span><br><span class="line">sudo mount -t ext3 a9rootfs.ext3 tmpfs/ -o loop</span><br><span class="line">sudo cp -r rootfs/*  tmpfs/</span><br><span class="line">sudo umount tmpfs</span><br></pre></td></tr></table></figure>
<h2 id="启动qemu并运行系统"><a href="#启动qemu并运行系统" class="headerlink" title="启动qemu并运行系统"></a>启动qemu并运行系统</h2><p>写一个runOS.sh并运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 256M -dtb extra_folder/vexpress-v2p-ca9.dtb -kernel extra_folder/zImage -append <span class="string">"root=/dev/mmcblk0 rw"</span> -sd a9rootfs.ext3</span><br></pre></td></tr></table></figure>
<p><img src="/2017-11-12/%E4%BD%BF%E7%94%A8qemu%E8%BF%90%E8%A1%8CLinux-kernel/b.png" alt><br>然后熟悉的企鹅出现了!<br><img src="/2017-11-12/%E4%BD%BF%E7%94%A8qemu%E8%BF%90%E8%A1%8CLinux-kernel/c.png" alt><br>拷个hello world试一下:<br><img src="/2017-11-12/%E4%BD%BF%E7%94%A8qemu%E8%BF%90%E8%A1%8CLinux-kernel/d.png" alt></p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Android添加App载入界面</title>
    <url>/2017-11-09/Android%E6%B7%BB%E5%8A%A0App%E8%BD%BD%E5%85%A5%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<p>当App启动载入时间较长时，我们希望有一个载入界面过渡，当载入完成后再切换到MainActivity。这个载入界面我们称之为SplashActivity。</p>
<a id="more"></a>
<p>首先写一个继承AppCompatActivity的SplashActivity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span> SplashTime = <span class="number">3200</span>;<span class="comment">// 期望的Splash时间</span></span><br><span class="line">		WebView wbGif;<span class="comment">// 在这里我使用Webview来加载一个GIF动画</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后Override onCreate方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_splash);</span><br><span class="line">        wbGif = (WebView) findViewById(R.id.webViewGif);<span class="comment">// 在这里我使用Webview来加载一个GIF动画</span></span><br><span class="line">        wbGif.setBackgroundColor(Color.parseColor(<span class="string">"#6a0606"</span>));</span><br><span class="line">        wbGif.loadUrl(<span class="string">"file:///android_res/drawable/loading.gif"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>在该onCreate方法中创建一个新的Handler对象，它将在SplashTime结束后切换到MainActivity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> android.os.Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent main = <span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span>, MainActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        SplashActivity.<span class="keyword">this</span>.startActivity(main);</span><br><span class="line">        SplashActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, SplashTime);</span><br></pre></td></tr></table></figure>
<p>最后别忘了在AndroidManifest.xml中将入口Activity设置为SplashActivity：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SplashActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>App Development</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>C#自定义Excel导出类</title>
    <url>/2017-11-08/CSharp%E8%87%AA%E5%AE%9A%E4%B9%89Excel%E5%AF%BC%E5%87%BA%E7%B1%BB/</url>
    <content><![CDATA[<p>前段时间写了个debug tool用来自动抓测试数据，该工具需要通过爬取Log数据自动生成带Chart的Excel，但是原生的COM组件非常不好用，于是我重新封装了一个。</p>
<a id="more"></a>
<p>Reference: Microsoft Excel 15.0 Object Library(COM组件)</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Office.Interop.Excel;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">My_Space</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExportExcel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> xlsOutPath;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> xlsInPath;</span><br><span class="line">        <span class="keyword">private</span> Application xlsApp;</span><br><span class="line">        <span class="keyword">private</span> Workbook xlsWorkBook;</span><br><span class="line">        <span class="keyword">private</span> Worksheet xlsWorkSheet;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">object</span> misValue = Missing.Value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ExportExcel</span>(<span class="params"><span class="keyword">string</span> excelOutPath</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            xlsOutPath = excelOutPath;</span><br><span class="line">            xlsInPath = <span class="literal">null</span>;</span><br><span class="line">            xlsApp = <span class="keyword">new</span> Application();</span><br><span class="line">            <span class="keyword">if</span> (xlsApp == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Please Install Excel 2013 or Newer Verison"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            XlsWorkBook = xlsApp.Workbooks.Add(misValue);</span><br><span class="line">            xlsWorkSheet = XlsWorkBook.Worksheets.get_Item(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ExportExcel</span>(<span class="params"><span class="keyword">string</span> excelInPath, <span class="keyword">string</span> excelOutPath</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            xlsInPath = excelInPath;</span><br><span class="line">            xlsOutPath = excelOutPath;</span><br><span class="line">            xlsApp = <span class="keyword">new</span> Application();</span><br><span class="line">            <span class="keyword">if</span> (xlsApp == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Please Install Excel 2013 or Newer Verison"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            XlsWorkBook = xlsApp.Workbooks.Add(xlsInPath);</span><br><span class="line">            xlsWorkSheet = XlsWorkBook.Worksheets.get_Item(xlsWorkBook.Worksheets.Count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Worksheet XlsWorkSheet &#123; <span class="keyword">get</span> =&gt; xlsWorkSheet; <span class="keyword">set</span> =&gt; xlsWorkSheet = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Workbook XlsWorkBook &#123; <span class="keyword">get</span> =&gt; xlsWorkBook; <span class="keyword">set</span> =&gt; xlsWorkBook = <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddChart</span>(<span class="params">Worksheet worksheet, <span class="keyword">double</span> left, <span class="keyword">double</span> top, <span class="keyword">double</span> weight, <span class="keyword">double</span> height, <span class="keyword">string</span> dataStart, <span class="keyword">string</span> dataEnd</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ChartObjects xlsCharts = worksheet.ChartObjects(Type.Missing);</span><br><span class="line">            ChartObject myChart = xlsCharts.Add(left, top, weight, height);</span><br><span class="line">            Range chartRange = worksheet.get_Range(dataStart, dataEnd);</span><br><span class="line">            myChart.Chart.SetSourceData(chartRange, misValue);</span><br><span class="line">            myChart.Chart.ChartType = XlChartType.xlXYScatterSmooth;</span><br><span class="line">            myChart.Chart.ChartStyle = <span class="number">245</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddSheet</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">bool</span> exist = <span class="literal">false</span>;<span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= XlsWorkBook.Sheets.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (XlsWorkBook.Sheets[i].Name == name)</span><br><span class="line">                &#123;</span><br><span class="line">                    exist = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!exist)</span><br><span class="line">            &#123;</span><br><span class="line">                xlsWorkSheet = XlsWorkBook.Sheets.Add(misValue, xlsWorkSheet, misValue, misValue);</span><br><span class="line">                xlsWorkSheet.Name = name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                xlsWorkSheet = XlsWorkBook.Sheets[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopySheet</span>(<span class="params">Worksheet src,Worksheet dst</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            src.Cells.Copy(Type.Missing);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                dst.Paste(Type.Missing, Type.Missing);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddHyperLink</span>(<span class="params"><span class="keyword">string</span> cellName, <span class="keyword">string</span> link</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Range range = xlsWorkSheet.get_Range(cellName,Type.Missing);</span><br><span class="line">            xlsWorkSheet.Hyperlinks.Add(range, link);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveExcel</span>(<span class="params"><span class="keyword">bool</span> flag</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                xlsWorkBook.Close(<span class="literal">true</span>, xlsOutPath, misValue);</span><br><span class="line">            &#125;</span><br><span class="line">            System.Runtime.InteropServices.Marshal.ReleaseComObject(xlsWorkSheet);</span><br><span class="line">            System.Runtime.InteropServices.Marshal.ReleaseComObject(xlsWorkBook);</span><br><span class="line">            System.Runtime.InteropServices.Marshal.ReleaseComObject(xlsApp);</span><br><span class="line">            xlsWorkSheet = <span class="literal">null</span>;</span><br><span class="line">            xlsWorkBook = <span class="literal">null</span>;</span><br><span class="line">            xlsApp = <span class="literal">null</span>;</span><br><span class="line">            GC.Collect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C Sharp</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭程序窗口后仍有线程残留的解决办法</title>
    <url>/2017-11-07/%E5%85%B3%E9%97%AD%E7%A8%8B%E5%BA%8F%E7%AA%97%E5%8F%A3%E5%90%8E%E4%BB%8D%E6%9C%89%E7%BA%BF%E7%A8%8B%E6%AE%8B%E7%95%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>我原来一直喜欢用backgroundworker搞多线程，反而是Thread类使用较少。最近更新debug tool的时候使用了一些同事的代码，遇到了线程泄漏的问题。</p>
<a id="more"></a>
<p>同事的代码中使用了Thread类而且内部是一个while(true)的死循环。这导致除了thread.Abort()外似乎没有其他终止线程的方法。。。<br>但是thread.Abort()不一定能够直接杀死线程，在某些情况下，即使在formclosing中调用了thread.Abort()，关闭程序窗口后仍然有线程残留。<br>如果不想修改原来的thread方法，可以通过</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">Application.Exit();</span><br></pre></td></tr></table></figure>
<p>来退出应用程序。但是此方法并不会对后台线程和资源进行强制回收。于是用了下面这种更粗暴的方法：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">Environment.Exit(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>问题解决。不过这次的经历再次提醒了我，最好别在Thread中写while(true)，也不要使用thread.Abort()这种不安全的方法。<br>如果实在担心出现野线程，还是使用backgroundworker吧。</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C Sharp</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>项目总结（一）：平衡车的设计概述</title>
    <url>/2017-11-05/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B9%B3%E8%A1%A1%E8%BD%A6%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>写篇post总结一下当年做平衡车的一些经验。这篇post是概述性质的，详细的软硬件设计以后有时间再写吧。</p>
<a id="more"></a>

<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>其实大二大三的时候都有参加智能车竞赛(原来叫飞思卡尔智能车竞赛，简称飞赛，后来飞思卡尔被nxp收购，改名恩智浦智能车竞赛..)，但是学院有个政策，不允许同一年既参加电子设计竞赛（简称电赛）又参加飞赛，理由是要让更多的同学有机会参加到比赛中（至少老师是这么告诉我们的），于是大二那一年做智能车做到一半就弃权参加电赛去了。不过后来我和我的小伙伴们发现，居然有些同学两个比赛都参加了，这TM就很尴尬了。。</p>
<h2 id="硬件基本架构"><a href="#硬件基本架构" class="headerlink" title="硬件基本架构"></a>硬件基本架构</h2><p>概括来讲，需要关心的是三个部份:</p>
<h3 id="1-电源"><a href="#1-电源" class="headerlink" title="1.电源"></a>1.电源</h3><p>首先稳压电路是一定会有的，我们选用了LM1117，外围电路简单，使用十分方便，可替代的LDO也不少。另外如果使用MOS管自己搭H桥，就需要boost电路了。</p>
<h3 id="2-主控部分"><a href="#2-主控部分" class="headerlink" title="2.主控部分"></a>2.主控部分</h3><p>这个部分包括MCU最小系统以及各种传感器。对于平衡车而言，陀螺仪、角度传感器和编码器、图像传感器都算是核心传感器，一个用于获取角加速度，一个获取当前角度，一个获取电机转速，最后一个当然是识别赛道啦。除此之外，我们还使用了蓝牙模块，自己写了个上位机，无线调车、实时图传简直不能再爽。</p>
<h3 id="3-驱动桥（H桥）"><a href="#3-驱动桥（H桥）" class="headerlink" title="3.驱动桥（H桥）"></a>3.驱动桥（H桥）</h3><p>平衡车是有两个电机的，而且两个电机都要求能够正反转，因此需要两个全桥，需要4片BTS7970或者8片mos。大二图方便，使用的是BTS7970，淘宝上一片二三十。。。<br>大三总裁用mos管搭了一个，效果差不多，成本却低了不少。后来我毕设要用到电机控制又自己画了一块，虽然只是双面板并且为了过大电流大面积开窗，但是花点时间优化layout还是可以把板子做得很小。大三的电路图由于硬盘挂了找不到了:( 贴个毕设搭的MOSH Layout图：</p>
<p><img src="/2017-11-05/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B9%B3%E8%A1%A1%E8%BD%A6%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/MOSH1.png" alt="Top" title="Top"><br><img src="/2017-11-05/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B9%B3%E8%A1%A1%E8%BD%A6%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/MOSH2.png" alt="Bottom" title="Bottom"></p>
<p>设计文件挺早的时候就上传了：<br><a href="https://github.com/codingspirit/MOS_H" target="_blank" rel="noopener">Coding Spirit:MOS_H</a></p>
<h2 id="MCU选型"><a href="#MCU选型" class="headerlink" title="MCU选型"></a>MCU选型</h2><p>大二用的是coldfire，大三用的是K60。Coldfire是freescale自己的架构，当时我们用的mcf52255, 最高80MHz，K60是Cortex-M4，最高100MHz，另外带FPU。<br>就我的个人感觉来说，K60的综合性能是要好于mcf52255的。另外coldfire资料不如k60多，这点对于初学者来说比较关键，因为从准备到参赛只有几个月的时间，从头开始学一款没接触过的架构的MCU会花掉大量时间。但是Coldfire配合Codewarrior有种STM32CUBEMX的感觉，代码生成感觉还不错。</p>
<h2 id="软件基本架构"><a href="#软件基本架构" class="headerlink" title="软件基本架构"></a>软件基本架构</h2><p>首先贴个代码：<a href="https://github.com/codingspirit/Balance_Car" target="_blank" rel="noopener">Coding Spirit:Balance_Car</a></p>
<h3 id="是否跑RTOS"><a href="#是否跑RTOS" class="headerlink" title="是否跑RTOS"></a>是否跑RTOS</h3><p>裸奔和RTOS其实都能做，但由于PID控制的周期性，使用定时器中断控制周期，进行采样、计算、输出显得非常和谐，任务不多的情况下裸奔其实更合理一点。我们也使用了这种方式，通过1ms的定时器中断进行状态机的切换。</p>
<h3 id="PID控制"><a href="#PID控制" class="headerlink" title="PID控制"></a>PID控制</h3><p>对于自动化专业的学生来说，这种控制还是蛮简单的。首先平衡车需要实现三个闭环：<br>1.角度闭环：建议使用PD控制。如果有陀螺仪的话不用计算差分，直接把Kd*陀螺仪测量值作为D项就可以了。我尝试过加入I项，要么系统滞后非常严重，要么没什么用。。。<br>2.速度闭环：建议使用PI控制。建议不加入D项的原因是系统不需要预测速度，速度是我们直接给定的，比较稳定。<br>3.转向闭环: 当时使用的是PD控制。D项来源于纵向的陀螺仪测量值，我们担心会出现转向过猛的情况，加入D负反馈限制了转向加速度，不然容易出现P参数过大时车体原地打转的<br>情况。<br>另外增量式和位置式PID的选择不用过多纠结，只有速度环有I项，积分饱和的情况很少见。不过积分限幅和输出限幅很有必要，不然车很容易撞坏。。</p>
<h3 id="上位机"><a href="#上位机" class="headerlink" title="上位机"></a>上位机</h3><p>我设计了个简陋的通信协议，并且写了两个配套的上位机，一个是初代没有图传功能，用VC++写的，V2.0就用C#写了一个可以实时传输图像的上位机，另外使用了自创的蜜汁压缩，稳定30fps哦！这里吹一波，比那些每4秒1帧的好到不知道哪里去了。但是当时着急用，代码写得很乱。。。<br>V2.0源代码在此：<a href="https://github.com/codingspirit/CarDebugger_V2.0" target="_blank" rel="noopener">Coding Spirit:Car_Debugger_V2.0</a></p>
]]></content>
      <categories>
        <category>项目总结</category>
      </categories>
      <tags>
        <tag>智能车</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Regex</title>
    <url>/2017-11-01/%E5%B8%B8%E7%94%A8%E7%9A%84Regex/</url>
    <content><![CDATA[<p>当进行数据分析时，我们常使用正则表达式爬取字符串得到目标数据。（有点爬虫的感觉）</p>
<a id="more"></a>

<h2 id="目标数据为单行的情况"><a href="#目标数据为单行的情况" class="headerlink" title="目标数据为单行的情况"></a>目标数据为单行的情况</h2><p>最简单的情况，字符串可能是这样的：<br>!@#$%[mark1]data[mark2]!@#$%<br>!@#$%[mark1]data[mark2]!@#$%<br>…</p>
<p>其中“!@#$%”为一大段不关心的字符，[mark1]和[mark2]为特定字符用于标记数据。我们的目标是将这个data得到。<br>以源字符串、[mark1]和[mark2]分别为srcData、”#”、”!”为例，可以这样匹配：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="keyword">value</span> = Regex.Match(srcData, <span class="string">"(?&lt;=#).*?(?=!)"</span>).Value;</span><br></pre></td></tr></table></figure>
<p>此段代码将对#和!之间的除\n之外的字符进行非贪婪匹配。<br>注意，由于使用了通配符”.”,如果目标数据是多行,该正则表达式将不能正确匹配。</p>
<h2 id="目标数据为多行"><a href="#目标数据为多行" class="headerlink" title="目标数据为多行"></a>目标数据为多行</h2><p>前段时间的一个项目中要求从.c文件中获得某一struct的全部成员变量，一般而言struct内部都是多行的，因此上一种方式无法正确匹配。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="keyword">value</span> = Regex.Match(srcData, <span class="string">@"(?&lt;=[START])[\s\S]+?(?=[END])"</span>).Value;</span><br></pre></td></tr></table></figure>
<p>这种方式就比较粗暴了，直接非贪婪匹配所有字符（非空格和空格字符），所以得到的数据通常包括\r\n。</p>
]]></content>
      <categories>
        <category>编程相关</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome</title>
    <url>/2017-10-31/Welcome/</url>
    <content><![CDATA[<h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><center>
<img src="/assets/img/coding_spirit.jpg" width="50%" height="50%">
</center>
这是一个用node.js+hexo+github搭建起来的小站。好记性不如烂键盘，以后多多写blog咯！]]></content>
      <categories>
        <category>随便写写</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
</search>
